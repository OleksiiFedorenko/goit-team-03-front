{"version":3,"file":"static/js/630.d7c600d3.chunk.js","mappings":"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","sources":["components/AuthFormRegister/AuthFormRegister.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { getRegistration } from 'store/auth/operations';\nimport { Button, TextField, OutlinedInput, InputAdornment, IconButton, Box, FormControl } from '@mui/material';\nimport RemoveRedEyeOutlinedIcon from '@mui/icons-material/RemoveRedEyeOutlined';\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';\nimport { useFormik } from 'formik';\nimport { form } from '../../styles'\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().trim().required(),\n  email: yup.string().email().matches(/^[^@]+@[^@]+\\..+$/, 'email must be a valid email').required(),\n  password: yup.string().min(8).required(),\n});\n\nexport const AuthFormRegister = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => setShowPassword((show) => !show);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, {setSubmitting}) => {\n    console.log(JSON.stringify(values, null, 2));\n    dispatch(getRegistration(values))\n    setSubmitting(false);\n  }\n\n  const initialValues = {\n    name: '',\n    email: '', \n    password: '', \n  } \n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit,\n  });\n\n  return (\n    <FormControl onSubmit={formik.handleSubmit} sx={form.form} component='form'>\n      {formik.touched.name && formik.errors.name ? (\n        <Box sx={form.error}>{formik.errors.name}</Box>\n      ) : null}\n\n      <TextField\n        name=\"name\"\n        type=\"text\"\n        variant=\"outlined\"\n        placeholder=\"Enter your name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        color='input'\n        fullWidth\n        sx={form.input}\n        inputProps={{\n          style: { color: 'white' },\n        }}\n    />\n\n      {formik.touched.email && formik.errors.email ? (\n        <Box component='div' sx={form.error}>{formik.errors.email}</Box>\n      ) : null}\n\n      <TextField\n        name=\"email\"\n        variant=\"outlined\"\n        placeholder=\"Enter your email\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        fullWidth\n        inputProps={{\n          style: { color: 'white' },\n        }}\n        color='input'\n        sx={form.input}\n    />\n\n      {formik.touched.password && formik.errors.password ? (\n        <Box component='div' sx={form.error}>{formik.errors.password}</Box>\n      ) : null}\n\n      <OutlinedInput\n        name=\"password\"\n        type={showPassword ? \"text\" : \"password\"}\n        placeholder=\"Create a password\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        onBlur={formik.handleBlur}\n        fullWidth\n        color='input'\n        sx={form.input}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton onClick={handleClickShowPassword} edge=\"end\" sx={form.icon} >\n              {showPassword ? <RemoveRedEyeOutlinedIcon /> : <VisibilityOffOutlinedIcon />}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n      <Button \n        color=\"button\" \n        variant=\"contained\"\n        fullWidth type=\"submit\"\n        sx={form.button}\n      >\n        Register Now\n      </Button>\n    </FormControl>\n  );\n}","import { AuthFormRegister } from 'components/AuthFormRegister';\n\nconst RegisterPage = () => {\n  return <AuthFormRegister />;\n};\n\nexport default RegisterPage;\n"],"names":["validationSchema","yup","shape","name","trim","required","email","matches","password","min","AuthFormRegister","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","_ref","setSubmitting","console","log","JSON","stringify","getRegistration","_jsxs","FormControl","handleSubmit","sx","form","component","children","touched","errors","_jsx","Box","TextField","type","variant","placeholder","value","onChange","handleChange","onBlur","handleBlur","error","Boolean","color","fullWidth","inputProps","style","OutlinedInput","endAdornment","InputAdornment","position","IconButton","onClick","show","edge","RemoveRedEyeOutlinedIcon","VisibilityOffOutlinedIcon","Button"],"sourceRoot":""}
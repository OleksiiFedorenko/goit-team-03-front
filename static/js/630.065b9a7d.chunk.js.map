{"version":3,"file":"static/js/630.065b9a7d.chunk.js","mappings":"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","sources":["components/AuthFormRegister/AuthFormRegister.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { getRegistration } from 'store/auth/operations';\nimport { Button, TextField, OutlinedInput, InputAdornment, IconButton, Box, FormControl } from '@mui/material';\nimport RemoveRedEyeOutlinedIcon from '@mui/icons-material/RemoveRedEyeOutlined';\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';\nimport { useFormik } from 'formik';\nimport { form } from '../../styles'\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().trim().required(),\n  email: yup.string().email().matches(/^[^@]+@[^@]+\\..+$/, 'email must be a valid email').required(),\n  password: yup.string().min(8).required(),\n});\n\nexport const AuthFormRegister = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => setShowPassword((show) => !show);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, {setSubmitting}) => {\n    console.log(JSON.stringify(values, null, 2));\n    dispatch(getRegistration(values))\n    setSubmitting(false);\n  }\n\n  const initialValues = {\n    name: '',\n    email: '', \n    password: '', \n  } \n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit,\n  });\n\n  return (\n    <FormControl onSubmit={formik.handleSubmit} sx={form.form} component='form'>\n      {formik.touched.name && formik.errors.name ? (\n        <Box sx={form.error}>{formik.errors.name}</Box>\n      ) : null}\n\n      <TextField\n        name=\"name\"\n        type=\"text\"\n        variant=\"outlined\"\n        placeholder=\"Enter your name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        color='input'\n        fullWidth\n        sx={form.input}\n        inputProps={{\n          style: { color: 'white' },\n        }}\n    />\n\n      {formik.touched.email && formik.errors.email ? (\n        <Box component='div' sx={form.error}>{formik.errors.email}</Box>\n      ) : null}\n\n      <TextField\n        name=\"email\"\n        variant=\"outlined\"\n        placeholder=\"Enter your email\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        fullWidth\n        inputProps={{\n          style: { color: 'white' },\n        }}\n        color='input'\n        sx={form.input}\n    />\n\n      {formik.touched.password && formik.errors.password ? (\n        <Box component='div' sx={form.error}>{formik.errors.password}</Box>\n      ) : null}\n\n      <OutlinedInput\n        name=\"password\"\n        type={showPassword ? \"text\" : \"password\"}\n        placeholder=\"Create a password\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        onBlur={formik.handleBlur}\n        fullWidth\n        color='input'\n        sx={form.input}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton onClick={handleClickShowPassword} edge=\"end\" sx={form.icon} >\n              {showPassword ? <RemoveRedEyeOutlinedIcon /> : <VisibilityOffOutlinedIcon />}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n      <Button \n        color=\"button\" \n        variant=\"contained\"\n        fullWidth type=\"submit\"\n        sx={form.button}\n      >\n        Register Now\n      </Button>\n    </FormControl>\n  );\n}","import { AuthFormRegister } from 'components/AuthFormRegister';\n\nconst RegisterPage = () => {\n  return <AuthFormRegister />;\n};\n\nexport default RegisterPage;\n"],"names":["validationSchema","yup","shape","name","trim","required","email","matches","password","min","AuthFormRegister","useState","showPassword","setShowPassword","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","setSubmitting","console","log","JSON","stringify","getRegistration","FormControl","handleSubmit","sx","form","component","touched","errors","Box","TextField","type","variant","placeholder","value","onChange","handleChange","onBlur","handleBlur","error","Boolean","color","fullWidth","inputProps","style","OutlinedInput","endAdornment","InputAdornment","position","IconButton","onClick","show","edge","RemoveRedEyeOutlined","VisibilityOffOutlined","Button"],"sourceRoot":""}
{"version":3,"file":"static/js/882.2fa3f875.chunk.js","mappings":"4RAOaA,EAAO,WAClB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAE1BC,EAAY,UAGhB,MAFkB,UAAdH,GAAuC,SAAdA,IAAsBG,EAAY,SAG7DC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAIC,EAAAA,GAAAA,GAAeC,SAAA,EACtBC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACC,GAAIC,EAAAA,GAAAA,GAAiBC,UACxBC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACC,GAAIC,EAAAA,GAAAA,GAAcC,UACrBC,EAAAA,EAAAA,KAACC,EAAAA,IAAO,CAACC,MAAOR,EAAWS,KAAM,cAGrCH,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,UAAU,KAAKR,GAAIC,EAAAA,GAAAA,GAAUC,SAAC,eAKhD,E,yFCRaO,EAAW,C,i9vCCClBC,EAAY,CAChB,UACA,OACA,UACA,eACA,YACA,YACA,SACA,WAGIC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KACJG,SAAS,eACTC,IAAI,EAAG,gDAEVC,KAAML,EAAAA,KAAaG,SAAS,eAE5BG,WAAYN,EAAAA,OAGRO,EAAgB,CACpBL,MAAO,GACPG,KAAMP,EAAU,GAChBQ,WAAY,KAoHd,EAjHkB,SAAHE,GAOR,IANLC,EAAYD,EAAZC,aACAC,EAAQF,EAARE,SACAR,EAAKM,EAALN,MACAS,EAAIH,EAAJG,KACAC,EAAcJ,EAAdI,eACAC,EAAEL,EAAFK,GAEMC,GAAWC,EAAAA,EAAAA,MAWjB,OACExB,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CAAC5B,GAAI6B,EAAAA,GAAAA,GAAmB3B,UAChCC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAM,CACLX,cAAeG,GAAsBH,EACrCR,iBAAkBA,EAClBoB,SAde,SAACC,EAAMC,GAAoC,IAAhCC,EAAaD,EAAbC,cAAeC,EAASF,EAATE,UACvCC,EAAgBX,GAAWY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQL,GAAM,IAAEP,GAAAA,IAAtBO,EAC3BN,EAASF,EAAeY,IAExBF,GAAc,GACdC,IACAd,GACF,EAQMiB,kBAAkB,EAAKpC,SAEtB,SAAAqC,GAAA,IAAGC,EAAYD,EAAZC,aAAcR,EAAMO,EAANP,OAAM,OACtBlC,EAAAA,EAAAA,MAAC2C,EAAAA,GAAI,CAAAvC,SAAA,EACHC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACmC,QAAQ,KAAKC,GAAI,OAAOzC,SACjCY,KAEHhB,EAAAA,EAAAA,MAAC8C,EAAAA,EAAS,CAAA1C,SAAA,EACRC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAS,CACRtB,KAAK,OACLuB,KAAK,QACLC,YAAY,QACZC,MAAOhB,EAAOlB,MACdmC,SAAUT,EACVxC,GAAIkD,EAAAA,GAAAA,KAEN/C,EAAAA,EAAAA,KAACgD,EAAAA,GAAY,CACXL,KAAK,QACLtC,UAAU,MACV4C,MAAOC,EAAAA,GAAAA,SAGXvD,EAAAA,EAAAA,MAACwD,EAAAA,EAAW,CAAApD,SAAA,EACVJ,EAAAA,EAAAA,MAAC8C,EAAAA,EAAS,CAAC5C,GAAIqD,EAAAA,GAAAA,GAAWnD,SAAA,EACxBC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACmC,QAAQ,KAAK1C,GAAIuD,EAAAA,GAAAA,GAAWrD,SAAC,WAGzCC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACyD,KAAK,QAAQxD,GAAI6B,EAAAA,GAAAA,GAAkB3B,SACrCQ,EAAU+C,KAAI,SAACxC,EAAMyC,GAAK,OACzB5D,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAaC,GAAI6B,EAAAA,GAAAA,GAAoB3B,SAAA,EACvCC,EAAAA,EAAAA,KAACwD,EAAAA,GAAK,CACJpC,KAAK,QACLE,GAAIiC,EACJZ,KAAK,OACLE,MAAO/B,EACP2C,QAAS5B,EAAOf,OAASA,KAE3Bd,EAAAA,EAAAA,KAACyC,EAAAA,EAAS,CAACiB,QAASH,EAAO1D,GAAI8D,EAAAA,GAAU5D,UACvCC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAIR,EAAMjB,GAAIgE,EAAAA,GAAAA,SATdN,EAWJ,OAGVvD,EAAAA,EAAAA,KAACgD,EAAAA,GAAY,CAACL,KAAK,OAAOtC,UAAU,YAGtCV,EAAAA,EAAAA,MAAC8C,EAAAA,EAAS,CAAC5C,GAAIqD,EAAAA,GAAAA,GAAYD,MAAO,CAAEa,aAAc,QAAS/D,SAAA,EACzDC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACmC,QAAQ,KAAK1C,GAAIuD,EAAAA,GAAAA,GAAWrD,SAAC,gBAGzCC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACC,GAAI6B,EAAAA,GAAAA,GAAoB3B,SAC1BO,EAASgD,KAAI,SAACS,EAASR,GAAK,OAC3B5D,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAaC,GAAI6B,EAAAA,GAAAA,GAAkB3B,SAAA,EACrCC,EAAAA,EAAAA,KAACwD,EAAAA,GAAK,CACJpC,KAAK,QACLE,GAAE,OAAA0C,OAAST,GACXZ,KAAK,aACLE,MAAOU,EACPE,QAASQ,OAAOpC,EAAOd,cAAgBwC,KAEzCvD,EAAAA,EAAAA,KAACyC,EAAAA,EAAS,CACRiB,QAAO,OAAAM,OAAST,GAChB1D,GAAIqD,EAAAA,GAAAA,GACJD,MAAO,CAAEiB,gBAAgB,OAADF,OAASD,EAAO,UAXlCR,EAaJ,OAGVvD,EAAAA,EAAAA,KAACgD,EAAAA,GAAY,CAACL,KAAK,aAAatC,UAAU,eAG9CL,EAAAA,EAAAA,KAACmE,EAAAA,EAAY,CAAApE,SAAEqB,MACV,KAKjB,E,+ECnJagD,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,IAAIC,QAAS,E,UC2B7CC,EAAe,WAC1B,IAAAC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GACxBpD,GAAWC,EAAAA,EAAAA,MACTuD,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAQzF,EAAAA,EAAAA,IAAY0F,EAAAA,IAC1BC,GAA4DT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAApEE,EAAsBD,EAAA,GAAEE,EAAyBF,EAAA,GAClDG,GAAWC,EAAAA,EAAAA,MACXC,GAASjG,EAAAA,EAAAA,IAAYkG,EAAAA,IACrBnB,GAAW/E,EAAAA,EAAAA,IAAY4E,IAE7BuB,EAAAA,EAAAA,YAAU,WACHF,EAAOG,OAGVL,EAASE,EAAOlB,GAAUsB,KAF1BN,EAAS,QAIb,GAAG,CAACE,EAAQlB,EAAUgB,KAEtBI,EAAAA,EAAAA,YAAU,WACJZ,GAASxD,GAASuE,EAAAA,EAAAA,IAAaf,GACrC,GAAG,CAACxD,EAAUwD,IAEd,IAAMgB,EAAkB,WACtBjB,GAAa,EACf,EAEMkB,EAAmB,WACvBlB,GAAa,GACbQ,GAA0B,EAC5B,EAQMW,EAAyB,WAC7BX,GAA0B,EAC5B,EAEA,OACE3F,EAAAA,EAAAA,MAAAuG,EAAAA,SAAA,CAAAnG,SAAA,EACEC,EAAAA,EAAAA,KAACmG,EAAAA,EAAI,CAACtG,GAAI6B,EAAAA,GAAAA,GAAyB3B,SAC1B,OAAN0F,QAAM,IAANA,OAAM,EAANA,EAAQnC,KAAI,SAAC2B,EAAO1B,GACnB,OACEvD,EAAAA,EAAAA,KAACoG,EAAAA,GAAQ,CAAiBC,gBAAc,EAAAtG,UACtCJ,EAAAA,EAAAA,MAAC2G,EAAAA,EAAc,CACbjG,UAAWkG,EAAAA,GACXC,GAAIvB,EAAMY,IACVhG,GAAIgE,EAAAA,GAAAA,GACJ4C,QAAS,WACPlF,GAASmF,EAAAA,EAAAA,GAAYnD,GACvB,EAAExD,SAAA,EAEFC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAI2D,EAAMnE,KAAMjB,GAAIiB,EAAAA,GAAAA,MAC1Bd,EAAAA,EAAAA,KAAC2G,EAAAA,EAAY,CAACC,QAAS3B,EAAMtE,MAAOkG,mBAAiB,IACpD5B,EAAMY,MAAQd,IACbpF,EAAAA,EAAAA,MAAAuG,EAAAA,SAAA,CAAAnG,SAAA,EACEC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CACF6G,QAASV,EACT7F,MAAM,UACNC,KAAK,QACLN,GAAI,CAAEiH,GAAI,MAAOC,QAAS,QAAShH,UAEnCC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAI,SAAUzB,GAAIiB,EAAAA,GAAAA,QAE1Bd,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CACF6G,QAASR,EACT9F,KAAK,QACLD,MAAM,UACNL,GAAI,CAAEiH,GAAI,OAAQC,QAAS,QAAShH,UAEpCC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAI,QAASzB,GAAIiB,EAAAA,GAAAA,cA3BlBmE,EAAMY,IAkCzB,OAGF7F,EAAAA,EAAAA,KAACgH,EAAAA,EAAK,CAACC,YAAapC,EAAW3D,aAAc8E,EAAiBjG,UAC5DC,EAAAA,EAAAA,KAACkH,EAAS,CACRhG,aAAc8E,EACdrF,MAAM,aACNS,KAAK,OACLC,eAAgB8F,EAAAA,GAChB7F,GAAI2D,EAAMY,IACV1E,SAAU,CACRR,MAAOsE,EAAMtE,MACbG,KAAMmE,EAAMnE,KACZC,WAAYkE,EAAMlE,iBAKxBf,EAAAA,EAAAA,KAACoH,EAAAA,EAAkB,CACjBH,YAAa5B,EACbnE,aAAc8E,EACdqB,UAtEoB,WACxB9F,GAAS+F,EAAAA,EAAAA,IAAYrC,EAAMY,MAC3BP,GAA0B,GAC1B/D,GAASmF,EAAAA,EAAAA,GAAY,GACvB,EAmEMa,QAAQ,8CACR5G,MAAM,oEAId,E,oBC3Ha6G,EAAW,WACtB,IAAA/C,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAMxBqB,EAAmB,WACvBlB,GAAa,EACf,EAEA,OACEnF,EAAAA,EAAAA,MAAC8H,EAAAA,EAAK,CAAC5H,GAAI6B,EAAAA,GAAAA,GAAmB3B,SAAA,EAC5BC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,UAAU,KAAKkC,QAAQ,KAAK1C,GAAIuD,EAAAA,GAAAA,GAAmBrD,SAAC,eAIhEC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACC,GAAIgE,EAAAA,GAAAA,GAA0B9D,UACjCJ,EAAAA,EAAAA,MAAC+H,EAAAA,EAAM,CACLjB,QAhBgB,WACtB3B,GAAa,EACf,EAeQvC,QAAQ,OACR1C,GAAIgE,EAAAA,GAAAA,GAAmB9D,SAAA,CACxB,YACSC,EAAAA,EAAAA,KAAA,SAAM,aAEdA,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAAC+H,UAAU,iBAAiB9H,GAAIgE,EAAAA,GAAAA,GAAsB9D,UACxDC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAI,OAAQzB,GAAIiB,EAAAA,GAAAA,aAI5Bd,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACC,GAAI6B,EAAAA,GAAAA,GAAuB3B,UAC9BC,EAAAA,EAAAA,KAACwE,EAAY,OAGfxE,EAAAA,EAAAA,KAACgH,EAAAA,EAAK,CAACC,YAAapC,EAAW3D,aAAc8E,EAAiBjG,UAC5DC,EAAAA,EAAAA,KAACkH,EAAS,CACRhG,aAAc8E,EACdrF,MAAM,YACNS,KAAK,SACLC,eAAgBuG,EAAAA,SAK1B,EC/CMC,EAAapH,EAAAA,KAAaC,MAAM,CACpCoH,MAAOrH,EAAAA,KACJsH,QACC,uJACA,CACER,QAAS,gBACTS,oBAAoB,IAGvBpH,SAAS,4BACZwC,KAAM3C,EAAAA,KAAaG,SAAS,gCAGjBqH,EAAe,SAAHhH,GAA0B,IAApBC,EAAYD,EAAZC,aACvBK,GAAWC,EAAAA,EAAAA,MASjB,OACE7B,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI6B,EAAAA,GAAAA,GAA4B3B,SAAA,EACnCC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACmC,QAAQ,KAAKC,GAAI,EAAEzC,SAAC,eAGhCC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAM,CACLX,cAAe,CAAE8G,MAAO,GAAI1E,KAAM,IAClC5C,iBAAkBqH,EAClBjG,SAfN,SAAsBC,EAAMC,GAAkB,IAAdE,EAASF,EAATE,UACtB8F,EAAgBjG,EAAhBiG,MAAO1E,EAASvB,EAATuB,KACf7B,GAAS2G,EAAAA,EAAAA,IAAS,CAAEJ,MAAAA,EAAO1E,KAAAA,KAC3BpB,IACAd,GACF,EAU6BnB,SAEtB,SAAAqC,GAAA,IAAGP,EAAMO,EAANP,OAAQQ,EAAYD,EAAZC,aAAc8F,EAAY/F,EAAZ+F,aAAcC,EAAYhG,EAAZgG,aAAY,OAClDpI,EAAAA,EAAAA,KAAA,QAAM4B,SAAUuG,EAAapI,UAC3BJ,EAAAA,EAAAA,MAACwD,EAAAA,EAAW,CAACkF,WAAS,EAAAtI,SAAA,EACpBC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAS,CACRC,KAAK,QACL2F,MAAM,gBACN/F,QAAQ,WACR1C,GAAI,CAAE2C,GAAI,MACVK,MAAOhB,EAAOiG,MACdhF,SAAUT,KAEZrC,EAAAA,EAAAA,KAACgD,EAAAA,GAAY,CACXL,KAAK,QACLtC,UAAU,MACV4C,MAAO,CACL/C,MAAO,MACPqI,SAAU,GACVC,WAAY,GACZ1E,aAAc,MAGlB9D,EAAAA,EAAAA,KAAC0C,EAAAA,EAAS,CACRC,KAAK,OACL2F,MAAM,UACN/F,QAAQ,WACRkG,WAAS,EACTC,KAAM,EACN7I,GAAI,CAAE2C,GAAI,GACVK,MAAOhB,EAAOuB,KACdN,SAAUT,KAEZrC,EAAAA,EAAAA,KAACgD,EAAAA,GAAY,CACXL,KAAK,OACLtC,UAAU,MACV4C,MAAO,CACL/C,MAAO,MACPqI,SAAU,GACVC,WAAY,GACZ1E,aAAc,MAGlB9D,EAAAA,EAAAA,KAAC0H,EAAAA,EAAM,CACLxH,MAAM,UACNqC,QAAQ,YACR8F,WAAS,EACTxI,GAAI,CACF8I,OAAQ,GACRC,cAAe,QAEjBxH,KAAK,SACLyH,SAAUT,EAAarI,SACxB,aAIE,MAKjB,E,oBC7Fa+I,EAAa,WACxB,IAAArE,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAKxBqB,EAAmB,WACvBlB,GAAa,EACf,EACA,OACEnF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI6B,EAAAA,GAAAA,GAA8B3B,SAAA,EACrCC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CACFS,UAAU,MACV0I,I,imPACAC,IAAI,mBACJnJ,GAAI,CACFoJ,MAAO,GACPN,OAAQ,GACRH,UAAW,OACXU,WAAY,OACZpF,aAAc,WAElBnE,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,UAAU,IAAIkC,QAAQ,QAAQ1C,GAAIuD,EAAAA,GAAAA,GAAoBrD,SAAA,CAAC,6BACtCC,EAAAA,EAAAA,KAAA,UAC3BA,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,UAAU,OAAOkC,QAAQ,QAAQ1C,GAAIuD,EAAAA,GAAAA,GAAYrD,SAAC,YAAqB,mFAGrFJ,EAAAA,EAAAA,MAAC+H,EAAAA,EAAM,CAACnF,QAAQ,OAAO1C,GAAIgE,EAAAA,GAAAA,GAAsB4C,QAzB7B,WACtB3B,GAAa,EACf,EAuB8E/E,SAAA,EACxEC,EAAAA,EAAAA,KAACmJ,EAAAA,EAAO,CAACtJ,GAAIuD,EAAAA,GAAAA,GAAoBrD,UAC3BC,EAAAA,EAAAA,KAAA,OAAKiJ,MAAM,OAAON,OAAO,OAAOS,OAAO,eAAeC,KAAK,OAAMtJ,UAC/DC,EAAAA,EAAAA,KAAA,OAAKsJ,KAAMC,EAAAA,EAAS,2BAG5BvJ,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,UAAU,OAAOkC,QAAQ,KAAK1C,GAAIuD,EAAAA,GAAAA,GAAsBrD,SAAC,kBAEtE8E,IACC7E,EAAAA,EAAAA,KAACgH,EAAAA,EAAK,CAACC,YAAapC,EAAW3D,aAAc8E,EAAiBjG,UAC5DC,EAAAA,EAAAA,KAACiI,EAAY,CACX/G,aAAc8E,EACdrF,MAAM,YACNS,KAAK,eAMjB,E,UC/CaoI,EAAS,WACpB,IAAMjI,GAAWC,EAAAA,EAAAA,MAEjB,OACE7B,EAAAA,EAAAA,MAAC+H,EAAAA,EAAM,CACLjB,QAAS,kBAAMlF,GAASkI,EAAAA,EAAAA,MAAS,EACjClH,QAAQ,OACR1C,GAAIgE,EAAAA,GAAAA,GAAc9D,SAAA,EAElBC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAI,QAASzB,GAAIiB,EAAAA,GAAAA,KAAe,YAI5C,ECZa4I,EAAU,SAAHzI,GAAwB,IAAlB0I,EAAU1I,EAAV0I,WACxB,OACEhK,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI8J,EAAW5J,SAAA,EAClBJ,EAAAA,EAAAA,MAAC8H,EAAAA,EAAK,CAAC5H,GAAI6B,EAAAA,GAAAA,GAAqB3B,SAAA,EAC9BC,EAAAA,EAAAA,KAACV,EAAI,KACLU,EAAAA,EAAAA,KAACwH,EAAQ,QAEX7H,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAG,SAAA,EACFC,EAAAA,EAAAA,KAAC8I,EAAU,KACX9I,EAAAA,EAAAA,KAACwJ,EAAM,SAIf,E,UCdaI,EAAa,WACxB,IAAAnF,GAAsCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9CoF,EAAWlF,EAAA,GAAEmF,EAAcnF,EAAA,GAClCQ,GAAsCT,EAAAA,EAAAA,UAASqF,OAAOC,YAAW5E,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1D8E,EAAW7E,EAAA,GAAE8E,EAAc9E,EAAA,GAE5B+E,EAAa,WACjBL,GAAgBD,EAClB,EAEMO,EAAqB,WACzBF,EAAeH,OAAOC,WACxB,EAeA,OAbArE,EAAAA,EAAAA,YAAU,WAER,OADAoE,OAAOM,iBAAiB,SAAUD,GAC3B,WACLL,OAAOO,oBAAoB,SAAUF,EACvC,CACF,GAAG,KAEHzE,EAAAA,EAAAA,YAAU,WACJsE,GAAe,MACjBH,GAAe,EAEnB,GAAG,CAACG,IAGFA,GAAe,OACbtK,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEiH,GAAI,QAAS/G,SAAA,EACtBC,EAAAA,EAAAA,KAAC0H,EAAAA,EAAM,CAACjB,QAAS0D,EAAYtK,GAAIgE,EAAAA,GAAAA,GAAkB9D,UACjDC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAI,cAAezB,GAAIiB,EAAAA,GAAAA,QAE/Bd,EAAAA,EAAAA,KAACuK,EAAAA,GAAM,CAACC,OAAO,OAAOC,KAAMZ,EAAaa,QAASP,EAAWpK,UAC3DC,EAAAA,EAAAA,KAAC0J,EAAO,CAACC,WAAYjI,EAAAA,GAAAA,SAK/B,E,qBCnCaiJ,GAAa,WACxB,IAAMpJ,GAAWC,EAAAA,EAAAA,MACXjC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAE9BgF,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCmG,EAAQjG,EAAA,GAAEkG,EAAWlG,EAAA,GACtB8F,EAAOK,QAAQF,GAKfG,EAAc,SAAAC,GACJ,UAAVA,GAA+B,SAAVA,GAA8B,WAAVA,GAC3CzJ,GAAS0J,EAAAA,EAAAA,IAAYD,IAEvBH,EAAY,KACd,EAEA,OACElL,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAG,SAAA,EACFJ,EAAAA,EAAAA,MAAC+H,EAAAA,EAAM,CACLnF,QAAQ,OACR1C,GAAIgE,EAAAA,GAAAA,GACJvC,GAAG,eACH,gBAAemJ,EAAO,kBAAeS,EACrC,gBAAc,OACd,gBAAeT,EAAO,YAASS,EAC/BzE,QApBa,SAAA0E,GACjBN,EAAYM,EAAMC,cACpB,EAkB0BrL,SAAA,CACrB,SAECC,EAAAA,EAAAA,KAACmJ,EAAAA,EAAO,CACNtJ,GAAI,CACFoJ,MAAO,OACPN,OAAQ,OACR0C,GAAI,MACJnL,MAAO,gBACPH,UAEFC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAI,eAAgBzB,GAAIiB,EAAAA,GAAAA,WAGlCnB,EAAAA,EAAAA,MAAC2L,GAAAA,EAAI,CACHzL,GAAIgE,EAAAA,GAAAA,GACJvC,GAAG,aACHsJ,SAAUA,EACVH,KAAMA,EACNC,QAASK,EACTQ,cAAe,CACb,kBAAmB,gBACnBxL,SAAA,EAEFC,EAAAA,EAAAA,KAACwL,GAAAA,EAAQ,CACP3L,GAAIgE,EAAAA,GAAAA,GACJ4H,SAAwB,UAAdlM,EACVkH,QAAS,WACPsE,EAAY,QACd,EAAEhL,SACH,WAGDC,EAAAA,EAAAA,KAACwL,GAAAA,EAAQ,CACP3L,GAAIgE,EAAAA,GAAAA,GACJ4H,SAAwB,SAAdlM,EACVkH,QAAS,WACPsE,EAAY,OACd,EAAEhL,SACH,UAGDC,EAAAA,EAAAA,KAACwL,GAAAA,EAAQ,CACP3L,GAAIgE,EAAAA,GAAAA,GACJ4H,SAAwB,WAAdlM,EACVkH,QAAS,WACPsE,EAAY,SACd,EAAEhL,SACH,gBAMT,E,ujICnEM2L,GAAajL,EAAAA,KAAaC,MAAM,CACpCiC,KAAMlC,EAAAA,KACHI,IAAI,EAAG,sCACP8K,IAAI,GAAI,sCACX7D,MAAOrH,EAAAA,KAAaqH,MAAM,iBAC1B8D,SAAUnL,EAAAA,KACPoL,OACAhL,IAAI,EAAG,0CACP8K,IAAI,GAAI,4CAEP3K,GAAgB,CACpB2B,KAAM,GACNmF,MAAO,GACP8D,SAAU,IAECE,GAAc,SAAH7K,GAA0B,IAApBC,EAAYD,EAAZC,aACtBK,GAAWC,EAAAA,EAAAA,MACXuK,GAAOvM,EAAAA,EAAAA,IAAYwM,EAAAA,IACjBhB,GAAUxL,EAAAA,EAAAA,IAAYwM,EAAAA,IAAtBhB,MACRvG,GAAgCC,EAAAA,EAAAA,UAAS,YAAWC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CmH,EAAQjH,EAAA,GAAEsH,EAAWtH,EAAA,GAC5BQ,GAAwCT,EAAAA,EAAAA,UAASqH,EAAKG,WAAU9G,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAzDgH,EAAY/G,EAAA,GAAEgH,EAAehH,EAAA,GACpCiH,GAAkC3H,EAAAA,EAAAA,UAAS,IAAG4H,GAAA1H,EAAAA,EAAAA,GAAAyH,EAAA,GAAvCH,EAASI,EAAA,GAAEC,EAAYD,EAAA,GAiB1BE,EAASN,EACb,IAAKM,EACH,OAAQxB,GACN,IAAK,QACHwB,EAASC,GACT,MACF,IAAK,OACHD,EAASE,GACT,MACF,QACEF,EAASG,GAmBf,OACEhN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI6B,EAAAA,GAAAA,GAA0B3B,SAAA,EACjCC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACmC,QAAS,KAAMC,GAAI,OAAOzC,SAAC,kBAGvCC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAM,CACLX,cAAeA,GACfR,iBAAkBkL,GAClB9J,SApDe,SAACC,EAAMC,GAAqB,IAAjBE,EAASF,EAATE,UACtBW,EAA0Bd,EAA1Bc,KAAMmF,EAAoBjG,EAApBiG,MAAO8D,EAAa/J,EAAb+J,SACfgB,EAAW,IAAIC,SACjBX,GACFU,EAASE,OAAO,YAAaZ,GAE/BU,EAASE,OAAO,OAAQnK,GACxBiK,EAASE,OAAO,QAAShF,GACzB8E,EAASE,OAAO,WAAYlB,GAE5BrK,GAASwL,EAAAA,EAAAA,IAAcH,IACvB5K,IACAd,GACF,EAuC6BnB,UAEvBC,EAAAA,EAAAA,KAACsC,EAAAA,GAAI,CAAAvC,UACHJ,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAIqD,EAAAA,GAAAA,GAAkBnD,SAAA,EACzBC,EAAAA,EAAAA,KAACyC,EAAAA,EAAS,CAACiB,QAAQ,YAAY7D,GAAIqD,EAAAA,GAAAA,GAAmBnD,UACpDJ,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI6B,EAAAA,GAAAA,GAA6B3B,SAAA,EACpCC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CACFS,UAAU,MACV0I,IAAKoD,GAAgBK,EACrBxD,IAAI,eACJnJ,GAAImN,EAAAA,GAAAA,EACJrF,UAAU,YAEZ3H,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CACF,aAAW,MACXC,GAAI6B,EAAAA,GAAAA,GACJiG,UAAU,OAAM5H,UAEhBC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAI,OAAQzB,GAAIiB,EAAAA,GAAAA,YAI5Bd,EAAAA,EAAAA,KAACiN,GAAAA,EAAK,CACJ3L,GAAG,YACHF,KAAK,OACLuB,KAAK,YACLuK,OAAO,8BACPpK,SAAU,SAAAqI,IAhDtB,SAA0BA,GACxB,IAAMgC,EAAOhC,EACb,GAAKgC,EAAL,CAGAZ,EAAaY,GACb,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,SAAUC,GACxBnB,EAAgBmB,EAAEC,OAAOC,OAC3B,EACAL,EAAOM,cAAcP,EAPrB,CAQF,CAqCcQ,CAAiBxC,EAAMC,cAAcwC,MAAM,GAC7C,EACA/N,GAAI,CAAEkH,QAAS,WAEjBpH,EAAAA,EAAAA,MAAC8C,EAAAA,EAAS,CAAC5C,GAAI,CAAE2C,GAAI,QAASzC,SAAA,EAC5BC,EAAAA,EAAAA,KAACgD,EAAAA,GAAY,CACXL,KAAK,OACLtC,UAAU,MACV4C,MAAOC,EAAAA,GAAAA,MAETlD,EAAAA,EAAAA,KAACwD,EAAAA,GAAK,CACJqK,aAAa,MACbzM,KAAK,OACLE,GAAG,OACHqB,KAAK,OACLmL,GAAIpL,EAAAA,EACJH,QAAQ,WACRK,YAAamJ,EAAKpJ,KAClB9C,GAAIqD,EAAAA,GAAAA,SAIRvD,EAAAA,EAAAA,MAAC8C,EAAAA,EAAS,CAAC5C,GAAI,CAAE2C,GAAI,QAASzC,SAAA,EAC5BC,EAAAA,EAAAA,KAACgD,EAAAA,GAAY,CACXL,KAAK,QACLtC,UAAU,MACV4C,MAAOC,EAAAA,GAAAA,MAETlD,EAAAA,EAAAA,KAACwD,EAAAA,GAAK,CACJqK,aAAa,MACbzM,KAAK,QACLE,GAAG,QACHqB,KAAK,QACLmL,GAAIpL,EAAAA,EACJH,QAAQ,WACRK,YAAamJ,EAAKjE,MAClBjI,GAAIqD,EAAAA,GAAAA,SAIRvD,EAAAA,EAAAA,MAAC8C,EAAAA,EAAS,CAAC5C,GAAI,CAAE2C,GAAI,QAASzC,SAAA,EAC5BC,EAAAA,EAAAA,KAACgD,EAAAA,GAAY,CACXL,KAAK,WACLtC,UAAU,MACV4C,MAAOC,EAAAA,GAAAA,MAETlD,EAAAA,EAAAA,KAACwD,EAAAA,GAAK,CACJqK,aAAa,MACbzM,KAAMwK,EAAW,WAAa,OAC9BtK,GAAG,WACHqB,KAAK,WACLmL,GAAIpL,EAAAA,EACJH,QAAQ,WACRK,YAAY,sBACZ/C,GAAIqD,EAAAA,GAAAA,MAENlD,EAAAA,EAAAA,KAAC0H,EAAAA,EAAM,CACLtG,KAAK,SACLqF,QA5GkB,WAAH,OAASwF,GAAY,SAAA8B,GAAI,OAAKA,CAAI,GAAE,EA6GnDlO,GAAIgE,EAAAA,GAAAA,GAAmB9D,SAEtB6L,GACC5L,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAAAG,UACFC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAI,MAAOzB,GAAIiB,EAAAA,GAAAA,QAGvBd,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAAAG,UACFC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAACtC,GAAI,UAAWzB,GAAIiB,EAAAA,GAAAA,aAMjCd,EAAAA,EAAAA,KAAC0H,EAAAA,EAAM,CACLxH,MAAM,UACNqC,QAAQ,YACR8F,WAAS,EACTxI,GAAI,CACF8I,OAAQ,GACRC,cAAe,QAEjBxH,KAAK,SAAQrB,SACd,kBAQb,EC1MaiO,GAAc,WACzB,IAAAvJ,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BsJ,GAAmCzO,EAAAA,EAAAA,IAAYwM,EAAAA,IAAvCrJ,EAAIsL,EAAJtL,KAAMuJ,EAAS+B,EAAT/B,UAAWlB,EAAKiD,EAALjD,MAErBwB,EAASN,EACb,IAAKM,EACH,OAAQxB,GACN,IAAK,QACHwB,EAASC,GACT,MACF,IAAK,OACHD,EAASE,GACT,MACF,QACEF,EAASG,GAKf,IAIM3G,EAAmB,WACvBlB,GAAa,EACf,EAEA,OACEnF,EAAAA,EAAAA,MAAAuG,EAAAA,SAAA,CAAAnG,SAAA,EACEJ,EAAAA,EAAAA,MAAC+H,EAAAA,EAAM,CAACnF,QAAQ,OAAO1C,GAAIgE,EAAAA,GAAAA,GAAgB4C,QAVvB,WACtB3B,GAAa,EACf,EAQwE/E,SAAA,CACjE4C,GACD3C,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CACFS,UAAU,MACVR,GAAIgE,EAAAA,GAAAA,GACJkF,IAAKyD,EACLxD,IAAI,oBAGRhJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAK,CAACC,YAAapC,EAAW3D,aAAc8E,EAAiBjG,UAC5DC,EAAAA,EAAAA,KAAC8L,GAAW,CAAC5K,aAAc8E,EAAkB5E,KAAK,eAI1D,ECjDa8M,GAAS,WACpB,OACEvO,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI6B,EAAAA,GAAAA,GAAiB3B,SAAA,EACxBC,EAAAA,EAAAA,KAAC4J,EAAU,KACX5J,EAAAA,EAAAA,KAAC2K,GAAU,KACX3K,EAAAA,EAAAA,KAACgO,GAAW,MAGlB,E,sBCLaG,I,QAAc,WACzB,OACExO,EAAAA,EAAAA,MAAC8B,EAAAA,EAAS,CAAC5B,GAAI6B,EAAAA,GAAAA,GAAiB3B,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,UAAAD,UACEC,EAAAA,EAAAA,KAACkO,GAAM,OAETvO,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFS,UAAU,OACV4C,MAAO,CAAEmL,SAAU,YACnBvO,GAAI6B,EAAAA,GAAAA,GAAe3B,SAAA,EAEnBC,EAAAA,EAAAA,KAAC0J,EAAO,CAACC,WAAYjI,EAAAA,GAAAA,MACrB1B,EAAAA,EAAAA,KAACqO,GAAAA,GAAc,CACbD,SAAS,aACTpD,MAAM,UACNsD,UAAW,OAEbtO,EAAAA,EAAAA,KAACuO,EAAAA,SAAQ,CAACC,UAAUxO,EAAAA,EAAAA,KAACyO,GAAAA,EAAM,IAAI1O,UAC7BC,EAAAA,EAAAA,KAAC0O,EAAAA,GAAM,WAKjB,GCnBA,GATkB,WAChB,IAAMnN,GAAWC,EAAAA,EAAAA,MAKjB,OAJAmE,EAAAA,EAAAA,YAAU,WACRpE,GAASoN,EAAAA,EAAAA,MACX,GAAG,CAACpN,KAEGvB,EAAAA,EAAAA,KAACmO,GAAW,GACrB,C","sources":["components/Logo/Logo.jsx","helpers/getBgPreviews.js","components/BoardForm/BoardForm.jsx","store/nav/selectors.js","components/BoardsNavList/BoardNavList.jsx","components/BoardNav/BoardNav.jsx","components/HelpBanner/NeedHelpForm.jsx","components/HelpBanner/HelpBanner.jsx","components/LogOut/LogOut.jsx","components/SideBar/SideBar.jsx","components/BurgerMenu/BurgerMenu.jsx","components/ThemePanel/ThemePanel.jsx","components/EditProfile/EditProfile.jsx","components/UserProfile/UserProfile.jsx","components/TopBar/TopBar.jsx","components/TasksLayout/TasksLayout.jsx","pages/TasksPage.jsx"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { selectTheme } from 'store/auth/selectors';\n\nimport { TiFlash } from 'react-icons/ti';\nimport { Box, Typography } from '@mui/material';\nimport { logo } from 'styles';\n\nexport const Logo = () => {\n  const userTheme = useSelector(selectTheme);\n\n  let logoColor = '#5255BC';\n  if (userTheme === 'light' || userTheme === 'dark') logoColor = '#FFF';\n\n  return (\n    <Box sx={logo.container}>\n      <Box sx={logo.iconWrapper}>\n        <Box sx={logo.iconSize}>\n          <TiFlash color={logoColor} size={'100%'} />\n        </Box>\n      </Box>\n      <Typography component=\"h1\" sx={logo.text}>\n        Task Pro\n      </Typography>\n    </Box>\n  );\n};\n","import bg1 from 'images/bgPreviews/bg1.png';\nimport bg2 from 'images/bgPreviews/bg2.png';\nimport bg3 from 'images/bgPreviews/bg3.png';\nimport bg4 from 'images/bgPreviews/bg4.png';\nimport bg5 from 'images/bgPreviews/bg5.png';\nimport bg6 from 'images/bgPreviews/bg6.png';\nimport bg7 from 'images/bgPreviews/bg7.png';\nimport bg8 from 'images/bgPreviews/bg8.png';\nimport bg9 from 'images/bgPreviews/bg9.png';\nimport bg10 from 'images/bgPreviews/bg10.png';\nimport bg11 from 'images/bgPreviews/bg11.png';\nimport bg12 from 'images/bgPreviews/bg12.png';\nimport bg13 from 'images/bgPreviews/bg13.png';\nimport bg14 from 'images/bgPreviews/bg14.png';\nimport bg15 from 'images/bgPreviews/bg15.png';\nimport bg16 from 'images/bgPreviews/bg16.png';\n\nexport const previews = [\n  bg1,\n  bg2,\n  bg3,\n  bg4,\n  bg5,\n  bg6,\n  bg7,\n  bg8,\n  bg9,\n  bg10,\n  bg11,\n  bg12,\n  bg13,\n  bg14,\n  bg15,\n  bg16,\n];\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Form, Formik, Field, ErrorMessage } from 'formik';\nimport {\n  Box,\n  Container,\n  FormControl,\n  FormLabel,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { Icon } from 'components/Icons';\nimport { button, container, form, input, text } from 'styles';\nimport { previews } from 'helpers/getBgPreviews';\nimport SubmitButton from 'components/FormsUI/SubmitButton';\nimport { iconLabel } from 'styles/icon';\n\nconst iconNames = [\n  'project',\n  'star',\n  'loading',\n  'puzzle-piece',\n  'container',\n  'lightning',\n  'colors',\n  'hexagon',\n];\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string()\n    .required('Is Required')\n    .min(3, 'The title must contain at least 3 characters'),\n\n  icon: Yup.string().required('Is Required'),\n\n  background: Yup.string(),\n});\n\nconst initialValues = {\n  title: '',\n  icon: iconNames[0],\n  background: '0',\n};\n\nconst BoardForm = ({\n  onCloseModal,\n  initData,\n  title,\n  type,\n  boardOperation,\n  id,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { setSubmitting, resetForm }) => {\n    const submitvalues = !id ? values : { ...values, id };\n    dispatch(boardOperation(submitvalues));\n\n    setSubmitting(false);\n    resetForm();\n    onCloseModal();\n  };\n\n  return (\n    <Container sx={container.cardForm}>\n      <Formik\n        initialValues={initData ? initData : initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n        validationOnBlur={true}\n      >\n        {({ handleChange, values }) => (\n          <Form>\n            <Typography variant=\"h2\" mb={'24px'}>\n              {title}\n            </Typography>\n            <FormLabel>\n              <TextField\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Title\"\n                value={values.title}\n                onChange={handleChange}\n                sx={input.boardForm}\n              />\n              <ErrorMessage\n                name=\"title\"\n                component=\"div\"\n                style={form.errorMessage}\n              />\n            </FormLabel>\n            <FormControl>\n              <FormLabel sx={form.label}>\n                <Typography variant=\"h3\" sx={text.label}>\n                  Icons\n                </Typography>\n                <Box role=\"group\" sx={container.iconBox}>\n                  {iconNames.map((icon, index) => (\n                    <Box key={index} sx={container.boardIcon}>\n                      <Field\n                        type=\"radio\"\n                        id={index}\n                        name=\"icon\"\n                        value={icon}\n                        checked={values.icon === icon}\n                      />\n                      <FormLabel htmlFor={index} sx={iconLabel}>\n                        <Icon id={icon} sx={button.boardEdit}></Icon>\n                      </FormLabel>\n                    </Box>\n                  ))}\n                </Box>\n                <ErrorMessage name=\"icon\" component=\"div\" />\n              </FormLabel>\n\n              <FormLabel sx={form.label} style={{ marginBottom: '40px' }}>\n                <Typography variant=\"h3\" sx={text.label}>\n                  Background\n                </Typography>\n                <Box sx={container.imageWrap}>\n                  {previews.map((preview, index) => (\n                    <Box key={index} sx={container.boardBg}>\n                      <Field\n                        type=\"radio\"\n                        id={`back${index}`}\n                        name=\"background\"\n                        value={index}\n                        checked={Number(values.background) === index}\n                      />\n                      <FormLabel\n                        htmlFor={`back${index}`}\n                        sx={form.bgLabel}\n                        style={{ backgroundImage: `url(${preview})` }}\n                      />\n                    </Box>\n                  ))}\n                </Box>\n                <ErrorMessage name=\"background\" component=\"div\" />\n              </FormLabel>\n            </FormControl>\n            <SubmitButton>{type}</SubmitButton>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nBoardForm.propTypes = {\n  onCloseModal: PropTypes.func.isRequired,\n  initData: PropTypes.object,\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  boardOperation: PropTypes.func.isRequired,\n  id: PropTypes.string,\n};\n\nexport default BoardForm;\n","export const selectNavIndex = state => state.nav.navIndex;","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink, useParams, useNavigate } from 'react-router-dom';\nimport Modal from 'components/Modal/Modal';\nimport BoardForm from 'components/BoardForm/BoardForm';\nimport { Icon } from 'components/Icons';\nimport DeleteConfirmModal from 'components/DeleteConfirmModal/DeleteConfirmModal';\n\nimport {\n  getBoardById,\n  updateBoard,\n  deleteBoard,\n} from 'store/boards/operations';\n\nimport {\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n  Box,\n} from '@mui/material';\nimport { container, button, icon } from 'styles';\n\nimport { selectBoard, selectBoards } from 'store/boards/selectors';\nimport { selectNavIndex } from 'store/nav/selectors';\nimport { setNavIndex } from 'store/nav/navSlice';\n\nexport const BoardNavList = () => {\n  const [showModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n  const { boardId } = useParams();\n  const board = useSelector(selectBoard);\n  const [ShowDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);\n  const navigate = useNavigate();\n  const boards = useSelector(selectBoards);\n  const navIndex = useSelector(selectNavIndex);\n\n  useEffect(() => {\n    if (!boards.length) {\n      navigate('/home');\n    } else {\n      navigate(boards[navIndex]._id);\n    }\n  }, [boards, navIndex, navigate]);\n\n  useEffect(() => {\n    if (boardId) dispatch(getBoardById(boardId));\n  }, [dispatch, boardId]);\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setShowDeleteConfirmModal(false);\n  };\n\n  const handleDeleteBoard = () => {\n    dispatch(deleteBoard(board._id));\n    setShowDeleteConfirmModal(false);\n    dispatch(setNavIndex(0));\n  };\n\n  const openDeleteConfirmModal = () => {\n    setShowDeleteConfirmModal(true);\n  };\n\n  return (\n    <>\n      <List sx={container.boardListGroup}>\n        {boards?.map((board, index) => {\n          return (\n            <ListItem key={board._id} disablePadding>\n              <ListItemButton\n                component={NavLink}\n                to={board._id}\n                sx={button.boardListItem}\n                onClick={() => {\n                  dispatch(setNavIndex(index));\n                }}\n              >\n                <Icon id={board.icon} sx={icon.board} />\n                <ListItemText primary={board.title} disableTypography />\n                {board._id === boardId && (\n                  <>\n                    <Box\n                      onClick={handleOpenModal}\n                      color=\"inherit\"\n                      size=\"small\"\n                      sx={{ mr: '8px', display: 'flex' }}\n                    >\n                      <Icon id={'pencil'} sx={icon.boardItem} />\n                    </Box>\n                    <Box\n                      onClick={openDeleteConfirmModal}\n                      size=\"small\"\n                      color=\"inherit\"\n                      sx={{ mr: '20px', display: 'flex' }}\n                    >\n                      <Icon id={'trash'} sx={icon.boardItem} />\n                    </Box>\n                  </>\n                )}\n              </ListItemButton>\n            </ListItem>\n          );\n        })}\n      </List>\n\n      <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n        <BoardForm\n          onCloseModal={handleCloseModal}\n          title=\"Edit board\"\n          type=\"Edit\"\n          boardOperation={updateBoard}\n          id={board._id}\n          initData={{\n            title: board.title,\n            icon: board.icon,\n            background: board.background,\n          }}\n        />\n      </Modal>\n\n      <DeleteConfirmModal\n        isOpenModal={ShowDeleteConfirmModal}\n        onCloseModal={handleCloseModal}\n        onConfirm={handleDeleteBoard}\n        message=\"Are you sure you want to delete this board?\"\n        title=\"All your columns and tasks in this board will be deleted too.\"\n      />\n    </>\n  );\n};\n","import { useState } from 'react';\n\nimport Modal from 'components/Modal/Modal';\nimport BoardForm from 'components/BoardForm/BoardForm';\nimport { BoardNavList } from 'components/BoardsNavList';\nimport { Icon } from 'components/Icons';\nimport { addBoard } from 'store/boards/operations';\n\nimport { Stack, Box, Typography, Button } from '@mui/material';\nimport { container, text, button, icon } from 'styles';\n\nexport const BoardNav = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <Stack sx={container.boardNav}>\n      <Typography component=\"h2\" variant=\"h4\" sx={text.boardNavTitle}>\n        My boards\n      </Typography>\n\n      <Box sx={button.createBoardWrapper}>\n        <Button\n          onClick={handleOpenModal}\n          variant=\"text\"\n          sx={button.createBoard}\n        >\n          Create a<br />\n          new board\n          <Box className=\"createBoardBox\" sx={button.createBoardBox}>\n            <Icon id={'plus'} sx={icon.createNewBoard} />\n          </Box>\n        </Button>\n      </Box>\n      <Box sx={container.boardNavList}>\n        <BoardNavList />\n      </Box>\n\n      <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n        <BoardForm\n          onCloseModal={handleCloseModal}\n          title=\"New board\"\n          type=\"Create\"\n          boardOperation={addBoard}\n        />\n      </Modal>\n    </Stack>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { needHelp } from 'store/boards/operations';\nimport { Formik, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { Typography, TextField, Button, FormControl, Box } from '@mui/material';\nimport { container } from 'styles';\n\nconst helpSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      {\n        message: 'Invalid Email',\n        excludeEmptyString: true,\n      }\n    )\n    .required('Please, enter your email'),\n  text: Yup.string().required('Please, enter your comment'),\n});\n\nexport const NeedHelpForm = ({ onCloseModal }) => {\n  const dispatch = useDispatch();\n\n  function handleSubmit(values, { resetForm }) {\n    const { email, text } = values;\n    dispatch(needHelp({ email, text }));\n    resetForm();\n    onCloseModal();\n  }\n\n  return (\n    <Box sx={container.helpFormContainer}>\n      <Typography variant=\"h2\" mb={3}>\n        Need help\n      </Typography>\n      <Formik\n        initialValues={{ email: '', text: '' }}\n        validationSchema={helpSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ values, handleChange, handleSubmit, isSubmitting }) => (\n          <form onSubmit={handleSubmit}>\n            <FormControl fullWidth>\n              <TextField\n                name=\"email\"\n                label=\"Email address\"\n                variant=\"outlined\"\n                sx={{ mb: 1.75 }}\n                value={values.email}\n                onChange={handleChange}\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                style={{\n                  color: 'red',\n                  fontSize: 12,\n                  marginTop: -10,\n                  marginBottom: 4,\n                }}\n              />\n              <TextField\n                name=\"text\"\n                label=\"Comment\"\n                variant=\"outlined\"\n                multiline\n                rows={6}\n                sx={{ mb: 3 }}\n                value={values.text}\n                onChange={handleChange}\n              />\n              <ErrorMessage\n                name=\"text\"\n                component=\"div\"\n                style={{\n                  color: 'red',\n                  fontSize: 12,\n                  marginTop: -20,\n                  marginBottom: 4,\n                }}\n              />\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                fullWidth\n                sx={{\n                  height: 49,\n                  textTransform: 'none',\n                }}\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                Send\n              </Button>\n            </FormControl>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n","import React, { useState } from 'react';\nimport Modal from 'components/Modal/Modal';\nimport TaskProImg from '../../images/taskPro-img.png';\nimport { NeedHelpForm } from './NeedHelpForm';\nimport { Box, Typography, Button, SvgIcon } from '@mui/material';\nimport { text, container, button } from 'styles';\nimport sprite from 'components/Icons/sprite.svg';\n\nexport const HelpBanner = () => {\n  const [showModal, setShowModal] = useState(false);\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  \n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  return (\n    <Box sx={container.helpBannerContainer}>\n      <Box\n        component=\"img\"\n        src={TaskProImg}\n        alt=\"TaskProHelperImg\"\n        sx={{\n          width: 54,\n          height: 78,\n          marginTop: '14px', \n          marginLeft: '14px', \n          marginBottom: '14px'}}\n      />\n      <Typography component=\"p\" variant='body3' sx={text.helpBannerText}>\n        If you need help with&nbsp;<br/>\n        <Typography component=\"span\" variant='body3' sx={text.accent}>TaskPro</Typography>, check out our\n        support resources or reach out to our customer support team.\n      </Typography>\n      <Button variant=\"text\" sx={button.helpBannerBtn} onClick={handleOpenModal}>\n        <SvgIcon sx={text.helpBannerIcon}>\n              <svg width=\"20px\" height=\"20px\" stroke=\"currentColor\" fill=\"none\">\n                <use href={sprite + '#icon-help-circle'} />\n              </svg>\n        </SvgIcon>\n        <Typography component=\"span\" variant='h7' sx={text.helpBannerButton}>Need help?</Typography>\n      </Button>\n      {showModal && (\n        <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n          <NeedHelpForm \n            onCloseModal={handleCloseModal}\n            title=\"Need help\"\n            type=\"submit\"   \n          />\n        </Modal>  \n      )}\n    </Box>\n  );\n};\n","import { logout } from 'store/auth/operations';\nimport { useDispatch } from 'react-redux';\n\nimport { Icon } from 'components/Icons';\nimport { Button } from '@mui/material';\nimport { button, icon } from 'styles';\n\nexport const LogOut = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Button\n      onClick={() => dispatch(logout())}\n      variant=\"text\"\n      sx={button.logOut}\n    >\n      <Icon id={'login'} sx={icon.LogOut} />\n      Log out\n    </Button>\n  );\n};\n","import { Logo } from 'components/Logo';\nimport { BoardNav } from 'components/BoardNav';\nimport { HelpBanner } from 'components/HelpBanner';\nimport { LogOut } from 'components/LogOut';\n\nimport { Box, Stack } from '@mui/material';\nimport { container } from 'styles';\n\nexport const SideBar = ({ contStyles }) => {\n  return (\n    <Box sx={contStyles}>\n      <Stack sx={container.sideBarTop}>\n        <Logo />\n        <BoardNav />\n      </Stack>\n      <Box>\n        <HelpBanner />\n        <LogOut />\n      </Box>\n    </Box>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { SideBar } from 'components/SideBar';\nimport { Icon } from 'components/Icons';\n\nimport { Box, Button, Drawer } from '@mui/material';\nimport { button, container, icon } from 'styles';\n\nexport const BurgerMenu = () => {\n  const [menuVisible, setMenuVisible] = useState(false);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  const toggleMenu = () => {\n    setMenuVisible(!menuVisible);\n  };\n\n  const handleWindowResize = () => {\n    setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (windowWidth >= 1440) {\n      setMenuVisible(false);\n    }\n  }, [windowWidth]);\n\n  return (\n    windowWidth <= 1440 && (\n      <Box sx={{ mr: 'auto' }}>\n        <Button onClick={toggleMenu} sx={button.burgerMenu}>\n          <Icon id={'burger-menu'} sx={icon.burgerMenu} />\n        </Button>\n        <Drawer anchor=\"left\" open={menuVisible} onClose={toggleMenu}>\n          <SideBar contStyles={container.sideBar} />\n        </Drawer>\n      </Box>\n    )\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectTheme } from 'store/auth/selectors';\nimport { updateTheme } from 'store/auth/operations';\nimport { Icon } from 'components/Icons';\n\nimport { Box, Button, Menu, MenuItem, SvgIcon } from '@mui/material';\nimport { button, icon } from 'styles';\n\nexport const ThemePanel = () => {\n  const dispatch = useDispatch();\n  const userTheme = useSelector(selectTheme);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const handleOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClick = theme => {\n    if (theme === 'light' || theme === 'dark' || theme === 'violet') {\n      dispatch(updateTheme(theme));\n    }\n    setAnchorEl(null);\n  };\n\n  return (\n    <Box>\n      <Button\n        variant=\"text\"\n        sx={button.theme}\n        id=\"theme-button\"\n        aria-controls={open ? 'theme-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleOpen}\n      >\n        Theme\n        <SvgIcon\n          sx={{\n            width: '16px',\n            height: '16px',\n            ml: '4px',\n            color: 'text.primary',\n          }}\n        >\n          <Icon id={'chevron-down'} sx={icon.themeFilter} />\n        </SvgIcon>\n      </Button>\n      <Menu\n        sx={button.themeMenu}\n        id=\"theme-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClick}\n        MenuListProps={{\n          'aria-labelledby': 'theme-button',\n        }}\n      >\n        <MenuItem\n          sx={button.themeItem}\n          selected={userTheme === 'light'}\n          onClick={() => {\n            handleClick('light');\n          }}\n        >\n          Light\n        </MenuItem>\n        <MenuItem\n          sx={button.themeItem}\n          selected={userTheme === 'dark'}\n          onClick={() => {\n            handleClick('dark');\n          }}\n        >\n          Dark\n        </MenuItem>\n        <MenuItem\n          sx={button.themeItem}\n          selected={userTheme === 'violet'}\n          onClick={() => {\n            handleClick('violet');\n          }}\n        >\n          Violet\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Formik, Form, ErrorMessage, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectUser } from 'store/auth/selectors';\nimport { updateProfile } from 'store/auth/operations';\nimport { Icon } from 'components/Icons';\nimport defaultAvatarViolet from '../../images/default-avatar-violet.png';\nimport defaultAvatarLight from '../../images/default-avatar-light.png';\nimport defaultAvatarDark from '../../images/default-avatar-dark.png';\n\nimport { icon, form, container, button, image } from 'styles';\nimport {\n  Box,\n  FormLabel,\n  Typography,\n  Input,\n  TextField,\n  Button,\n} from '@mui/material';\n\nconst UserSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Name must be at least 2 characters')\n    .max(32, 'Name must be at most 32 characters'),\n  email: Yup.string().email('Invalid email'),\n  password: Yup.string()\n    .trim()\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Password must be at most 64 characters'),\n});\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\nexport const EditProfile = ({ onCloseModal }) => {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n  const { theme } = useSelector(selectUser);\n  const [password, setPassword] = useState('password');\n  const [currentImage, setCurrentImage] = useState(user.avatarURL);\n  const [avatarURL, setAvatarURL] = useState('');\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, email, password } = values;\n    const formData = new FormData();\n    if (avatarURL) {\n      formData.append('avatarURL', avatarURL);\n    }\n    formData.append('name', name);\n    formData.append('email', email);\n    formData.append('password', password);\n\n    dispatch(updateProfile(formData));\n    resetForm();\n    onCloseModal();\n  };\n\n  let avatar = avatarURL;\n  if (!avatar) {\n    switch (theme) {\n      case 'light':\n        avatar = defaultAvatarLight;\n        break;\n      case 'dark':\n        avatar = defaultAvatarDark;\n        break;\n      default:\n        avatar = defaultAvatarViolet;\n        break;\n    }\n  }\n\n  const handleClickShowPassword = () => setPassword(show => !show);\n  function handleFileChange(event) {\n    const file = event;\n    if (!file) {\n      return;\n    }\n    setAvatarURL(file);\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      setCurrentImage(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  }\n  return (\n    <Box sx={container.editUserWrapper}>\n      <Typography variant={'h2'} mb={'24px'}>\n        Edit profile\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={UserSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <Box sx={form.editUserForm}>\n            <FormLabel htmlFor=\"avatarURL\" sx={form.editUserLabel}>\n              <Box sx={container.editUserImgWrapper}>\n                <Box\n                  component=\"img\"\n                  src={currentImage || avatar}\n                  alt=\"User picture\"\n                  sx={image.changeAvatar}\n                  className=\"avatar\"\n                />\n                <Box\n                  aria-label=\"add\"\n                  sx={container.editUserPlusWrapper}\n                  className=\"plus\"\n                >\n                  <Icon id={'plus'} sx={icon.addProfileImg} />\n                </Box>\n              </Box>\n            </FormLabel>\n            <Input\n              id=\"avatarURL\"\n              type=\"file\"\n              name=\"avatarURL\"\n              accept=\"image/*,.png,.jpg,.gif,.web\"\n              onChange={event => {\n                handleFileChange(event.currentTarget.files[0]);\n              }}\n              sx={{ display: 'none' }}\n            />\n            <FormLabel sx={{ mb: '14px' }}>\n              <ErrorMessage\n                name=\"name\"\n                component=\"div\"\n                style={form.errorMessageEditUser}\n              />\n              <Field\n                autoComplete=\"off\"\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                as={TextField}\n                variant=\"outlined\"\n                placeholder={user.name}\n                sx={form.editUserFielld}\n              />\n            </FormLabel>\n\n            <FormLabel sx={{ mb: '14px' }}>\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                style={form.errorMessageEditUser}\n              />\n              <Field\n                autoComplete=\"off\"\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                as={TextField}\n                variant=\"outlined\"\n                placeholder={user.email}\n                sx={form.editUserFielld}\n              />\n            </FormLabel>\n\n            <FormLabel sx={{ mb: '24px' }}>\n              <ErrorMessage\n                name=\"password\"\n                component=\"div\"\n                style={form.errorMessageEditUser}\n              />\n              <Field\n                autoComplete=\"off\"\n                type={password ? 'password' : 'text'}\n                id=\"password\"\n                name=\"password\"\n                as={TextField}\n                variant=\"outlined\"\n                placeholder=\"Enter your password\"\n                sx={form.editUserFielld}\n              />\n              <Button\n                type=\"button\"\n                onClick={handleClickShowPassword}\n                sx={button.editUserEye}\n              >\n                {password ? (\n                  <Box>\n                    <Icon id={'eye'} sx={icon.eye} />\n                  </Box>\n                ) : (\n                  <Box>\n                    <Icon id={'eye-off'} sx={icon.eye} />\n                  </Box>\n                )}\n              </Button>\n            </FormLabel>\n\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              fullWidth\n              sx={{\n                height: 49,\n                textTransform: 'none',\n              }}\n              type=\"submit\"\n            >\n              Send\n            </Button>\n          </Box>\n        </Form>\n      </Formik>\n    </Box>\n  );\n};\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from 'store/auth/selectors';\n\nimport Modal from 'components/Modal/Modal';\nimport defaultAvatarViolet from '../../images/default-avatar-violet.png';\nimport defaultAvatarLight from '../../images/default-avatar-light.png';\nimport defaultAvatarDark from '../../images/default-avatar-dark.png';\nimport { EditProfile } from '../EditProfile';\n\nimport { Button, Box } from '@mui/material';\nimport { button } from 'styles';\n\nexport const UserProfile = () => {\n  const [showModal, setShowModal] = useState(false);\n  const { name, avatarURL, theme } = useSelector(selectUser);\n\n  let avatar = avatarURL;\n  if (!avatar) {\n    switch (theme) {\n      case 'light':\n        avatar = defaultAvatarLight;\n        break;\n      case 'dark':\n        avatar = defaultAvatarDark;\n        break;\n      default:\n        avatar = defaultAvatarViolet;\n        break;\n    }\n  }\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <Button variant=\"text\" sx={button.profile} onClick={handleOpenModal}>\n        {name}\n        <Box\n          component=\"img\"\n          sx={button.profileImg}\n          src={avatar}\n          alt=\"User avatar\"\n        />\n      </Button>\n      <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n        <EditProfile onCloseModal={handleCloseModal} type=\"Submit\" />\n      </Modal>\n    </>\n  );\n};\n","import { BurgerMenu } from 'components/BurgerMenu';\nimport { ThemePanel } from 'components/ThemePanel';\nimport { UserProfile } from 'components/UserProfile';\n\nimport { Box } from '@mui/material';\nimport { container } from 'styles';\n\nexport const TopBar = () => {\n  return (\n    <Box sx={container.topBar}>\n      <BurgerMenu />\n      <ThemePanel />\n      <UserProfile />\n    </Box>\n  );\n};\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { TopBar } from 'components/TopBar';\nimport { SideBar } from 'components/SideBar';\nimport { Container, Box } from '@mui/material';\nimport { container } from 'styles';\nimport { Loader } from 'components/Loader/Loader';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const TasksLayout = () => {\n  return (\n    <Container sx={container.layout}>\n      <header>\n        <TopBar />\n      </header>\n      <Box\n        component=\"main\"\n        style={{ position: 'relative' }}\n        sx={container.main}\n      >\n        <SideBar contStyles={container.sideBarDesktop} />\n        <ToastContainer\n          position=\"top-center\"\n          theme=\"colored\"\n          autoClose={3000}\n        />\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </Box>\n    </Container>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TasksLayout } from 'components/TasksLayout';\nimport { getAllBoards } from 'store/boards/operations';\n\nconst TasksPage = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n  \n  return <TasksLayout />;\n};\n\nexport default TasksPage;\n"],"names":["Logo","userTheme","useSelector","selectTheme","logoColor","_jsxs","Box","sx","logo","children","_jsx","TiFlash","color","size","Typography","component","previews","iconNames","validationSchema","Yup","shape","title","required","min","icon","background","initialValues","_ref","onCloseModal","initData","type","boardOperation","id","dispatch","useDispatch","Container","container","Formik","onSubmit","values","_ref2","setSubmitting","resetForm","submitvalues","_objectSpread","validationOnBlur","_ref3","handleChange","Form","variant","mb","FormLabel","TextField","name","placeholder","value","onChange","input","ErrorMessage","style","form","FormControl","text","role","map","index","Field","checked","htmlFor","iconLabel","Icon","button","marginBottom","preview","concat","Number","backgroundImage","SubmitButton","selectNavIndex","state","nav","navIndex","BoardNavList","_useState","useState","_useState2","_slicedToArray","showModal","setShowModal","boardId","useParams","board","selectBoard","_useState3","_useState4","ShowDeleteConfirmModal","setShowDeleteConfirmModal","navigate","useNavigate","boards","selectBoards","useEffect","length","_id","getBoardById","handleOpenModal","handleCloseModal","openDeleteConfirmModal","_Fragment","List","ListItem","disablePadding","ListItemButton","NavLink","to","onClick","setNavIndex","ListItemText","primary","disableTypography","mr","display","Modal","isOpenModal","BoardForm","updateBoard","DeleteConfirmModal","onConfirm","deleteBoard","message","BoardNav","Stack","Button","className","addBoard","helpSchema","email","matches","excludeEmptyString","NeedHelpForm","needHelp","handleSubmit","isSubmitting","fullWidth","label","fontSize","marginTop","multiline","rows","height","textTransform","disabled","HelpBanner","src","alt","width","marginLeft","SvgIcon","stroke","fill","href","sprite","LogOut","logout","SideBar","contStyles","BurgerMenu","menuVisible","setMenuVisible","window","innerWidth","windowWidth","setWindowWidth","toggleMenu","handleWindowResize","addEventListener","removeEventListener","Drawer","anchor","open","onClose","ThemePanel","anchorEl","setAnchorEl","Boolean","handleClick","theme","updateTheme","undefined","event","currentTarget","ml","Menu","MenuListProps","MenuItem","selected","UserSchema","max","password","trim","EditProfile","user","selectUser","setPassword","avatarURL","currentImage","setCurrentImage","_useState5","_useState6","setAvatarURL","avatar","defaultAvatarLight","defaultAvatarDark","defaultAvatarViolet","formData","FormData","append","updateProfile","image","Input","accept","file","reader","FileReader","onload","e","target","result","readAsDataURL","handleFileChange","files","autoComplete","as","show","UserProfile","_useSelector","TopBar","TasksLayout","position","ToastContainer","autoClose","Suspense","fallback","Loader","Outlet","getAllBoards"],"sourceRoot":""}
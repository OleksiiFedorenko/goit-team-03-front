{"version":3,"file":"static/js/871.0c44514b.chunk.js","mappings":"kWAUMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAAaE,QAAQC,QAAQ,oBAAqB,+BAA+BC,WACxFC,SAAUL,EAAAA,KAAaI,aAGZE,EAAgB,WAC3B,OAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MAaXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cANoB,CACpBZ,MAAO,GACPG,SAAU,IAKVN,iBAAAA,EACAgB,SAde,SAACC,EAAD,GAA8B,IAApBC,EAAmB,EAAnBA,cACzBC,QAAQC,IAAIC,KAAKC,UAAUL,EAAQ,KAAM,IACzCN,GAASY,EAAAA,EAAAA,IAASN,IAClBC,GAAc,EACf,IAaD,OACE,UAACM,EAAA,EAAD,CACER,SAAUH,EAAOY,aACjBC,GAAIC,EAAAA,GAAAA,GACJC,UAAU,OAHZ,UAMGf,EAAOgB,QAAQ1B,OAASU,EAAOiB,OAAO3B,OACrC,SAAC4B,EAAA,EAAD,CAAKH,UAAU,MAAMF,GAAIC,EAAAA,GAAAA,GAAzB,SAAsCd,EAAOiB,OAAO3B,MAAM6B,iBACxD,MAEJ,SAACC,EAAA,EAAD,CACEC,KAAK,QACLC,QAAQ,WACRC,YAAY,mBACZC,MAAOxB,EAAOI,OAAOd,MACrBmC,SAAUzB,EAAO0B,aACjBC,OAAQ3B,EAAO4B,WACfC,MAAO7B,EAAOgB,QAAQ1B,OAASwC,QAAQ9B,EAAOiB,OAAO3B,OACrDyC,WAAS,EACTC,MAAM,QACNC,WAAY,CACVC,MAAO,CAAEF,MAAO,SAElBnB,GAAIC,EAAAA,GAAAA,KAGLd,EAAOgB,QAAQvB,UAAYO,EAAOiB,OAAOxB,UACxC,SAACyB,EAAA,EAAD,CAAKH,UAAU,MAAMF,GAAIC,EAAAA,GAAAA,GAAzB,SAAsCd,EAAOiB,OAAOxB,WAClD,MAEJ,SAAC0C,EAAA,EAAD,CACEd,KAAK,WACLe,KAAMxC,EAAe,OAAS,WAC9B2B,YAAY,oBACZC,MAAOxB,EAAOI,OAAOX,SACrBgC,SAAUzB,EAAO0B,aACjBG,MAAO7B,EAAOgB,QAAQvB,UAAYqC,QAAQ9B,EAAOiB,OAAOxB,UACxDkC,OAAQ3B,EAAO4B,WACfG,WAAS,EACTC,MAAM,QACNnB,GAAIC,EAAAA,GAAAA,GACJuB,cACE,SAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACE,SAACC,EAAA,EAAD,CAAYC,QAhEU,kBAAM5C,GAAgB,SAAC6C,GAAD,OAAWA,CAAX,GAAtB,EAgEwBC,KAAK,MAAM9B,GAAIC,EAAAA,GAAAA,GAA7D,SACGlB,GAAe,SAACgD,EAAA,EAAD,KAA+B,SAACC,EAAA,EAAD,WAMvD,SAACC,EAAA,EAAD,CACEd,MAAM,SACNV,QAAQ,YACRS,WAAS,EACTK,KAAK,SACLvB,GAAIC,EAAAA,GAAAA,GALN,SAMC,iBAMN,EC9FD,EAJkB,WAChB,OAAO,SAACpB,EAAD,GACR,C","sources":["components/AuthFormLogin/AuthFormLogin.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { getLogin } from 'store/auth/operations';\nimport { Button, TextField, OutlinedInput, InputAdornment, IconButton, FormControl, Box } from '@mui/material';\nimport RemoveRedEyeOutlinedIcon from '@mui/icons-material/RemoveRedEyeOutlined';\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';\nimport { useFormik } from 'formik';\nimport { form } from '../../styles'\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().email().matches(/^[^@]+@[^@]+\\..+$/, 'email must be a valid email').required(),\n  password: yup.string().required(),\n});\n\nexport const AuthFormLogin = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => setShowPassword((show) => !show);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, {setSubmitting}) => {\n    console.log(JSON.stringify(values, null, 2));\n    dispatch(getLogin(values))\n    setSubmitting(false);\n  }\n\n  const initialValues = {\n    email: '', \n    password: '', \n  } \n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit,\n  });\n\n  return (\n    <FormControl \n      onSubmit={formik.handleSubmit} \n      sx={form.form} \n      component='form'\n    >\n\n      {formik.touched.email && formik.errors.email ? (\n        <Box component='div' sx={form.error}>{formik.errors.email.toWellFormed()}</Box>\n      ) : null}\n\n      <TextField\n        name=\"email\"\n        variant=\"outlined\"\n        placeholder=\"Enter your email\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        fullWidth\n        color='input'\n        inputProps={{\n          style: { color: '#FFF' },\n        }}\n        sx={form.input}\n      />\n\n      {formik.touched.password && formik.errors.password ? (\n        <Box component='div' sx={form.error}>{formik.errors.password}</Box>\n      ) : null}\n\n      <OutlinedInput\n        name=\"password\"\n        type={showPassword ? \"text\" : \"password\"}\n        placeholder=\"Create a password\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        onBlur={formik.handleBlur}\n        fullWidth\n        color='input'\n        sx={form.input}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton onClick={handleClickShowPassword} edge=\"end\" sx={form.icon}>\n              {showPassword ? <RemoveRedEyeOutlinedIcon /> : <VisibilityOffOutlinedIcon />}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n\n      <Button \n        color=\"button\" \n        variant=\"contained\" \n        fullWidth \n        type=\"submit\" \n        sx={form.button}\n      >\n        Log In Now\n      </Button>\n\n    </FormControl>\n  );\n}","import { AuthFormLogin } from 'components/AuthFormLogin';\n\nconst LoginPage = () => {\n  return <AuthFormLogin />;\n};\n\nexport default LoginPage;\n"],"names":["validationSchema","yup","shape","email","matches","required","password","AuthFormLogin","useState","showPassword","setShowPassword","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","setSubmitting","console","log","JSON","stringify","getLogin","FormControl","handleSubmit","sx","form","component","touched","errors","Box","toWellFormed","TextField","name","variant","placeholder","value","onChange","handleChange","onBlur","handleBlur","error","Boolean","fullWidth","color","inputProps","style","OutlinedInput","type","endAdornment","InputAdornment","position","IconButton","onClick","show","edge","RemoveRedEyeOutlined","VisibilityOffOutlined","Button"],"sourceRoot":""}
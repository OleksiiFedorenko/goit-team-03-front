{"version":3,"file":"static/js/870.49c0098e.chunk.js","mappings":"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","sources":["components/Logo/Logo.jsx","helpers/getBgPreviews.js","components/BoardForm/BoardForm.jsx","components/BoardsNavList/BoardNavList.jsx","components/BoardNav/BoardNav.jsx","components/HelpBanner/NeedHelpForm.jsx","components/HelpBanner/HelpBanner.jsx","components/LogOut/LogOut.jsx","components/SideBar/SideBar.jsx","components/BurgerMenu/BurgerMenu.jsx","components/ThemePanel/ThemePanel.jsx","components/EditProfile/EditProfileTest.js","components/UserProfile/UserProfile.jsx","components/TopBar/TopBar.jsx","components/TasksLayout/TasksLayout.jsx","pages/TasksPage.jsx"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { selectTheme } from 'store/auth/selectors';\n\nimport { TiFlash } from 'react-icons/ti';\nimport { Box, Typography } from '@mui/material';\nimport { logo } from 'styles';\n\nexport const Logo = () => {\n  const userTheme = useSelector(selectTheme);\n\n  let logoColor = '#5255BC';\n  if (userTheme === 'light' || userTheme === 'dark') logoColor = '#FFF';\n\n  return (\n    <Box sx={logo.container}>\n      <Box sx={logo.iconWrapper}>\n        <Box sx={logo.iconSize}>\n          <TiFlash color={logoColor} size={'100%'} />\n        </Box>\n      </Box>\n      <Typography component=\"h1\" sx={logo.text}>\n        Task Pro\n      </Typography>\n    </Box>\n  );\n};\n","import bg1 from 'images/bgPreviews/bg1.png';\nimport bg2 from 'images/bgPreviews/bg2.png';\nimport bg3 from 'images/bgPreviews/bg3.png';\nimport bg4 from 'images/bgPreviews/bg4.png';\nimport bg5 from 'images/bgPreviews/bg5.png';\nimport bg6 from 'images/bgPreviews/bg6.png';\nimport bg7 from 'images/bgPreviews/bg7.png';\nimport bg8 from 'images/bgPreviews/bg8.png';\nimport bg9 from 'images/bgPreviews/bg9.png';\nimport bg10 from 'images/bgPreviews/bg10.png';\nimport bg11 from 'images/bgPreviews/bg11.png';\nimport bg12 from 'images/bgPreviews/bg12.png';\nimport bg13 from 'images/bgPreviews/bg13.png';\nimport bg14 from 'images/bgPreviews/bg14.png';\nimport bg15 from 'images/bgPreviews/bg15.png';\nimport bg16 from 'images/bgPreviews/bg16.png';\n\nexport const previews = [\n  bg1,\n  bg2,\n  bg3,\n  bg4,\n  bg5,\n  bg6,\n  bg7,\n  bg8,\n  bg9,\n  bg10,\n  bg11,\n  bg12,\n  bg13,\n  bg14,\n  bg15,\n  bg16,\n];\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Form, Formik, Field, ErrorMessage } from 'formik';\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { Icon } from 'components/Icons';\nimport { button, container, form, input, text } from 'styles';\nimport { previews } from 'helpers/getBgPreviews';\nimport SubmitButton from 'components/FormsUI/SubmitButton';\nimport { iconLabel } from 'styles/icon';\n\nconst iconNames = [\n  'project',\n  'star',\n  'loading',\n  'puzzle-piece',\n  'container',\n  'lightning',\n  'colors',\n  'hexagon',\n];\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string()\n    .required('Is Required')\n    .min(3, 'The title must contain at least 3 characters'),\n\n  icon: Yup.string().required('Is Required'),\n\n  background: Yup.string(),\n});\n\nconst initialValues = {\n  title: '',\n  icon: iconNames[0],\n  background: '0',\n};\n\nconst BoardForm = ({\n  onCloseModal,\n  initData,\n  title,\n  type,\n  boardOperation,\n  id,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { setSubmitting, resetForm }) => {\n    const submitvalues = !id ? values : { ...values, id };\n    dispatch(boardOperation(submitvalues));\n\n    setSubmitting(false);\n    resetForm();\n    onCloseModal();\n  };\n\n  return (\n    <Box sx={container.addColumnContainer}>\n      <Formik\n        initialValues={initData ? initData : initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n        validationOnBlur={true}\n      >\n        {({ handleChange, values }) => (\n          <Form>\n            <Typography variant=\"h2\" mb={'24px'}>\n              {title}\n            </Typography>\n            <FormLabel>\n              <TextField\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Title\"\n                value={values.title}\n                onChange={handleChange}\n                sx={input.boardForm}\n              />\n              <ErrorMessage\n                name=\"title\"\n                component=\"div\"\n                style={form.errorMessage}\n              />\n            </FormLabel>\n            <FormControl>\n              <FormLabel sx={form.label}>\n                <Typography variant=\"h3\" sx={text.label}>\n                  Icons\n                </Typography>\n                <Box role=\"group\" sx={container.iconBox}>\n                  {iconNames.map((icon, index) => (\n                    <Box key={index} sx={container.boardIcon}>\n                      <Field\n                        type=\"radio\"\n                        id={index}\n                        name=\"icon\"\n                        value={icon}\n                        checked={values.icon === icon}\n                      />\n                      <FormLabel htmlFor={index} sx={iconLabel}>\n                        <Icon id={icon} sx={button.boardEdit}></Icon>\n                      </FormLabel>\n                    </Box>\n                  ))}\n                </Box>\n                <ErrorMessage name=\"icon\" component=\"div\" />\n              </FormLabel>\n\n              <FormLabel sx={form.label} style={{ marginBottom: '40px' }}>\n                <Typography variant=\"h3\" sx={text.label}>\n                  Background\n                </Typography>\n                <Box sx={container.imageWrap}>\n                  {previews.map((preview, index) => (\n                    <Box key={index} sx={container.boardBg}>\n                      <Field\n                        type=\"radio\"\n                        id={`back${index}`}\n                        name=\"background\"\n                        value={index}\n                        checked={Number(values.background) === index}\n                      />\n                      <FormLabel\n                        htmlFor={`back${index}`}\n                        sx={form.bgLabel}\n                        style={{ backgroundImage: `url(${preview})` }}\n                      />\n                    </Box>\n                  ))}\n                </Box>\n                <ErrorMessage name=\"background\" component=\"div\" />\n              </FormLabel>\n            </FormControl>\n            <SubmitButton>{type}</SubmitButton>\n          </Form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nBoardForm.propTypes = {\n  onCloseModal: PropTypes.func.isRequired,\n  initData: PropTypes.object,\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  boardOperation: PropTypes.func.isRequired,\n  id: PropTypes.string,\n};\n\nexport default BoardForm;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink, useParams, Navigate } from 'react-router-dom';\nimport Modal from 'components/Modal/Modal';\nimport BoardForm from 'components/BoardForm/BoardForm';\nimport { Icon } from 'components/Icons';\nimport DeleteConfirmModal from 'components/DeleteConfirmModal/DeleteConfirmModal';\n\nimport {\n  getBoardById,\n  updateBoard,\n  deleteBoard,\n} from 'store/boards/operations';\n\nimport {\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n  Box,\n} from '@mui/material';\nimport { button, icon } from 'styles';\n\nimport { selectBoard } from 'store/boards/selectors';\n\nexport const BoardNavList = ({ boards }) => {\n  const [showModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n  const { boardId } = useParams();\n  const board = useSelector(selectBoard);\n  const [isDeleteBoard, setIsDeleteBoard] = useState(false);\n  const [ShowDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);\n\n  useEffect(() => {\n    if (boardId) dispatch(getBoardById(boardId));\n  }, [dispatch, boardId]);\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setShowDeleteConfirmModal(false);\n  };\n\n  const handleDeleteBoard = () => {\n    // if (window.confirm(`Do you really want to delete board ${board.title}?`)) {\n    dispatch(deleteBoard(board._id));\n    setIsDeleteBoard(true);\n    setShowDeleteConfirmModal(false);\n    // }\n  };\n  useEffect(() => {\n    setIsDeleteBoard(false);\n  }, [isDeleteBoard]);\n\n  const openDeleteConfirmModal = () => {\n    setShowDeleteConfirmModal(true);\n  };\n\n  return (\n    <>\n      <List sx={button.boardListGroup}>\n        {boards.map(board => {\n          return (\n            <ListItem key={board._id} disablePadding>\n              <ListItemButton\n                component={NavLink}\n                to={board._id}\n                sx={button.boardListItem}\n              >\n                <Icon id={board.icon} sx={icon.board} />\n                <ListItemText primary={board.title} disableTypography />\n                {board._id === boardId && (\n                  <>\n                    <Box\n                      onClick={handleOpenModal}\n                      color=\"inherit\"\n                      size=\"small\"\n                      sx={{ mr: '8px', display: 'flex' }}\n                    >\n                      <Icon id={'pencil'} sx={icon.boardItem} />\n                    </Box>\n                    <Box\n                      onClick={openDeleteConfirmModal}\n                      size=\"small\"\n                      color=\"inherit\"\n                      sx={{ mr: '20px', display: 'flex' }}\n                    >\n                      <Icon id={'trash'} sx={icon.boardItem} />\n                    </Box>\n                    {isDeleteBoard && <Navigate to={'/home'} />}\n                  </>\n                )}\n              </ListItemButton>\n            </ListItem>\n          );\n        })}\n      </List>\n\n      <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n        <BoardForm\n          onCloseModal={handleCloseModal}\n          title=\"Edit board\"\n          type=\"Edit\"\n          boardOperation={updateBoard}\n          id={board._id}\n          initData={{\n            title: board.title,\n            icon: board.icon,\n            background: board.background,\n          }}\n        />\n      </Modal>\n\n      <DeleteConfirmModal\n        isOpenModal={ShowDeleteConfirmModal}\n        onCloseModal={handleCloseModal}\n        onConfirm={handleDeleteBoard}\n      />\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Modal from 'components/Modal/Modal';\nimport BoardForm from 'components/BoardForm/BoardForm';\nimport { BoardNavList } from 'components/BoardsNavList';\nimport { Icon } from 'components/Icons';\nimport { addBoard } from 'store/boards/operations';\nimport { selectBoards } from 'store/boards/selectors';\n\nimport { Box, Typography, Button } from '@mui/material';\nimport { container, text, button, icon } from 'styles';\n\nexport const BoardNav = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const boards = useSelector(selectBoards);\n\n  return (\n    <Box sx={container.boardNav}>\n      <Typography component=\"h2\" variant=\"h4\" sx={text.boardNavTitle}>\n        My boards\n      </Typography>\n\n      <Box sx={button.createBoardWrapper}>\n        <Button\n          onClick={handleOpenModal}\n          variant=\"text\"\n          sx={button.createBoard}\n        >\n          Create a<br />\n          new board\n          <Box className=\"createBoardBox\" sx={button.createBoardBox}>\n            <Icon id={'plus'} sx={icon.createNewBoard} />\n          </Box>\n        </Button>\n      </Box>\n      <Box sx={container.boardNavList}>\n        <BoardNavList boards={boards} />\n      </Box>\n\n      <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n        <BoardForm\n          onCloseModal={handleCloseModal}\n          title=\"New board\"\n          type=\"Create\"\n          boardOperation={addBoard}\n        />\n      </Modal>\n    </Box>\n  );\n};\n","import { useDispatch } from \"react-redux\";\nimport { needHelp } from 'store/boards/operations';\nimport { Formik, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport Notiflix from \"notiflix\";\nimport { Typography, TextField, Button, FormControl, Box } from \"@mui/material\";\nimport {container} from 'styles';\n\nconst helpSchema = Yup.object().shape({\n    email: Yup.string()\n      .matches(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n        {\n          message: 'Invalid Email',\n          excludeEmptyString: true,\n        }\n      )\n      .required('Please, enter your email'),\n    text: Yup.string()\n      .required('Please, enter your comment'),\n  });\n\nexport const NeedHelpForm = ({onCloseModal}) => {\n    const dispatch = useDispatch();\n\n     function handleSubmit(values, { resetForm }) {\n        const { email, text } = values;\n         dispatch(needHelp({ email, text }));\n         Notiflix.Notify.info('Thank you for your request, we will answer you as soon as possible.');\n         resetForm();\n         onCloseModal();\n    }\n\n    return (   \n      <Box sx={container.helpFormContainer}>\n      <Typography variant=\"h2\" mb={3}>\n        Need help\n      </Typography>\n      <Formik\n        initialValues={{ email: '', text: '' }}\n        validationSchema={helpSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ values, handleChange, handleSubmit, isSubmitting }) => (\n          <form onSubmit={handleSubmit}>\n            <FormControl fullWidth>\n              <TextField\n                name=\"email\"\n                label=\"Email address\"\n                variant=\"outlined\"\n                sx={{mb: 1.75}}\n                value={values.email}\n                onChange={handleChange}\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                style={{\n                  color: 'red',\n                  fontSize: 12,\n                  marginTop: -10,\n                  marginBottom: 4,\n                }}\n              />\n              <TextField\n                name=\"text\"\n                label=\"Comment\"\n                variant=\"outlined\"\n                multiline\n                rows={6}\n                sx={{mb: 3}}\n                value={values.text}\n                onChange={handleChange}\n              />\n              <ErrorMessage\n                name=\"text\"\n                component=\"div\"\n                style={{\n                  color: 'red',\n                  fontSize: 12,\n                  marginTop: -20,\n                  marginBottom: 4,\n                }}\n              />\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                fullWidth\n                sx={{ \n                  height: 49,\n                  textTransform: 'none',\n                 }}\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                Send\n              </Button>\n            </FormControl>\n          </form>\n        )}\n      </Formik>\n    </Box>     \n    )\n}\n\n\n","import React, { useState } from 'react';\nimport Modal from 'components/Modal/Modal';\nimport TaskProImg from '../../images/taskPro-img.png';\nimport { NeedHelpForm } from './NeedHelpForm';\nimport { Box, Typography, Button, SvgIcon } from '@mui/material';\nimport { text, container, button } from 'styles';\nimport sprite from 'components/Icons/sprite.svg';\n\nexport const HelpBanner = () => {\n  const [showModal, setShowModal] = useState(false);\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  \n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  return (\n    <Box sx={container.helpBannerContainer}>\n      <Box\n        component=\"img\"\n        src={TaskProImg}\n        alt=\"TaskProHelperImg\"\n        sx={{\n          width: 54,\n          height: 78,\n          marginTop: '14px', \n          marginLeft: '14px', \n          marginBottom: '14px'}}\n      />\n      <Typography component=\"p\" variant='body3' sx={text.helpBannerText}>\n        If you need help with&nbsp;<br/>\n        <Typography component=\"span\" variant='body3' sx={text.accent}>TaskPro</Typography>, check out our\n        support resources or reach out to our customer support team.\n      </Typography>\n      <Button variant=\"text\" sx={button.helpBannerBtn} onClick={handleOpenModal}>\n        <SvgIcon sx={text.helpBannerIcon}>\n              <svg width=\"20px\" height=\"20px\" stroke=\"currentColor\" fill=\"none\">\n                <use href={sprite + '#icon-help-circle'} />\n              </svg>\n        </SvgIcon>\n        <Typography component=\"span\" variant='h7' sx={text.helpBannerButton}>Need help?</Typography>\n      </Button>\n      {showModal && (\n        <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n          <NeedHelpForm \n            onCloseModal={handleCloseModal}\n            title=\"Need help\"\n            type=\"submit\"   \n          />\n        </Modal>  \n      )}\n    </Box>\n  );\n};\n","import { logout } from 'store/auth/operations';\nimport { useDispatch } from 'react-redux';\n\nimport { Icon } from 'components/Icons';\nimport { Button } from '@mui/material';\nimport { button, icon } from 'styles';\n\nexport const LogOut = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Button\n      onClick={() => dispatch(logout())}\n      variant=\"text\"\n      sx={button.logOut}\n    >\n      <Icon id={'login'} sx={icon.LogOut} />\n      Log out\n    </Button>\n  );\n};\n","import { Logo } from 'components/Logo';\nimport { BoardNav } from 'components/BoardNav';\nimport { HelpBanner } from 'components/HelpBanner';\nimport { LogOut } from 'components/LogOut';\n\nimport { Box } from '@mui/material';\n\nexport const SideBar = ({ contStyles }) => {\n  return (\n    <Box sx={contStyles}>\n      <Box>\n        <Logo />\n        <BoardNav />\n      </Box>\n      <Box>\n        <HelpBanner />\n        <LogOut />\n      </Box>\n    </Box>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { SideBar } from 'components/SideBar';\nimport { Icon } from 'components/Icons';\n\nimport { Box, Button, Drawer } from '@mui/material';\nimport { button, container, icon } from 'styles';\n\nexport const BurgerMenu = () => {\n  const [menuVisible, setMenuVisible] = useState(false);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  const toggleMenu = () => {\n    setMenuVisible(!menuVisible);\n  };\n\n  const handleWindowResize = () => {\n    setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (windowWidth >= 1440) {\n      setMenuVisible(false);\n    }\n  }, [windowWidth]);\n\n  return (\n    windowWidth <= 1440 && (\n      <Box sx={{ mr: 'auto' }}>\n        <Button onClick={toggleMenu} sx={button.burgerMenu}>\n          <Icon id={'burger-menu'} sx={icon.burgerMenu} />\n        </Button>\n        <Drawer anchor=\"left\" open={menuVisible} onClose={toggleMenu}>\n          <SideBar contStyles={container.sideBar} />\n        </Drawer>\n      </Box>\n    )\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectTheme } from 'store/auth/selectors';\nimport { updateTheme } from 'store/auth/operations';\n\nimport { Box, Button, Menu, MenuItem } from '@mui/material';\nimport { button } from 'styles';\n\nexport const ThemePanel = () => {\n  const dispatch = useDispatch();\n  const userTheme = useSelector(selectTheme);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const handleOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClick = theme => {\n    dispatch(updateTheme(theme));\n    setAnchorEl(null);\n  };\n\n  return (\n    <Box>\n      <Button\n        variant=\"text\"\n        sx={button.theme}\n        id=\"theme-button\"\n        aria-controls={open ? 'theme-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleOpen}\n        // endIcon={<put icon component here />}\n      >\n        Theme\n      </Button>\n      <Menu\n        sx={button.themeMenu}\n        id=\"theme-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClick}\n        MenuListProps={{\n          'aria-labelledby': 'theme-button',\n        }}\n      >\n        <MenuItem\n          sx={button.themeItem}\n          selected={userTheme === 'light'}\n          onClick={() => {\n            handleClick('light');\n          }}\n        >\n          Light\n        </MenuItem>\n        <MenuItem\n          sx={button.themeItem}\n          selected={userTheme === 'dark'}\n          onClick={() => {\n            handleClick('dark');\n          }}\n        >\n          Dark\n        </MenuItem>\n        <MenuItem\n          sx={button.themeItem}\n          selected={userTheme === 'violet'}\n          onClick={() => {\n            handleClick('violet');\n          }}\n        >\n          Violet\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectUser } from 'store/auth/selectors';\nimport { updateProfile } from 'store/auth/operations';\n// import { Icon } from 'components/Icons';\nimport {\n  Typography,\n  TextField,\n  Button,\n  OutlinedInput,\n  IconButton,\n  FormControl,\n  Box,\n  // Stack,\n  // Avatar,\n  InputAdornment,\n//  InputLabel,\n} from '@mui/material';\n// import defaultAvatarViolet from '../../images/default-avatar-violet.png';\n// import defaultAvatarLight from '../../images/default-avatar-light.png';\n// import defaultAvatarDark from '../../images/default-avatar-dark.png';\nimport RemoveRedEyeOutlinedIcon from '@mui/icons-material/RemoveRedEyeOutlined';\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';\nimport {\n  container,\n  form,\n  // button\n} from 'styles';\n\n\nconst UserSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Name must be at least 2 characters')\n    .max(32, 'Name must be at most 32 characters'),\n  email: Yup.string().email('Invalid email'),\n  password: Yup.string()\n    .trim()\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Password must be at most 64 characters')\n  \n});\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\nconst EditProfileTest = ({ onCloseModal }) => {\n  const dispatch = useDispatch();\n    const user = useSelector(selectUser);\n  // const { user, avatarURL, theme } = useSelector(selectUser);\n  const [password, setPassword] = useState('password');\n  // const [currentImage, setCurrentImage] = useState(user.avatarURL);\n\n  const handleClickShowPassword = () => setPassword(show => !show);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { avatarURL, name, email, password } = values;\n    const formData = new FormData();\n    if (avatarURL) {\n      formData.append('avatarURL', avatarURL);\n    }\n    formData.append('name', name);\n    formData.append('email', email);\n    formData.append('password', password);\n\n    dispatch(updateProfile(formData));\n    resetForm();\n    onCloseModal();\n  };\n//  let avatar = user.avatarURL;\n//   if (!avatar) {\n//     switch (theme) {\n//       case 'light':\n//         avatar = defaultAvatarLight;\n//         break;\n//       case 'dark':\n//         avatar = defaultAvatarDark;\n//         break;\n//       default:\n//         avatar = defaultAvatarViolet;\n//         break;\n//     }\n//   }\n\n  // function handleFileChange(event) {\n  //   const file = event;\n  //   if (!file) {\n  //     return;\n  //   }\n  //   const reader = new FileReader();\n\n  //   reader.onload = function (e) {\n  //     setCurrentImage(e.target.result);\n  //   };\n  //   reader.readAsDataURL(file);\n  // }\n  return (\n    <Box sx={container.helpFormContainer}>\n      <Typography variant=\"h2\" mb={3}>\n        Edit profile\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={UserSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ handleChange, handleSubmit, isSubmitting }) => (\n          <form onSubmit={handleSubmit}>\n            <FormControl fullWidth>\n              {/* <Stack sx={container.ImgWrapperContainer}>\n              {currentImage ? (\n                 <Avatar\n          sx={button.profileImgForm}\n          src={currentImage}\n          alt=\"User picture\"\n        />\n                     \n                    ) : (\n                        <Avatar\n          sx={button.profileImgForm}\n          src={defaultAvatarViolet}\n          alt=\"User avatar\"\n        />\n                    )}\n                    <Box sx={button.profileIconPlus}>\n                         <Icon id={\"plus\"} />\n                </Box>\n                </Stack>\n                <InputLabel\n                  id=\"avatar\"\n                  type=\"file\"\n                name=\"avatar\"\n                sx={{display:'none'}}\n                  onChange={event => {\n                    handleFileChange(event.currentTarget.files[0]);\n                  }}\n                /> */}\n\n              <ErrorMessage\n                name=\"name\"\n                component=\"div\"\n                style={{\n                  color: 'red',\n                  fontSize: 12,\n                  marginTop: -20,\n                  marginBottom: 4,\n                }}\n              />\n              <TextField\n                name=\"name\"\n                variant=\"outlined\"\n                placeholder={user.name}\n                fullWidth\n                onChange={handleChange}\n                 sx={form.input}\n                inputProps={{\n                  style: { color: '#FFF' },\n                }}\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                style={{\n                  color: 'red',\n                  fontSize: 12,\n                  marginTop: -10,\n                  marginBottom: 4,\n                }}\n              />\n              <TextField\n                name=\"email\"\n                variant=\"outlined\"\n                placeholder={user.email}\n                fullWidth\n                onChange={handleChange}\n                 sx={form.input}\n                inputProps={{\n                  style: { color: '#FFF' },\n                }}\n              />\n              <ErrorMessage\n                name=\"text\"\n                component=\"div\"\n                style={{\n                  color: 'red',\n                  fontSize: 12,\n                  marginTop: -20,\n                  marginBottom: 4,\n                }}\n              />\n              <OutlinedInput\n                name=\"password\"\n                type={password ? 'text' : 'password'}\n                placeholder=\"Create a password\"\n                fullWidth\n                 sx={form.input}\n                onChange={handleChange}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      onClick={handleClickShowPassword}\n                      edge=\"end\"\n                      sx={form.icon}\n                    >\n                      {password ? (\n                        <RemoveRedEyeOutlinedIcon />\n                      ) : (\n                        <VisibilityOffOutlinedIcon />\n                      )}\n                    </IconButton>\n                  </InputAdornment>\n                }\n              />\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                fullWidth\n                sx={{\n                  height: 49,\n                  textTransform: 'none',\n                }}\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                Send\n              </Button>\n            </FormControl>\n          </form> \n         )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default EditProfileTest;\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from 'store/auth/selectors';\n\nimport Modal from 'components/Modal/Modal';\nimport defaultAvatarViolet from '../../images/default-avatar-violet.png';\nimport defaultAvatarLight from '../../images/default-avatar-light.png';\nimport defaultAvatarDark from '../../images/default-avatar-dark.png';\n// import EditProfile from 'components/EditProfile/EditProfile';\nimport EditProfileTest from 'components/EditProfile/EditProfileTest';\n\nimport { Button, Box } from '@mui/material';\nimport { button } from 'styles';\n\nexport const UserProfile = () => {\n  const [showModal, setShowModal] = useState(false);\n  const { name, avatarURL, theme } = useSelector(selectUser);\n\n  let avatar = avatarURL;\n  if (!avatar) {\n    switch (theme) {\n      case 'light':\n        avatar = defaultAvatarLight;\n        break;\n      case 'dark':\n        avatar = defaultAvatarDark;\n        break;\n      default:\n        avatar = defaultAvatarViolet;\n        break;\n    }\n  }\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <Button variant=\"text\" sx={button.profile} onClick={handleOpenModal}>\n        {name}\n        <Box\n          component=\"img\"\n          sx={button.profileImg}\n          src={avatar}\n          alt=\"User avatar\"\n        />\n      </Button>\n      <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n        {/* <EditProfile onCloseModal={handleCloseModal} type=\"Submit\" /> */}\n        <EditProfileTest onCloseModal={handleCloseModal} type=\"Submit\"/>\n      </Modal>\n    </>\n  );\n};\n","import { BurgerMenu } from 'components/BurgerMenu';\nimport { ThemePanel } from 'components/ThemePanel';\nimport { UserProfile } from 'components/UserProfile';\n\nimport { Box } from '@mui/material';\nimport { container } from 'styles';\n\nexport const TopBar = () => {\n  return (\n    <Box sx={container.topBar}>\n      <BurgerMenu />\n      <ThemePanel />\n      <UserProfile />\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { TopBar } from 'components/TopBar';\nimport { SideBar } from 'components/SideBar';\n\nimport { Container, Box } from '@mui/material';\nimport { container } from 'styles';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const TasksLayout = () => {\n  return (\n    <Container sx={container.layout}>\n      <header>\n        <TopBar />\n      </header>\n      <Box component=\"main\" sx={container.main}>\n        <SideBar contStyles={container.sideBarDesktop} />\n        <Suspense fallback={<Loader/>}>\n          <Outlet />\n        </Suspense>\n      </Box>\n    </Container>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TasksLayout } from 'components/TasksLayout';\nimport { getAllBoards } from 'store/boards/operations';\n\nconst TasksPage = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n  \n  return <TasksLayout />;\n};\n\nexport default TasksPage;\n"],"names":["Logo","userTheme","useSelector","selectTheme","logoColor","_jsxs","Box","sx","logo","children","_jsx","TiFlash","color","size","Typography","component","previews","iconNames","validationSchema","Yup","shape","title","required","min","icon","background","initialValues","_ref","onCloseModal","initData","type","boardOperation","id","dispatch","useDispatch","container","Formik","onSubmit","values","_ref2","setSubmitting","resetForm","submitvalues","_objectSpread","validationOnBlur","_ref3","handleChange","Form","variant","mb","FormLabel","TextField","name","placeholder","value","onChange","input","ErrorMessage","style","form","FormControl","text","role","map","index","Field","checked","htmlFor","iconLabel","Icon","button","marginBottom","preview","concat","Number","backgroundImage","SubmitButton","BoardNavList","boards","_useState","useState","_useState2","_slicedToArray","showModal","setShowModal","boardId","useParams","board","selectBoard","_useState3","_useState4","isDeleteBoard","setIsDeleteBoard","_useState5","_useState6","ShowDeleteConfirmModal","setShowDeleteConfirmModal","useEffect","getBoardById","handleOpenModal","handleCloseModal","openDeleteConfirmModal","_Fragment","List","ListItem","disablePadding","ListItemButton","NavLink","to","_id","ListItemText","primary","disableTypography","onClick","mr","display","Navigate","Modal","isOpenModal","BoardForm","updateBoard","DeleteConfirmModal","onConfirm","deleteBoard","BoardNav","selectBoards","Button","className","addBoard","helpSchema","email","matches","message","excludeEmptyString","NeedHelpForm","needHelp","Notiflix","handleSubmit","isSubmitting","fullWidth","label","fontSize","marginTop","multiline","rows","height","textTransform","disabled","HelpBanner","src","alt","width","marginLeft","SvgIcon","stroke","fill","href","sprite","LogOut","logout","SideBar","contStyles","BurgerMenu","menuVisible","setMenuVisible","window","innerWidth","windowWidth","setWindowWidth","toggleMenu","handleWindowResize","addEventListener","removeEventListener","Drawer","anchor","open","onClose","ThemePanel","anchorEl","setAnchorEl","Boolean","handleClick","theme","updateTheme","undefined","event","currentTarget","Menu","MenuListProps","MenuItem","selected","UserSchema","max","password","trim","user","selectUser","setPassword","handleClickShowPassword","show","avatarURL","formData","FormData","append","updateProfile","inputProps","OutlinedInput","endAdornment","InputAdornment","position","IconButton","edge","RemoveRedEyeOutlinedIcon","VisibilityOffOutlinedIcon","UserProfile","_useSelector","avatar","EditProfileTest","TopBar","TasksLayout","Container","Suspense","fallback","Loader","Outlet","getAllBoards"],"sourceRoot":""}
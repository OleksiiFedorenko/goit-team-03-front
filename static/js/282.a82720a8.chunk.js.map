{"version":3,"file":"static/js/282.a82720a8.chunk.js","mappings":"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","sources":["components/Logo/Logo.jsx","components/BoardForm/BoardForm.styled.js","helpers/getBgPreviews.js","components/BoardForm/BoardForm.jsx","components/BoardsNavList/BoardNavList.jsx","components/BoardNav/BoardNav.jsx","components/HelpBanner/NeedHelpForm.jsx","components/HelpBanner/HelpBanner.jsx","components/LogOut/LogOut.jsx","components/SideBar/SideBar.jsx","components/BurgerMenu/BurgerMenu.jsx","components/ThemePanel/ThemePanel.jsx","components/UserProfile/UserProfile.jsx","components/TopBar/TopBar.jsx","components/TasksLayout/TasksLayout.jsx","pages/TasksPage.jsx"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { selectTheme } from 'store/auth/selectors';\n\nimport { TiFlash } from 'react-icons/ti';\nimport { Box, Typography } from '@mui/material';\nimport { logo } from 'styles';\n\nexport const Logo = () => {\n  const userTheme = useSelector(selectTheme);\n\n  let logoColor = '#5255BC';\n  if (userTheme === 'light' || userTheme === 'dark') logoColor = '#FFF';\n\n  return (\n    <Box sx={logo.container}>\n      <Box sx={logo.iconWrapper}>\n        <Box sx={logo.iconSize}>\n          <TiFlash color={logoColor} size={'100%'} />\n        </Box>\n      </Box>\n      <Typography component=\"h1\" sx={logo.text}>\n        Task Pro\n      </Typography>\n    </Box>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Box, Button, Typography } from '@mui/material';\nimport { Icon } from 'components/Icons';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormEl = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  width: 302px;\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  width: 302px;\n  box-sizing: border-box;\n  // background-color: ;\n  border: 1px solid black;\n  border-radius: 8px;\n  padding: 14px 18px;\n  box-shadow: 0px 4px 16px rgba(17, 17, 17, 0.1);\n  // color: ;\n  font-family: inherit;\n  font-size: 14px;\n  font-weight: 400;\n  font-style: normal;\n  line-height: 21px;\n  letter-spacing: -2%;\n\n  &:focus,\n  &:hover {\n    /* color: ;\n    border-color:  */\n  }\n`;\n\nexport const Text = styled(Typography)`\n  // color: ;\n  margin: 0;\n  margin-bottom: 14px;\n  text-align: left;\n  font-size: 14px;\n  font: 'Poppins';\n  font-weight: 400;\n  font-style: normal;\n  line-height: 21px;\n  letter-spacing: -2%;\n`;\n\nexport const Label = styled.label`\n  width: 100%;\n  position: relative;\n  display: block;\n  margin-bottom: 24px;\n`;\n\nexport const Icontainer = styled(Box)`\n  display: flex;\n  margin-bottom: 24px;\n  gap: 8px;\n`;\n\nexport const IconLabel = styled.label`\n  display: inline-block;\n  width: 18px;\n  height: 18px;\n  border-radius: 50%;\n  background-color: transparent;\n  text-align: center;\n  /* color:  */\n  opacity: 0.5;\n\n  &:hover,\n  &:focus {\n    /* color: */\n    opacity: 1;\n    scale: 1.2;\n  }\n`;\n\nexport const IconEl = styled(Icon)`\n  /*     color: */\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  stroke: currentColor;\n\n  &:hover {\n    /* color:  */\n  }\n`;\n\nexport const ImageWrap = styled(Box)`\n  display: grid;\n  width: fit-content;\n  grid-template-columns: repeat(8, 1fr);\n  grid-gap: 4px;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n`;\n\nexport const BgLabel = styled.label`\n  display: block;\n  box-sizing: border-box;\n  width: 28px;\n  height: 28px;\n  background-size: cover;\n  background-position: center;\n  border-radius: 8px;\n\n  &:hover,\n  &:focus {\n    /* border: */\n    scale: 1.2;\n  }\n`;\n\nexport const BoardIcon = styled(Box)`\n  input {\n    display: none;\n  }\n\n  input:checked + label {\n    opacity: 1;\n  }\n`;\n\nexport const BoardBg = styled(Box)`\n  input {\n    display: none;\n  }\n\n  input:checked + label {\n    opacity: 0.4;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  bottom: -21px;\n  right: 0;\n  font-size: 13px;\n  font-weight: 400;\n  font-style: normal;\n  letter-spacing: -1%;\n  opacity: 0.9;\n  color: #e66666;\n`;\n\nexport const Btn = styled(Button)`\n  display: flex;\n  justify-content: center;\n  gap: 8px;\n  align-items: center;\n  /* background-color: */\n  padding: 14px 88px 14px 89px;\n  padding-top: 10px;\n  padding-bottom: 11px;\n  border-radius: 8px;\n  border: none;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 21px;\n  width: 100%;\n  /* color: */\n  font-family: inherit;\n\n  &:hover {\n    opacity: 0.8;\n  }\n\n  span {\n    line-height: 28px;\n    font-weight: 500;\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrap = styled(Box)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: ;\n  color:  */\n  padding: 7px;\n  border-radius: 8px;\n  margin: 0;\n`;\n","import bg1 from 'images/bgPreviews/bg1.png';\nimport bg2 from 'images/bgPreviews/bg2.png';\nimport bg3 from 'images/bgPreviews/bg3.png';\nimport bg4 from 'images/bgPreviews/bg4.png';\nimport bg5 from 'images/bgPreviews/bg5.png';\nimport bg6 from 'images/bgPreviews/bg6.png';\nimport bg7 from 'images/bgPreviews/bg7.png';\nimport bg8 from 'images/bgPreviews/bg8.png';\nimport bg9 from 'images/bgPreviews/bg9.png';\nimport bg10 from 'images/bgPreviews/bg10.png';\nimport bg11 from 'images/bgPreviews/bg11.png';\nimport bg12 from 'images/bgPreviews/bg12.png';\nimport bg13 from 'images/bgPreviews/bg13.png';\nimport bg14 from 'images/bgPreviews/bg14.png';\nimport bg15 from 'images/bgPreviews/bg15.png';\nimport bg16 from 'images/bgPreviews/bg16.png';\n\nexport const previews = [\n  bg1,\n  bg2,\n  bg3,\n  bg4,\n  bg5,\n  bg6,\n  bg7,\n  bg8,\n  bg9,\n  bg10,\n  bg11,\n  bg12,\n  bg13,\n  bg14,\n  bg15,\n  bg16,\n];\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { Typography } from '@mui/material';\nimport {\n  BgLabel,\n  BoardBg,\n  BoardIcon,\n  Btn,\n  Error,\n  FormEl,\n  IconEl,\n  IconLabel,\n  Icontainer,\n  IconWrap,\n  ImageWrap,\n  Input,\n  Label,\n  Text,\n} from './BoardForm.styled';\nimport sprite from 'components/Icons/sprite.svg';\nimport { previews } from 'helpers/getBgPreviews';\n\nconst iconNames = [\n  'project',\n  'star',\n  'loading',\n  'puzzle-piece',\n  'container',\n  'lightning',\n  'colors',\n  'hexagon',\n];\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string()\n    .required('Is Required')\n    .min(3, 'The title must contain at least 3 characters'),\n\n  icon: Yup.string().required('Is Required'),\n\n  background: Yup.string(),\n});\n\nconst initialValues = {\n  title: '',\n  icon: iconNames[0],\n  background: '0',\n};\n\nconst BoardForm = ({ onSubmitForm, onCloseModal, initData, title, type, boardOperation, id }) => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { setSubmitting, resetForm }) => {\n    // onSubmitForm(values);\n    const submitvalues = !id ? values : {...values, id};\n    dispatch(boardOperation(submitvalues));\n    setSubmitting(false);\n    resetForm();\n    onCloseModal();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n      validationOnBlur={true}\n    >\n      {({ isSubmitting, dirty, values }) => (\n        <FormEl>\n          <Typography variant=\"h6\" mb={2}>\n            {title}\n          </Typography>\n          <Label>\n            <Input type=\"text\" name=\"title\" placeholder=\"Title\" autoFocus />\n            <Error name=\"title\" component=\"div\" />\n          </Label>\n\n          <Label>\n            <Text>Icons</Text>\n            <Icontainer role=\"group\">\n              {iconNames.map((icon, index) => (\n                <BoardIcon key={index}>\n                  <Input\n                    type=\"radio\"\n                    id={index}\n                    name=\"icon\"\n                    value={icon}\n                    checked={values.icon === icon}\n                  />\n                  <IconLabel htmlFor={index}>\n                    <IconEl id={icon} />\n                  </IconLabel>\n                </BoardIcon>\n              ))}\n            </Icontainer>\n            <Error name=\"icon\" component=\"div\" />\n          </Label>\n\n          <Label>\n            <Text>Background</Text>\n            <ImageWrap>\n              {previews.map((preview, index) => (\n                <BoardBg key={index}>\n                  <Input\n                    type=\"radio\"\n                    id={`back${index}`}\n                    name=\"background\"\n                    value={index}\n                    checked={Number(values.background) === index}\n                  />\n                  <BgLabel\n                    htmlFor={`back${index}`}\n                    style={{ backgroundImage: `url(${preview})` }}\n                  />\n                </BoardBg>\n              ))}\n            </ImageWrap>\n\n            <Error name=\"background\" component=\"div\" />\n          </Label>\n          <Btn\n            variant=\"contained\"\n            type=\"submit\"\n            disabled={isSubmitting || !dirty}\n          >\n            <IconWrap>\n              <svg width=\"18px\" height=\"18px\" stroke=\"currentColor\">\n                <use href={sprite + '#icon-plus'} />\n              </svg>\n            </IconWrap>\n            <span>{type}</span>\n          </Btn>\n        </FormEl>\n      )}\n    </Formik>\n  );\n};\n\nBoardForm.propTypes = {\n  onCloseModal: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default BoardForm;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NavLink, useParams } from 'react-router-dom';\nimport Modal from 'components/Modal/Modal';\nimport BoardForm from 'components/BoardForm/BoardForm';\nimport {\n  Box,\n  List,\n  ListItemButton,\n  ListItemText,\n  IconButton,\n} from '@mui/material';\nimport { Icon } from 'components/Icons';\n\nimport {\n  getBoardById,\n  updateBoard,\n  deleteBoard,\n} from 'store/boards/operations';\n\nexport const BoardNavList = ({ boards }) => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n  const { boardId } = useParams();\n\n  const handleListItemClick = (event, index, boardId) => {\n    setSelectedIndex(index);\n    dispatch(getBoardById(boardId));\n  };\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const handleDeleteBoard = () => {\n    if (window.confirm('Do you really want to delete board?')) {\n      dispatch(deleteBoard(boardId));\n    }\n  };\n\n  return (\n    <Box sx={{ width: '100%', m: '0', p: '0' }}>\n      <List\n        component=\"nav\"\n        sx={{ width: '100%', m: '0', p: '0', color: 'text.sideSecond' }}\n      >\n        {boards.map((board, index) => {\n          return (\n            <ListItemButton\n              key={board._id}\n              component={NavLink}\n              to={board._id}\n              sx={[\n                {\n                  '&:focus': {\n                    color: 'text.sideMain',\n                    backgroundColor: 'background.sideSecond',\n                  },\n                },\n              ]}\n              selected={selectedIndex === index}\n              onClick={event => handleListItemClick(event, index, board._id)}\n            >\n              <Icon id={board.icon} />\n              <ListItemText primary={board.title} />\n              <IconButton\n                onClick={handleOpenModal}\n                color=\"inherit\"\n                size=\"small\"\n                sx={[\n                  {\n                    '&:focus': {\n                      color: 'secondary',\n                      backgroundColor: 'background.sideSecond',\n                    },\n                  },\n                ]}\n              >\n                <Icon id={'pencil'} />\n              </IconButton>\n              <IconButton\n                onClick={handleDeleteBoard}\n                size=\"small\"\n                color=\"inherit\"\n              >\n                <Icon id={'trash'} />\n              </IconButton>\n            </ListItemButton>\n          );\n        })}\n      </List>\n      <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n        <BoardForm\n          onCloseModal={handleCloseModal}\n          title=\"Edit board\"\n          type=\"Edit\"\n          boardOperation={updateBoard}\n          id={boardId}\n        />\n      </Modal>\n    </Box>\n  );\n};\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\n// import { NavLink } from 'react-router-dom';\n\nimport Modal from 'components/Modal/Modal';\nimport BoardForm from 'components/BoardForm/BoardForm';\nimport { BoardNavList } from 'components/BoardsNavList';\nimport { addBoard } from 'store/boards/operations';\nimport { selectBoards } from 'store/boards/selectors';\n\nimport {\n  Box,\n  Typography,\n  Button,\n  // List,\n  // ListItem,\n  // ListItemButton,\n  // ListItemText,\n} from '@mui/material';\nimport { container, text, button } from 'styles';\n\nexport const BoardNav = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const boards = useSelector(selectBoards);\n\n  return (\n    <Box sx={container.boardNav}>\n      <Typography component=\"h2\" variant=\"h4\" sx={text.boardNavTitle}>\n        My boards\n      </Typography>\n\n      <Box sx={button.createBoardWrapper}>\n        <Button\n          onClick={handleOpenModal}\n          variant=\"text\"\n          sx={button.createBoard}\n        >\n          <Typography component=\"span\">\n            Create a<br />\n            new board\n          </Typography>\n          <Box className=\"createBoardBox\" sx={button.createBoardBox}></Box>\n        </Button>\n      </Box>\n\n      <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n        <BoardForm\n          onCloseModal={handleCloseModal}\n          title=\"New board\"\n          type=\"Create\"\n          boardOperation={addBoard}\n        />\n      </Modal>\n\n      <BoardNavList boards={boards} />\n\n      {/* <List sx={button.boardListGroup}>\n        <ListItem disablePadding>\n          <ListItemButton component={NavLink} to=\"1\" sx={button.boardListItem}>\n            <ListItemText primary=\"Project office\" disableTypography />\n            <Box className=\"activeBoardBtn\" sx={button.boardListBox} />\n          </ListItemButton>\n        </ListItem>\n        <ListItem disablePadding>\n          <ListItemButton component={NavLink} to=\"2\" sx={button.boardListItem}>\n            <ListItemText primary=\"Neon Light Project\" disableTypography />\n            <Box className=\"activeBoardBtn\" sx={button.boardListBox} />\n          </ListItemButton>\n        </ListItem>\n      </List> */}\n    </Box>\n  );\n};\n","import { useDispatch } from \"react-redux\";\nimport { needHelp } from 'store/boards/operations';\nimport { Formik, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport Notiflix from \"notiflix\";\nimport { Typography, TextField, Button, FormControl } from \"@mui/material\";\n\nconst helpSchema = Yup.object().shape({\n    email: Yup.string()\n      .matches(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n        {\n          message: 'Invalid Email',\n          excludeEmptyString: true,\n        }\n      )\n      .required('Please, enter your email'),\n    text: Yup.string()\n      .required('Please, enter your comment'),\n  });\n\nexport const NeedHelpForm = ({onCloseModal}) => {\n    const dispatch = useDispatch();\n\n    function handleSubmit(value) {\n       const { email, text } = value;\n      dispatch(needHelp({ email, text }))\n      Notiflix.Notify.info('Thank you for your request, we will answer you as soon as possible.')\n        onCloseModal()\n    }\n    return (   \n        <>\n        <Typography variant=\"h2\" mb={2}>Need help</Typography>\n        <Formik\n          initialValues={{ email: '', text: '' }}\n          validationSchema={helpSchema}\n          onSubmit={(value, { resetForm }) => {\n            handleSubmit(value);\n            resetForm();\n          }}>\n            <FormControl fullWidth>\n            <TextField \n              type=\"email\" \n              name=\"email\" \n              variant=\"outlined\"\n              style={{marginBottom: 14}}\n              placeholder=\"Email address\" \n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                style={{\n                  color: 'red',\n                  fontSize: 14,\n                }}\n              />\n            <TextField\n              type=\"text\" \n              name=\"text\"\n              variant=\"outlined\"\n              placeholder=\"Comment\"\n              multiline\n              rows={6}\n              style={{marginBottom: 24}}\n               />\n              <ErrorMessage\n                name=\"text\"\n                component=\"div\"\n                style={{\n                  color: 'red',\n                  fontSize: 14,\n                }}\n              />\n            <Button \n              color=\"primary\" \n              variant=\"contained\" \n              fullWidth \n              style={{ textTransform: 'none' }}\n              type=\"submit\">\n                Send\n            </Button>\n            </FormControl>\n        </Formik>\n        </>    \n    )\n}\n\n","import React, { useState } from 'react';\nimport Modal from 'components/Modal/Modal';\nimport TaskProImg from '../../images/taskPro-img.png';\nimport { NeedHelpForm } from './NeedHelpForm';\nimport { Box, Typography, Button, SvgIcon } from '@mui/material';\nimport { text, container } from 'styles';\nimport sprite from 'components/Icons/sprite.svg';\n\nexport const HelpBanner = () => {\n  const [showModal, setShowModal] = useState(false);\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  \n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  return (\n    <Box sx={container.helpBannerContainer}>\n      <Box\n        component=\"img\"\n        src={TaskProImg}\n        alt=\"TaskProHelperImg\"\n        sx={{\n          width: 54,\n          height: 78,\n          marginTop: '14px', \n          marginLeft: '14px', \n          marginBottom: '14px'}}\n      />\n      <Typography component=\"p\" variant='h4' sx={text.helpBannerText}>\n        If you need help with&nbsp;<br/>\n        <Typography component=\"span\" sx={text.accent}>TaskPro</Typography>, check out our\n        support resources or reach out to our customer support team.\n      </Typography>\n      <Button variant=\"text\" onClick={handleOpenModal}>\n        <SvgIcon sx={text.helpBannerIcon}>\n              <svg width=\"20px\" height=\"20px\" stroke=\"currentColor\" fill=\"none\">\n                <use href={sprite + '#icon-help-circle'} />\n              </svg>\n        </SvgIcon>\n        <Typography component=\"span\" sx={text.helpBannerButton}>Need help?</Typography>\n      </Button>\n      {showModal && (\n        <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n          <NeedHelpForm \n            onCloseModal={handleCloseModal}\n            title=\"Need help\"\n            type=\"Submit\"/>\n        </Modal>  \n      )}\n    </Box>\n  );\n};\n","import { logout } from 'store/auth/operations';\nimport { useDispatch } from 'react-redux';\n\nimport { Button } from '@mui/material';\nimport { button } from 'styles';\n\nexport const LogOut = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Button\n      onClick={() => dispatch(logout())}\n      variant=\"text\"\n      sx={button.logOut}\n    >\n      Log out\n    </Button>\n  );\n};\n","import { Logo } from 'components/Logo';\nimport { BoardNav } from 'components/BoardNav';\nimport { HelpBanner } from 'components/HelpBanner';\nimport { LogOut } from 'components/LogOut';\n\nimport { Box } from '@mui/material';\n\nexport const SideBar = ({ contStyles }) => {\n  return (\n    <Box sx={contStyles}>\n      <Box>\n        <Logo />\n        <BoardNav />\n      </Box>\n      <Box>\n        <HelpBanner />\n        <LogOut />\n      </Box>\n    </Box>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { SideBar } from 'components/SideBar';\nimport { Icon } from 'components/Icons';\n\nimport { Box, Button, Drawer } from '@mui/material';\nimport { button, container } from 'styles';\n\nexport const BurgerMenu = () => {\n  const [menuVisible, setMenuVisible] = useState(false);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  const toggleMenu = () => {\n    setMenuVisible(!menuVisible);\n  };\n\n  const handleWindowResize = () => {\n    setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (windowWidth >= 1440) {\n      setMenuVisible(false);\n    }\n  }, [windowWidth]);\n\n  return (\n    windowWidth <= 1440 && (\n      <Box sx={{ mr: 'auto' }}>\n        <Button onClick={toggleMenu} sx={button.burgerMenu}>\n          <Icon id={'burger-menu'}></Icon>\n        </Button>\n        <Drawer anchor=\"left\" open={menuVisible} onClose={toggleMenu}>\n          <SideBar contStyles={container.sideBar} />\n        </Drawer>\n      </Box>\n    )\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectTheme } from 'store/auth/selectors';\nimport { updateTheme } from 'store/auth/operations';\n\nimport { Box, Button, Menu, MenuItem } from '@mui/material';\nimport { button } from 'styles';\n\nexport const ThemePanel = () => {\n  const dispatch = useDispatch();\n  const userTheme = useSelector(selectTheme);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const handleOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClick = theme => {\n    dispatch(updateTheme(theme));\n    setAnchorEl(null);\n  };\n\n  return (\n    <Box>\n      <Button\n        variant=\"text\"\n        sx={button.theme}\n        id=\"theme-button\"\n        aria-controls={open ? 'theme-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleOpen}\n        // endIcon={<put icon component here />}\n      >\n        Theme\n      </Button>\n      <Menu\n        sx={button.themeMenu}\n        id=\"theme-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClick}\n        MenuListProps={{\n          'aria-labelledby': 'theme-button',\n        }}\n      >\n        <MenuItem\n          sx={button.themeItem}\n          selected={userTheme === 'light'}\n          onClick={() => {\n            handleClick('light');\n          }}\n        >\n          Light\n        </MenuItem>\n        <MenuItem\n          sx={button.themeItem}\n          selected={userTheme === 'dark'}\n          onClick={() => {\n            handleClick('dark');\n          }}\n        >\n          Dark\n        </MenuItem>\n        <MenuItem\n          sx={button.themeItem}\n          selected={userTheme === 'violet'}\n          onClick={() => {\n            handleClick('violet');\n          }}\n        >\n          Violet\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from 'store/auth/selectors';\n\nimport Modal from 'components/Modal/Modal';\nimport defaultAvatarViolet from '../../images/default-avatar-violet.png';\nimport defaultAvatarLight from '../../images/default-avatar-light.png';\nimport defaultAvatarDark from '../../images/default-avatar-dark.png';\n\nimport { Button, Box } from '@mui/material';\nimport { button } from 'styles';\n\nexport const UserProfile = () => {\n  const [showModal, setShowModal] = useState(false);\n  const { name, avatarURL, theme } = useSelector(selectUser);\n\n  let avatar = avatarURL;\n  if (!avatar) {\n    switch (theme) {\n      case 'light':\n        avatar = defaultAvatarLight;\n        break;\n      case 'dark':\n        avatar = defaultAvatarDark;\n        break;\n      default:\n        avatar = defaultAvatarViolet;\n        break;\n    }\n  }\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <Button variant=\"text\" sx={button.profile} onClick={handleOpenModal}>\n        {name}\n        <Box\n          component=\"img\"\n          sx={button.profileImg}\n          src={avatar}\n          alt=\"User avatar\"\n        />\n      </Button>\n      <Modal isOpenModal={showModal} onCloseModal={handleCloseModal}>\n        <div></div>\n      </Modal>\n    </>\n  );\n};\n","import { BurgerMenu } from 'components/BurgerMenu';\nimport { ThemePanel } from 'components/ThemePanel';\nimport { UserProfile } from 'components/UserProfile';\n\nimport { Box } from '@mui/material';\nimport { container } from 'styles';\n\nexport const TopBar = () => {\n  return (\n    <Box sx={container.topBar}>\n      <BurgerMenu />\n      <ThemePanel />\n      <UserProfile />\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { TopBar } from 'components/TopBar';\nimport { SideBar } from 'components/SideBar';\n\nimport { Container, Box } from '@mui/material';\nimport { container } from 'styles';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const TasksLayout = () => {\n  return (\n    <Container sx={container.layout}>\n      <header>\n        <TopBar />\n      </header>\n      <Box component=\"main\" sx={container.main}>\n        <SideBar contStyles={container.sideBarDesktop} />\n        <Suspense fallback={<Loader/>}>\n          <Outlet />\n        </Suspense>\n      </Box>\n    </Container>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TasksLayout } from 'components/TasksLayout';\nimport { getAllBoards } from 'store/boards/operations';\n\nconst TasksPage = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n  \n  return <TasksLayout />;\n};\n\nexport default TasksPage;\n"],"names":["Logo","userTheme","useSelector","selectTheme","logoColor","Box","sx","logo","color","size","Typography","component","FormEl","styled","Form","Input","Field","Text","Label","Icontainer","IconLabel","IconEl","Icon","ImageWrap","BgLabel","BoardIcon","BoardBg","Error","ErrorMessage","Btn","Button","IconWrap","previews","iconNames","validationSchema","Yup","shape","title","required","min","icon","background","initialValues","onSubmitForm","onCloseModal","initData","type","boardOperation","id","dispatch","useDispatch","onSubmit","values","setSubmitting","resetForm","submitvalues","validationOnBlur","isSubmitting","dirty","variant","mb","name","placeholder","autoFocus","role","map","index","value","checked","htmlFor","preview","Number","style","backgroundImage","disabled","width","height","stroke","href","sprite","BoardNavList","boards","useState","selectedIndex","setSelectedIndex","showModal","setShowModal","boardId","useParams","handleOpenModal","handleCloseModal","handleDeleteBoard","window","confirm","deleteBoard","m","p","List","board","ListItemButton","NavLink","to","_id","backgroundColor","selected","onClick","event","getBoardById","handleListItemClick","ListItemText","primary","IconButton","Modal","isOpenModal","updateBoard","BoardNav","selectBoards","container","text","button","className","addBoard","helpSchema","email","matches","message","excludeEmptyString","NeedHelpForm","needHelp","Notiflix","handleSubmit","FormControl","fullWidth","TextField","marginBottom","fontSize","multiline","rows","textTransform","HelpBanner","src","alt","marginTop","marginLeft","SvgIcon","fill","LogOut","logout","SideBar","contStyles","BurgerMenu","menuVisible","setMenuVisible","innerWidth","windowWidth","setWindowWidth","toggleMenu","handleWindowResize","useEffect","addEventListener","removeEventListener","mr","Drawer","anchor","open","onClose","ThemePanel","anchorEl","setAnchorEl","Boolean","handleClick","theme","updateTheme","undefined","currentTarget","Menu","MenuListProps","MenuItem","UserProfile","selectUser","avatarURL","avatar","TopBar","TasksLayout","Container","Suspense","fallback","Loader","getAllBoards"],"sourceRoot":""}
{"version":3,"file":"static/js/108.367221f2.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/AuthFormRegister/AuthFormRegister.module.css?bfc5","components/AuthFormRegister/AuthFormRegister.jsx","pages/RegisterPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AuthFormRegister_form__52FTB\",\"input\":\"AuthFormRegister_input__aT55+\",\"error\":\"AuthFormRegister_error__aRFZB\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { getLogin } from 'store/auth/operations';\nimport { Button, ThemeProvider, TextField, OutlinedInput, InputAdornment, IconButton } from '@mui/material';\nimport { lightTheme } from '../../themes/themes'\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\nimport { useFormik } from 'formik';\nimport style from './AuthFormRegister.module.css'\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().trim().required(),\n  email: yup.string().email().required(),\n  password: yup.string().min(8).required(),\n});\n\nexport const AuthFormRegister = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => setShowPassword((show) => !show);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, {setSubmitting}) => {\n    alert(JSON.stringify(values, null, 2));\n    dispatch(getLogin(values))\n    setSubmitting(false);\n  }\n\n  const initialValues = {\n    name: '',\n    email: '', \n    password: '', \n  } \n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit,\n  });\n\n  return (\n    <ThemeProvider theme={lightTheme}>\n      <form onSubmit={formik.handleSubmit} className={style.form}>\n        {formik.touched.name && formik.errors.name ? (\n          <div className={style.error}>{formik.errors.name}</div>\n        ) : null}\n        <TextField\n          name=\"name\"\n          type=\"text\"\n          variant=\"outlined\"\n          placeholder=\"Enter your name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          fullWidth\n          inputProps={{\n            style: { color: 'white' },\n          }}\n          sx={{\n            marginBottom: '14px',\n            \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"#BEDBB0\",\n            },\n            \"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"#BEDBB0\",\n            },\n        }}\n      />\n        {formik.touched.email && formik.errors.email ? (\n          <div className={style.error}>{formik.errors.email.toWellFormed()}</div>\n        ) : null}\n        <TextField\n          name=\"email\"\n          type=\"email\"\n          variant=\"outlined\"\n          placeholder=\"Enter your email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          fullWidth\n          inputProps={{\n            style: { color: 'white' },\n          }}\n          sx={{\n            marginBottom: '14px',\n            \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"#BEDBB0\",\n            },\n            \"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"#BEDBB0\",\n            },\n        }}\n      />\n        {formik.touched.password && formik.errors.password ? (\n          <div className={style.error}>{formik.errors.password}</div>\n        ) : null}\n        <OutlinedInput\n          name=\"password\"\n          type={showPassword ? \"text\" : \"password\"}\n          placeholder=\"Create a password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          fullWidth\n          inputProps={{\n            style: { color: 'white' },\n          }}\n          sx={{\n            marginBottom: '24px',\n            \"& .MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"#BEDBB0\",\n            },\n            \"&:hover .MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"#BEDBB0\",\n            },\n          }}\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <IconButton onClick={handleClickShowPassword} edge=\"end\" style={{color: '#FFF'}}>\n                {showPassword ? <VisibilityOff /> : <Visibility />}\n              </IconButton>\n            </InputAdornment>\n          }\n        />\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          Register Now\n        </Button>\n      </form>\n    </ThemeProvider>\n  );\n}","import { AuthFormRegister } from 'components/AuthFormRegister';\n\nconst RegisterPage = () => {\n  return <AuthFormRegister />;\n};\n\nexport default RegisterPage;\n"],"names":["validationSchema","yup","shape","name","trim","required","email","password","min","AuthFormRegister","useState","showPassword","setShowPassword","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","setSubmitting","alert","JSON","stringify","getLogin","ThemeProvider","theme","lightTheme","handleSubmit","className","style","touched","errors","TextField","type","variant","placeholder","value","onChange","handleChange","onBlur","handleBlur","error","Boolean","fullWidth","inputProps","color","sx","marginBottom","borderColor","toWellFormed","OutlinedInput","endAdornment","InputAdornment","position","IconButton","onClick","show","edge","VisibilityOff","Visibility","Button"],"sourceRoot":""}
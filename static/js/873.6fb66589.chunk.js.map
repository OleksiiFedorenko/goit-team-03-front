{"version":3,"file":"static/js/873.6fb66589.chunk.js","mappings":";8NAoCgB,SAAAA,EACdC,EACAC,GAEA,GAAIC,EAAYF,GACd,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAOI,SACc,IAAnCH,EAASD,EAAOG,GAAIA,EAAGH,GADMG,UAK1BH,GAETD,EAAKM,OAAOC,KAAKN,IAAU,SAAAG,GAAA,OAAQF,EAASD,EAAOG,GAAMA,EAAKH,EAAA,IAEhE,OAAOA,CACT,CCkBgB,SAAAO,EACdP,EACAC,GAEA,IAAME,EAAiBK,EAASP,GAGhC,GAFkBQ,EAAQR,IAAWE,EAEtB,CACb,IAAIO,EAAwCP,EAAiB,GAAK,CAAC,EACnE,GAAIH,EAAK,CACP,IAAMW,EAAqCC,OAAOC,iBAAiBb,EAAK,MACxEU,EAAkBP,EACdW,GAAUd,EAAKW,EAAeV,GAC7BA,EAAyBc,QAAO,SAACd,EAAQE,GAExC,OADAF,EAAOE,GAAOW,GAAUd,EAAKW,EAAeR,GACrCF,CACN,GAAAS,EACR,CACD,OAAOA,CACR,CACDV,GAAOD,EAAKO,EAAKL,IAAU,SAAAE,GAAA,OAAQa,GAAUhB,EAAKG,EAAKF,EAAOE,GAAA,GAChE,CCzDO,IC9BHc,EC+FAC,EFjESC,EAA2B,SACtCnB,EACAC,GAEA,IAEImB,EAFIjB,EAA+CH,EAAjDG,EAAiBO,EAAgCV,EAAlCqB,EAAUV,EAAwBX,EAA1BsB,EACzBC,EAAgBpB,EAGdqB,EAAsD,SAACxB,EAAUC,GACrE,IAAME,EAAOoB,EAEPE,EAASzB,EACT0B,EAAUzB,IAAUS,GAAUA,EAAOP,EAAMsB,GAAUtB,IAASsB,GAOpE,OALIC,GAAWf,KACbY,EAASE,EACTL,EAAYjB,GAGP,CAACoB,EAAQG,EAASN,EAAU,EAWrC,MAAO,CAACnB,EATyC,SAAAD,GAAA,OAC/CwB,EAAsBvB,EAAQsB,EAAQH,GAAYpB,EAAA,EAQbwB,EANU,SAAAxB,GAAA,MAAoB,CACnEuB,IACEvB,EACFoB,EAAA,EAKc,EGjELO,EAAW,WAAX,MAAmC,qBAAXf,MAAA,ECG/BZ,EAAkB2B,KAAcC,KAAKC,aAC3CC,EAAqCzB,OAAO0B,UAApC9B,EAAA6B,EAAFE,SAAY7B,EAAA2B,EAAAG,eAELC,EAAe,SAAAlC,GAAA,gBAA+BA,CAAA,EAE9CmC,EAAU,SAAAnC,GAAA,OAAkC,OAARA,CAAA,EAEpCoC,EAAQ,SAAApC,GAAA,OACnBkC,EAAYlC,IAAQmC,EAAOnC,GAAA,GAAAqC,OACpBrC,GACHC,EACGqC,KAAKtC,GACLuC,QAAQ,oBAAqB,MAC7BC,aAAA,EAEIC,EAAY,SAAAzC,GAAA,MAA2C,kBAARA,CAAA,EAE/CQ,EAAY,SAAAR,GAAA,MAA2C,kBAARA,CAAA,EAE/C0C,EAAa,SAAA1C,GAAA,MAA4C,mBAARA,CAAA,EAEjD2C,EAAc,SAAA3C,GAAA,MAA4D,oBAARA,CAAA,EAElES,EAAoB,SAAAT,GAA8B,OAAA4C,MAAMnC,QAAQT,EAAA,EAEhE6C,EAAY,SAAA7C,GACR,wBAARA,IAAqBS,EAAQT,KAASmC,EAAOnC,EAAA,EAMzCE,EAA4C,SAAAF,GACvD,IAAMC,IAAWD,GAAOA,EAAII,OACtBD,EAAsBsC,EAASxC,IAAWA,GAAU,GAAKA,EAAS,GAAK,EAE7E,SAAOQ,EAAQT,KAAU2C,EAAW3C,IAAQG,OACxCF,EAAS,GAAK4C,EAAS7C,KACrBC,EAAS,KAAKD,EAEX,EAOE8C,EAA0B,SAAA9C,GACrC,IAAKA,IAAQ6C,EAAS7C,IAAsB,WAAdoC,EAAKpC,GAAmB,OAAO,EAE7D,IAAIC,EACES,EAAO,cACPC,EAAOX,EAAIU,GACXa,EAAYZ,GAAQA,EAAKoB,UACzBX,EAAoBjB,EAAemC,KAAKtC,EAAKU,GAC7Ce,EAAmBF,GAAapB,EAAemC,KAAKf,EAAW,iBAErE,GAAIZ,IAASS,IAAsBK,EACjC,OAAO,EAIT,IAAKxB,KAAOD,GAKZ,OAAOkC,EAAYjC,IAAQE,EAAemC,KAAKtC,EAAKC,EAAI,EAO7C8C,EAAiB,SAAA9C,GAC5B,IAAME,EAAgB6C,YACtB,QAAO/C,IACHE,EACEF,aAAeE,EACfF,EAAIgD,WAAajD,EACd,EAOEkD,EAAa,SAAAjD,GACxB,IAAME,EAAgBgD,QACtB,QAAOlD,IACHE,EACEF,aAAeE,EACfF,EAAIgD,WAAajD,EACd,ENrCEoD,EAAU,SAAUpD,EAAUC,EAASE,GAClD,OAAAH,EAAIoD,QAAQnD,EAAME,EAAA,EAOPkD,EAAO,SAAIrD,EAAYC,EAAyBE,GAI3D,OAHCA,GAAsBK,EAASP,KAAUC,EAAYD,GAElDD,EAAMqD,KAAKpD,GADX2C,MAAMb,UAAUsB,KAAKC,MAAMtD,EAAOC,GAE/BD,CAAK,EAODuD,EAAiB,SAAAvD,GAC5B,IAAMC,EAAW2C,MAAMW,KACjBpD,EAAc,GAEpB,OAAIF,GAAYD,EACPC,EAASD,IAGdA,aAAewD,IACjBxD,EAAIyD,SAAS,SAAAzD,GACXqD,EAAKlD,EAAQH,EAAM,IAGrBD,EAAKC,GAAM,SAAAA,GACTqD,EAAKlD,EAAQH,EAAI,IAIdG,EAAM,EAOFuD,EAAgB,SAAA1D,GAAA,QACzBA,GAA0B,IAAjBA,EAAMI,MAAA,EAQNuD,EAAkB,SAAC3D,EAAoBC,EAAcE,GAGhEJ,EAAKC,GADU,SAAAA,GAAoB,OAAAA,GAAMA,EAAGsD,WAAA,EAAiBrD,GAAQ,QAEpEE,IAAUH,EAAcI,OAAS,EAAE,EO5GzB6B,EAAiB,SAACjC,EAAUC,GAAA,OACvCI,OAAO0B,UAAUE,eAAeK,KAAKtC,EAAKC,EAAA,EAM/BK,EAAQ,SAAAN,GAAA,OAA6BA,EAAMK,OAAOC,KAAKN,GAAO,IAyB9D4D,EAAyB,SAAzBA,EACX5D,EACAC,EACAE,EACAO,EACAC,EACAY,EACAH,GAEA,IAAMK,EAAsB,CAACxB,EAASE,EAASO,EAASC,EAASY,EAASH,GAyC1E,MAtCuB,kBAAXpB,IAAuBmC,EAAOnC,IAAa2C,EAAW3C,KAChEA,EAAS,CAAC,GAGZD,EAAK0B,GAAU,SAAAxB,GAEbF,EAAKO,EAAKL,IAAU,SAAAE,GAClB,IAAMO,EAAYT,EAAOE,GAIzB,GAAIH,IAAWU,EACb,OAAO,EAGT,IAAMC,EAAcF,EAAQC,GAG5B,GAAIA,IAASoC,EAAcpC,IAASC,GAAc,CAChD,IAAMV,EAAMD,EAAOG,GACfoB,EAAatB,EAGbU,IAAgBF,EAAQR,GAC1BsB,EAAQ,GACEZ,GAAgBmC,EAAc7C,KACxCsB,EAAQ,CAAC,GAIXvB,EAAOG,GAAOyD,EAAWrC,EAAOb,EACjC,MACCV,EAAOG,GAAOO,CACf,GACD,IAIGV,CAAa,EAOT6D,EAAiB,SAAA7D,GAE5B,IAAK,IAAMC,KAAQD,EAAK,OAAO,EAC/B,OAAO,CAAI,EChFP8D,EAAa,SACjB9D,EACAC,EACAE,EACAO,GAEA,GAAIwB,EAAYxB,GACd,OAAOP,EAAMA,EAAIH,GAAWC,EAE9BE,IAAQK,EAASE,IAAU+B,EAAS/B,MAAYP,EAAIH,GAAWU,EAAM,EAU1DqD,EAAQ,SACnB/D,EACAC,EACAE,GAEA,GAAI+B,EAAY/B,GACd,OAAOH,EAAMA,EAAIgE,aAAa/D,GAAY,KAE5CD,GAAOA,EAAIiE,aAAahE,EAAUE,EAAM,EAQ7B+D,EAAa,SAAClE,EAAyCC,GAClED,GAAOA,EAAImE,gBAAgBlE,EAAS,EAUzBmE,EAAY,SACvBpE,EACAC,EACAE,EACAO,GAEA,GAAIP,EAAO,CACT,IAAMQ,EAAaoD,EAAK/D,EAAKC,IAAa,GACpCsB,EAAgB,IAAIiC,IAAI7C,EAAW0D,MAAM,MAC/C9C,EAAcb,EAAM,MAAQ,UAAUP,GACtC,IAAMiB,EAAYmC,EAAKhC,GAAe+C,KAAK,KAAKC,OAChDR,EAAK/D,EAAKC,EAAUmB,EACrB,GAyBUoD,EAAc,SACzBxE,EACAC,GAAA,OACkB6D,EAAW,aAAc,EAAG9D,EAAKC,EAAA,EAOxCwE,EAAa,SACxBzE,EACAC,GAAA,OACkB6D,EAAW,YAAa,EAAG9D,EAAKC,EAAA,EC7G9CS,EAAmBiB,KAAcwB,QAAQpB,UAOzC2C,EAAO,SAAC1E,EAAkBC,GAC9B,IAAME,EAAsB,GACtBO,EAAUT,EAAOiD,EAAUjD,GAAOA,EAAM,KAAQ0E,SAEtD,OAAOjE,EAAU2C,EAAKlD,EAAKO,EAAQkE,iBAAiB5E,IAAaG,CAAG,EAmBhE0E,EAAK,SAAC7E,EAAuBC,GACjC,QAAIiD,EAAUlD,KAKVU,EAAgBoE,SAAWpE,EAAgBqE,mBACnCzC,KAAKtC,EAAKC,EAEV,EAuBR+E,EAAY,SAAAhF,GAAA,OAChBA,EAAMuD,EAAKvD,EAAIiF,YAAc,IAMzBC,EAAU,SAAAlF,GAAA,OAA8CA,EAAMA,EAAImF,cAAgB,MAElFC,EAAU,SAACpF,EAAuBC,GACtC,GAAIiD,EAAUlD,GAAM,CAClB,IAAMG,EAAYO,EAAgB0E,QAClC,GAAIjF,EACF,OAAOA,EAAUmC,KAAKtC,EAAKC,GAG7B,EAAG,CACD,GAAI4E,EAAG7E,EAAKC,GACV,OAAOD,EAETA,EAAMkF,EAAOlF,EACN,OAAAA,EACV,CAED,OAAO,IAAI,EASPqF,EAAc,SAClBrF,EACAC,EACAE,GAEA,IAAMO,EAAyBV,GAAOoF,EAAQpF,EAAKC,GAC7CU,EAAyBX,GAlFf,SAACA,EAAkBC,GACnC,IAAME,EAAUF,EAAOiD,EAAUjD,GAAOA,EAAM,KAAQ0E,SAEtD,OAAOxE,EAAUA,EAAQmF,cAActF,GAAY,IAAI,CA+EjBuF,CAAUpF,EAAsBO,GAChEa,EACJ6D,EAAQzE,EAAwBV,KAA0BS,EAE5D,SAAOA,IAA0BC,KAC7BD,IAA2BV,GACzBW,IAA2BX,GAC1BuB,GACC6D,EAAQA,EAAQpF,EAAKG,GAAuBF,KAC1CS,EACD,EC1GL8E,EAAS,SACbxF,EACAC,EACAE,GAEA,GAAIA,GAAgBH,EAAW,CAC7B,IACIW,EADAD,EAA0CT,EAG1CC,EAAYC,IACdQ,EAAWgE,SAASc,yBAGpB1F,EAAKI,GAAe,SAAAH,GACdA,IAAgBU,IAClBA,EAASV,EAAY0F,iBAEvB/E,EAAUgF,YAAY3F,EAAY,KAGpCW,EAAWR,EAITF,IACGS,EAEMA,IAAWT,IACpBS,EAASA,EAAOkF,aAFhBlF,EAASV,EAAU6F,YAMvB7F,EAAU8F,aAAanF,EAAUD,GAAU,KAC5C,GAQUqF,GAAiB,SAC5B/F,EACAC,GAEAuF,EAAOxF,EAAM,KAAMC,EAAS,EAgCjB+F,GAAc,SACzBhG,EACAC,GAEAuF,EAAON,EAAOlF,GAAOA,GAAQA,EAAK4F,YAAa3F,EAAc,EAOlDgG,GAAkB,SAAlBA,EAAkBjG,GAC7B,GAAIE,EAAYF,GACdD,EAAKwD,EAAKvD,IAAS,SAAAA,GAAA,OAAMiG,EAAejG,EAAA,SACnC,GAAIA,EAAO,CAChB,IAAMC,EAAYiF,EAAOlF,GACrBC,GACFA,EAAUiG,YAAYlG,EAEzB,GCpGUmG,GAAa,SAAAnG,GACxB,IAAMC,EAAM0E,SAASyB,cAAc,OAInC,OAHIpG,GACF+D,EAAK9D,EAAK,QAASD,GAEdC,CAAG,EAOCoG,GAAa,SAAArG,GACxB,IAAMC,EAAakG,KAGnB,OAFAlG,EAAWqG,UAAYtG,EAAKuE,OAErBxE,EAAKiF,EAAS/E,IAAc,SAAAD,GAAA,OAAQiG,GAAejG,EAAA,GAAK,ECnB3DuG,GAAsB,SAAAvG,GAAwB,OAAAA,EAAIwG,OAAO,GAAGC,cAAgBzG,EAAI0G,MAAM,IAK/E/F,GAAqC,CAAC,WAAY,QAAS,MAAO,QAClEY,GAAoC,CAC/C,SACA,MACA,IACA,KACA,SACA,MACA,IACA,MAGWH,GAAkC,CAAC,EACnCK,GAAsC,CAAC,EAMvCkF,GAAe,SAAA3G,GAC1B,IAAIC,EAA6BwB,GAASzB,GAE1C,GAAIiC,EAAeR,GAAUzB,GAC3B,OAAOC,EAGT,IAAME,EAAyBoG,GAAmBvG,GAC5CU,EA/ByCyF,KAAY5F,MAiD3D,OAhBAR,EAAKY,IAAc,SAAAA,GACjB,IAAMY,EAA8BZ,EAAO4B,QAAQ,KAAM,IACnDnB,EAAqC,CACzCpB,EACAW,EAASX,EACTuB,EAAsBpB,EACtBoG,GAAmBhF,GAAuBpB,GAI5C,QAASF,EAASmB,EAAoBsD,MACnC,SAAA1E,GAAA,gBAA8BU,EAASV,EAAA,IACxC,IAIIyB,GAASzB,GAAQC,GAAU,EAAE,EA0C1B2G,GAAkB,SAAA5G,GAC7B,GAAI2B,IAAY,CACd,IAAI1B,EAAcmB,GAAQpB,IAASY,OAAOZ,GAE1C,OAAIiC,EAAeb,GAASpB,KAI5BD,EAAKwB,IAAa,SAAApB,GAEhB,QADAF,EAASA,GAAUW,OAAOT,EAASoG,GAAmBvG,IACxC,IAGhBoB,GAAQpB,GAAQC,GARPA,CAUV,GC7GUyB,GAA8BkF,GAA+B,oBAC7DC,GACXD,GAAmC,wBACxBvF,GAA4BuF,GAA6B,kBACzDE,GAAMF,GAAmC,wBACzCG,GAAMH,GAAoC,yBAC1CtF,GAAQK,KAAcf,OAAOoG,WAI7BC,GAAUtF,KAAcf,OAAOsG,aCNtCC,GAAgB,oBAChBC,GAAkB,SACtBpH,EACAC,EACAE,GAEA,IACIQ,EADED,EAAYV,GAAQA,EAAgBqH,UAEtC9F,EAAI,EACJH,GAAS,EAEb,GAAIV,GAAaT,GAAaO,EAASP,GAAY,CACjD,IAAMD,EAAyBC,EAAUqH,MAAMH,KAAkB,GAEjE,IADA/F,EAASpB,EAAQI,OAAS,EAClBO,EAAQX,EAAQuB,MACtBH,IAAWjB,EAAOO,EAAWC,IAAUS,CAE1C,CACD,OAAOA,CAAM,EAgBFmG,GAAc,SAACvH,EAA6BC,GACvDmH,GAAgBpH,EAAKC,GAAW,SAACD,EAAWC,GAAA,OAAUD,EAAUwH,OAAOvH,EAAA,GAAO,EASnEwH,GAAW,SAACzH,EAA6BC,GAEpD,OADAmH,GAAgBpH,EAAKC,GAAW,SAACD,EAAWC,GAAA,OAAUD,EAAU0H,IAAIzH,EAAA,IAC7DsH,GAAYI,KAAK,EAAG3H,EAAKC,EAAU,EC3C/B2H,ICPGC,KAARC,IDOa,SACnB9H,EACAC,EACAE,EACAO,GAEA,GAAIV,GAAKC,EAAG,CACV,IAAIU,GAAS,EAQb,OAPAZ,EAAKI,GAAQ,SAAAA,IACMO,EAAeA,EAAaV,EAAEG,IAASH,EAAEG,OACzCO,EAAeA,EAAaT,EAAEE,IAASF,EAAEE,MAExDQ,GAAS,EACV,IAEIA,CACR,CACD,OAAO,CAAK,GASDoH,GAAU,SAAI/H,EAAWC,GAAA,OAAc2H,GAAa5H,EAAGC,EAAG,CAAC,IAAK,OAQhE+H,GAAU,SAAIhI,EAAWC,GAAA,OAAc2H,GAAa5H,EAAGC,EAAG,CAAC,IAAK,OAQhEgI,GAAY,SAACjI,EAAUC,GAAa,OAAA2H,GAAY5H,EAAGC,EAAG,CAAC,IAAK,IAAK,IAAK,OAStEiI,GAAa,SAAClI,EAAaC,EAAaE,GAAA,OACnDyH,GAAe5H,EAAGC,EAAG,CAAC,QAAS,UAAWE,GAAW,SAAAH,GAAA,OAAU6H,KAAKM,MAAMnI,EAAA,IEhC/DoI,GAAO,aAOPC,GAAoB,SAAArI,GAC/B,IAAIC,EACEE,EAASH,EAAUsB,GAAOyF,GAC1BrG,EAAWV,EAAUiH,GAASH,GACpC,MAAO,CACJ,SAAAnG,GACCD,EAAST,GAETA,EAAKE,EAAOQ,EAAUgC,EAAW3C,GAAWA,IAAYA,EAAQ,EAElE,kBAAMU,EAAST,EAAA,EAC+C,EAQrDqI,GAAW,SACtBtI,EACAC,GAEA,IAAIE,EACAO,EACAC,EACAY,EAAoB6G,GACxBG,EAA8CtI,GAAW,CAAC,EAAlDmB,EAAQmH,EAAVpB,EAAY1F,EAAA8G,EAAFC,EAAa9G,EAAA6G,EAAFE,EAErB5B,EAA2B,SAAU5G,GACzCsB,IACA0F,GAAO9G,GACPA,EAAeO,OAAgB,EAC/Ba,EAAQ6G,GAGRpI,EAAmBsD,MAAMoF,KAAMzI,IAG3B0I,EACJ,SAAA3I,GAEA,OAAA0B,GAAgBhB,EAAgBgB,EAAahB,EAAeV,GAAQA,CAAA,EAEhE4I,EAAQ,WAERrH,IAAU6G,IACZvB,EAAyB8B,EAAWhI,IAAqBA,EAC1D,EAGGU,EAAc,WAElB,IAAMrB,EAAuCuD,EAAKsF,WAC5C5I,EAAe0C,EAAWvB,GAAYA,IAAaA,EACnDM,EAAae,EAASxC,IAAiBA,GAAgB,EAE7D,GAAIyB,EAAY,CACd,IAAMN,EAAeuB,EAAWlB,GAAaA,IAAcA,EACrDC,EAAae,EAASrB,IAAiBA,GAAgB,EACvDC,EAAepB,EAAe,EAAIqB,GAAOyF,GACzCI,EAAiBlH,EAAe,EAAIgH,GAASH,GAC7C0B,EAAoBG,EAAW3I,GAC/B8I,EAAcN,GAAqBxI,EACnCyI,EAAc5B,EAAyBc,KAAK,EAAGmB,GAMrDvH,IAEA,IAAMwH,EAAY1H,EAAaoH,EAAaxI,GAC5CsB,EAAQ,kBAAM4F,EAAe4B,EAAA,EAEzBrH,IAAevB,IACjBA,EAAemB,GAAKsH,EAAOxH,IAG7BV,EAAgBC,EAAkBmI,CACnC,MACCjC,EAAyB7G,IAK7B,OAFAqB,EAAYJ,EAAS2H,EAEdvH,CAA4C,EhBhH/CyH,GAAY,CAYhBE,QAAS,EACTC,OAAQ,GAGJC,GAAsB,SAAClJ,EAAeC,GAE1C,IAAME,EAAMF,EAAUkJ,WAAWnJ,GAASoJ,SAASpJ,EAAO,IAG1D,OAAOG,IAAQA,EAAMA,EAAM,CAAC,EAMxBW,GAAY,SAACd,EAAkBC,EAAoCE,GAEtD,aAAjBF,EACIA,EAAcE,IAASF,EAAcoJ,iBAAiBlJ,GACtDH,EAAIO,MAAMJ,EAAA,EAEVa,GAAY,SAAChB,EAAkBC,EAAcE,GACjD,IACE,IAAeO,EAAaV,EAApBO,MACH2B,EAAYxB,EAAST,IAGxBS,EAAS4I,YAAYrJ,EAAME,GAF3BO,EAAST,GAbK,SAACD,EAAcC,GAChC,OAAA6I,GAAU9I,EAAKwC,gBAAkBC,EAASxC,GAAU,GAAAoC,OAAApC,EAAU,MAAAA,CAAA,CAY1CsJ,CAAYtJ,EAAME,EAIzB,CAAZ,MAAOO,GAAK,GAwCH8I,GAAkB,SAAAxJ,GAAA,MACD,QAA5BO,EAAMP,EAAK,cAQAyJ,GAAqB,SAChCzJ,EACAC,EACAE,GAEA,IAAMO,EAAcT,EAAoB,GAAAoC,OAAApC,EAAoB,QACtDU,EAAcR,EAAqB,IAAAkC,OAAAlC,GAAmB,GACtDoB,EAAA,GAAAc,OAAS3B,EAAiB,OAAA2B,OAAA1B,GAC1BS,EAAA,GAAAiB,OAAW3B,EAAmB,SAAA2B,OAAA1B,GAC9Bc,EAAA,GAAAY,OAAY3B,EAAoB,UAAA2B,OAAA1B,GAChCe,EAAA,GAAAW,OAAU3B,EAAkB,QAAA2B,OAAA1B,GAC5BkG,EAAStG,EAAMP,EAAK,CAACuB,EAAKH,EAAOK,EAAQC,IAC/C,MAAO,CACL1B,EAAGkJ,GAAoBrC,EAAOtF,IAAM,GACpCH,EAAG8H,GAAoBrC,EAAOzF,IAAQ,GACtC2H,EAAGG,GAAoBrC,EAAOpF,IAAS,GACvCC,EAAGwH,GAAoBrC,EAAOnF,IAAO,GACtC,EiB/GK+G,GAAUZ,KAAVM,MAGFY,GAAc,CAClBD,EAAG,EACH7B,EAAG,GAeQyC,GAAc,SAAA1J,GAAA,OACzBA,EACI,CACE8I,EAAG9I,EAAI2J,YACP1C,EAAGjH,EAAI4J,cAETb,EAAA,EAMOc,GAAc,SAAA7J,GAAA,OACzBA,EACI,CACE8I,EAAG9I,EAAI8J,YACP7C,EAAGjH,EAAI+J,cAEThB,EAAA,EAMOiB,GAAc,SAAAhK,GAAA,OACzBA,EACI,CACE8I,EAAG9I,EAAIiK,YACPhD,EAAGjH,EAAIkK,cAETnB,EAAA,EAMOoB,GAAkB,SAAAnK,GAC7B,IAAMC,EAAYkJ,WAAW5I,EAAMP,EAAK,YAAc,EAChDG,EAAWgJ,WAAW5I,EAAMP,EAAK,WAAa,EACpD,MAAO,CACL8I,EAAG3I,EAAWsI,GAAMtI,GACpB8G,EAAGhH,EAAYwI,GAAMxI,GACtB,EAOUmK,GAAyB,SAAApK,GAAA,OAA8BA,EAAIoK,uBAAA,EfpDlEC,GAAmB,SAAArK,GAAuB,OAAAA,EAAWqE,MAAM,MAepDiG,GAAM,SACjBtK,EACAC,EACAE,EACAO,GAEAX,EAAKsK,GAAgBpK,IAAc,SAAAA,GACjCD,EAAOuK,oBAAoBtK,EAAWE,EAA2BO,EAAQ,GACzE,EAUS8J,GAAK,SAChBxK,EACAC,EACAE,EACAO,GACgB,IAAAC,EACVY,EA3DqB,WAC3B,GAAIW,EAAYjB,GAAuB,CACrCA,GAAuB,EACvB,IAGEL,OAAO6J,iBACL,OACA,KACApK,OAAOqK,eAAe,CAAE,EAAE,UAAW,CACnCC,IAAA,WACE1J,GAAuB,CACzB,IAIQ,CAAZ,MAAOjB,GAAK,CACf,CACD,OAAOiB,CAAoB,CAyCI2J,GACzBxJ,EAAgE,OAArDT,EAAAY,GAA0Bb,GAAWA,EAAQmK,GAAQlK,EAAKY,EACrEE,EAAWf,GAAWA,EAAQoK,IAAa,EAC3CpJ,EAAQhB,GAAWA,EAAQqK,IAAU,EACrClE,EAA+B,GAC/BxF,EAAmDE,EACrD,CACEyJ,QAAA5J,EACA6J,QAAAxJ,GAEFA,EAgBJ,OAdA1B,EAAKsK,GAAgBpK,IAAc,SAAAA,GACjC,IAAMS,EACJgB,EACK,SAAAf,GACCX,EAAOuK,oBAAoBtK,EAAWS,EAAee,GACrDtB,GAAYA,EAASQ,EAEvB,EAAAR,EAGNkD,EAAKwD,EAAcyD,GAAI3C,KAAK,KAAM3H,EAAQC,EAAWS,EAAee,IACpEzB,EAAOyK,iBAAiBxK,EAAWS,EAAeW,EAAc,IAG3DsC,EAAgBgE,KAAK,EAAGd,EAAa,EAOjCqE,GAAmB,SAAAlL,GAAA,OAAqBA,EAAIkL,iBAAA,EAM5CC,GAAkB,SAAAnL,GAAA,OAAqBA,EAAImL,gBAAA,EgB/FlDC,GAAc,CAClBC,EAAG,EACHD,EAAG,GAOQE,GAAuB,SAAAtL,GAClC,IAAMC,EAAOD,EAAMoK,GAAsBpK,GAAO,EAChD,OAAOC,EACH,CACEoL,EAAGpL,EAAKsL,KAAO3K,OAAO4K,YACtBJ,EAAGnL,EAAKwL,IAAM7K,OAAO8K,aAEvBN,EAAO,ECkBPO,GAAiB,SACrB3L,EACAC,GAEAF,EAAKU,EAAQR,GAAYA,EAAW,CAACA,GAAWD,EAAS,EAG9C4L,GACX,SAAA5L,GAEA,IAAMC,EAAS,IAAI4L,IAEbC,EAAsC,SAAC9L,EAAMG,GACjD,GAAIH,EAAM,CACR,IAAMU,EAAWT,EAAO0K,IAAI3K,GAC5B2L,IAAgB,SAAA3L,GACVU,GACFA,EAASV,EAAe,SAAW,SAASA,EAE7C,GAAAG,EACE,MACLF,EAAOwD,SAAS,SAAAzD,GACdA,EAAS+L,OAAO,IAElB9L,EAAO8L,OACR,EAGGC,EAAiC,SAAjCA,EACJhM,EACAG,GAKA,GAAIK,EAASR,GAAuB,CAClC,IAAMU,EAAWT,EAAO0K,IAAI3K,IAAyB,IAAIwD,IAOzD,OANAvD,EAAOgM,IAAIjM,EAAsBU,GAEjCiL,IAAgB,SAAA3L,GACd2C,EAAW3C,IAAiBU,EAASgH,IAAI1H,EACxC,GAAAG,GAEI2L,EAAYnE,KAAK,EAAG3H,EAA6BG,EACzD,CACGuC,EAAUvC,IAAmBA,GAC/B2L,IAGF,IAAMpL,EAAoBJ,EAAKN,GACzBW,EAAyB,GAM/B,OALAZ,EAAKW,GAAoB,SAAAT,GACvB,IAAME,EAAiBH,EAAmDC,GAC1EE,GAAiBkD,EAAK1C,EAAQqL,EAAS/L,EAAKE,GAAe,IAGtDwD,EAAgBgE,KAAK,EAAGhH,EAAO,EAiBxC,OAFAqL,EAAShM,GAAyB,CAAC,GAE5B,CAACgM,EAAUF,EAd4B,SAAC9L,EAAMG,GACnD,IAAMO,EAAWT,EAAO0K,IAAI3K,GAE5BD,EAAKwD,EAAK7C,IAAY,SAAAV,GAChBG,IAASuD,EAAavD,GACvBH,EAA6DsD,MAAM,EAAGnD,GAEtEH,GACF,GACD,EAKwC,ECtGxCkM,GAAgB,SAAAlM,GACpB,OAAAmM,KAAKC,UAAUpM,GAAO,SAACA,EAAGC,GACxB,GAAI0C,EAAW1C,GACb,MAAM,IAAIoM,MAEZ,OAAOpM,CAAG,KAyHD4K,GAA0B,CACrCyB,iBAAiB,EACjBC,8BAA8B,EAC9BC,OAAQ,CACNC,cAAe,CAAC,CAAC,MAAO,SACxBnE,SAAU,CAAC,EAAG,IACdoE,WAAY,KACZC,eAAgB,MAElBC,SAAU,CACRvB,EAAG,SACHD,EAAG,UAELyB,WAAY,CACVC,MAAO,gBACPC,WAAY,OACZC,SAAU,QACVC,cAAe,KACfC,YAAY,EACZC,aAAa,EACbC,SAAU,CAAC,QAAS,QAAS,SAIpBC,GAAiB,SAAjBA,EAAqBrN,EAAgBC,GAChD,IAAME,EAAuB,CAAC,EA8B9B,OA3BAJ,EAFoBO,EAAKL,GAAYoC,OAAO/B,EAAKN,KAE9B,SAAAU,GACjB,IAAMC,EAAkBX,EAAYU,GAC9Ba,EAAiBtB,EAAWS,GAElC,GAAImC,EAASlC,IAAoBkC,EAAStB,GACxCqC,EAAYzD,EAAKO,GAAa,CAAC,EAAI2M,EAAe1M,EAAiBY,IAE/DsC,EAAc1D,EAAKO,YACdP,EAAKO,QAET,GAAIuB,EAAehC,EAAYS,IAAca,IAAmBZ,EAAiB,CACtF,IAAIX,GAAS,EAEb,GAAIS,EAAQE,IAAoBF,EAAQc,GACtC,IACM2K,GAAavL,KAAqBuL,GAAa3K,KACjDvB,GAAS,EAEH,CAAR,MAAAoB,IAAQ,CAGRpB,IACFG,EAAKO,GAAaa,EAErB,KAGIpB,CAAI,EChMAkL,GAAuB,iBACvBP,GAAA,GAAAzI,OAAqCgJ,GAAA,iBACrCN,GAAA,GAAA1I,OAAwCyI,GAAA,QAGxCwC,GAAA,sBAGAC,GAA0B,oCAG1BC,GAAoB,yBACpBC,GAAA,GAAApL,OAAgCmL,GAAA,eAChCE,GAAA,GAAArL,OAAgCmL,GAAA,eAChCG,GAA+B,kBAE/BC,GAAgC,mBAChCC,GAAwB,WAGxBC,GAAwB,kCACxBC,GAA2B,UAC3BC,GAAmC,kBACnCC,GAAmCN,GAGnCO,GAAuB,iCAIvBC,GAAuB,iCAGvBC,GAAwB,mBACxBC,GAAA,GAAAhM,OAAiC+L,GAAA,WACjCE,GAAA,GAAAjM,OAAmC+L,GAAA,aAEnCG,IADA,GAAAlM,OAAyCiM,GAAA,WACzC,GAAAjM,OAAuCiM,GAAA,UASvCE,IARA,GAAAnM,OAA4CkM,GAAA,UAQvB,gBACrBE,GAAA,GAAApM,OAA2BmM,GAAA,QAC3BE,GAAA,GAAArM,OAAkCmM,GAAA,eAClCG,GAAA,GAAAtM,OAAgCmM,GAAA,aAChCI,GAAA,GAAAvM,OAA6BmM,GAAA,UAC7BK,GAAA,GAAAxM,OAA8BmM,GAAA,WAC9BM,GAAA,GAAAzM,OAA+BmM,GAAA,YAC/BO,GAAA,GAAA1M,OAAkCmM,GAAA,eAClCQ,GAAA,GAAA3M,OAAsCmM,GAAA,mBACtCS,GAAA,GAAA5M,OAAmCmM,GAAA,gBACnCU,GAAA,GAAA7M,OAAgCmM,GAAA,aAChCW,GAAA,GAAA9M,OAAkCmM,GAAA,gBAClCY,GAAA,GAAA/M,OAA6BmM,GAAA,UAC7Ba,GAAA,GAAAhN,OAAwCuM,GAAA,gBACxCU,GAAA,GAAAjN,OAAyCwM,GAAA,gBCzChDU,GAAiD,CAAC,EAE3CC,GAAa,WAAb,OAAmBD,EAAA,ECUnBE,GAAyB,yBCmCzBC,IAjBU7H,KAAvBM,MAAuBN,KAAR8H,IAiB2B,8BCtD7BC,GAAwB,wBtBuF/BC,GAAyB,SAC7B7P,EACAC,EACAE,EACAO,GAEAqF,GAAe/F,EAAMC,GAErB,IAAMU,EAAQkJ,GAAW5J,GACnBsB,EAAQmI,GAAWzJ,GACnBmB,EAAQ+I,GAAehK,GAI7B,OAFAO,GAASuF,GAAehG,GAEjB,CACLoL,EAAG9J,EAAM0F,EAAItG,EAAMsG,EAAI7F,EAAM6F,EAC7BmE,EAAG7J,EAAMuH,EAAInI,EAAMmI,EAAI1H,EAAM0H,EAC9B,EAgBGgH,GAAuB,SAC3B9P,EACAC,GAEA,IAAME,EAAY,SAClBI,EAAMP,EAAW,CAAE+P,UAAW5P,EAAW6P,UAAW7P,EAAW8P,UAAW,QAC1EzL,EAAWxE,EAAW,GAEtB,IAAMU,EAAe4K,GAAoBtL,GACnCW,EAAc2K,GAAoBrL,GACxCuE,EAAWxE,GAAY,KACvB,IAAMuB,EAAyB+J,GAAoBrL,GACnD,MAAO,CAOLwB,EAAGf,EAAa2K,IAAM1K,EAAY0K,EAOlCpL,EAAGU,EAAY0K,IAAM9J,EAAuB8J,EAC7C,EAGG6E,GAAiB,SAAClQ,EAAwBC,GAC9C,IAAME,EAAgBsH,GAASzH,EAAW8K,IACpCpK,EAAsB0J,GAAsBpK,GAC5CW,EAAgByJ,GAAsBnK,GACtCsB,EAAc2G,GAAWvH,EAAeD,GAAqB,GAE7DU,EAAmBqG,GAASzH,EAAW+K,IACvCtJ,EAAsB2I,GAAsBpK,GAC5C0B,EAAgB0I,GAAsBnK,GACtC4G,EAAcqB,GAAWxG,EAAeD,GAAqB,GAKnE,OAHAtB,IACAiB,IAEOG,GAAesF,CAAW,EAG7BsJ,GAAoB,WACxB,IA4EMnQ,EA5EEA,EAAS2E,SAAXyL,KAEAjQ,EADSkG,GAAA,eAAAhE,OAAyBgJ,GAAA,wBAClB,GAChB3K,EAAcP,EAAO0F,WAC3BwK,EAAmCzE,KAAA0E,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAA5B1P,EAAA2P,EAAA,GAAY/O,EAAgB+O,EAAA,GACnCE,EAAsErP,EACpE,CACEhB,EAAe0P,GAAuB7P,EAAMG,EAAQO,GACpDW,EAAQ2G,IAEV6H,GAAuBlI,KAAK,EAAG3H,EAAMG,EAAQO,GAAa,IAAA+P,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GALrDpP,EAAAqP,EAAA,GAOPC,GAA+BjP,EAPQgP,EAAA,MAOhC/O,GAAwB6O,EAAAA,EAAAA,GAAAG,EAAA,MACzB7J,EA1E2B,SAAA7G,GACjC,IAAIC,GAAS,EACPE,EAAcsH,GAASzH,EAASsN,IACtC,IACErN,EACqD,SAAnDM,EAAMP,EAAS2G,GAAY,qBAEzB,SADF/F,OAAOC,iBAAiBb,EAAS,uBAAuBqJ,iBAAiB,UAE9D,CAAb,MAAO3I,GAAM,CAEf,OADAP,IACOF,CAAM,CAgEkB0Q,CAA0BxQ,GACnDkB,EAA2B,CAC/BgK,EAA8B,IAA3B3J,EAAqB2J,EACxBD,EAA8B,IAA3B1J,EAAqB0J,GAEpBtE,EAA8C,CAClD8J,SAAU,CACRC,KAAM,KACNC,SAAUjK,EACVkK,SAAW,SAAA/Q,GACT,OAAA6G,GAA0B7G,IAAWA,EAAOgR,cAAcZ,MAAQpQ,CAAA,EACpEiR,SAAS,GAEXpE,WAAY,CACVqE,MAAM,GAERC,OAAQ,CACNC,0BAA0B,EAC1BhB,KAAM,OAGJrJ,EAAuBnD,EAAW,CAAE,EAAEiH,IACtCvJ,EAAqBsC,EAAmD+D,KAC5E,EACA,CAAC,EACDZ,GAEIE,EACJrD,EACA+D,KAAK,EAAG,CAAC,EAAqBb,GAE1BK,EAA2B,CAC/B8G,EAAuBvM,EACvBiM,EAA2BtM,EAC3BqM,EAAyB7G,EACzBwK,EAAkD,OAA5B9Q,EAAMJ,EAAQ,UACpC+N,EAAoB4B,GAAqB3P,EAAQO,GACjD4Q,EAAcpB,GAAe/P,EAAQO,GACrCyN,EAAkBxN,EAASgH,KAAK,EAAG,KACnCyG,EAAoBzN,EAASgH,KAAK,EAAG,KACrC0G,EAA2BpH,EAC3BqH,EAA4B,SAAAtO,GAAA,OAC1B4D,EAAWkD,EAA6B9G,IACxCiH,GAAA,EACFsK,EAAoBjQ,EACpBiN,EAAqB,SAAAvO,GAAA,OACnB4D,EAAWmD,EAAsB/G,IAAsBsB,GAAA,EACzDkQ,EAA8B5N,EAAW,CAAE,EAAEkD,GAC7C2K,EAAuB7N,EAAW,CAAE,EAAEmD,IAElCyB,EAAyB5H,OAAO6J,iBAChC3B,EAAwBR,IAAU,SAAAtI,GAAA,OAAkBuB,EAAavB,EAAO,IAAM,IAAM,IACxFmH,EAAU,GACVqB,EAAW,MAGbtE,EAAW/D,EAAQ,SACnB8F,GAAe9F,GAGfqI,EAAuB,SAAUM,EAAsBnB,KAAK,GAAG,IAE1Dd,GAA4BxF,EAAyBgK,GAAMhK,EAAyB+J,IAEvF5C,EAAuB,UAAU,WAC/B,IAAMvI,EAAyBuP,KAAaE,KAI5C1P,EAAWA,GAAaC,GAA0BA,EAAuB+N,MAEvEhO,EAASmH,EAAK/F,EAAgC0H,EAAsBnB,KAAK,GAAG,GAAM,IAIxF,OAAOR,CAAG,EAGNuK,GAAiB,WAIrB,OAHKxQ,IACHA,EAAsBiP,MAEjBjP,CAAmB,EuB5KfyQ,GAAwB,SACnC3R,EACAC,GAAA,OACO0C,EAAW1C,GAASA,EAAMqD,MAAM,EAAGtD,GAAQC,CAAA,EAEvC2R,GAA8B,SACzC5R,EACAC,EACAE,EACAO,GAEA,IAAMC,EAAuBuB,EAAYxB,GACrCP,EACAO,EAKJ,OAJ+BiR,GAC7B3R,EACAW,IAE+BV,EAAoCqD,MAAM,EAAGtD,EAAK,EAGxE6R,GAA+B,SAC1C7R,EACAC,EACAE,EACAO,GAEA,IAAMC,EAAwBuB,EAAYxB,GACtCP,EACAO,EACEa,EAAyBoQ,GAC7B3R,EACAW,GAEF,QACIY,IACDwB,EAAcxB,GACXA,EACAtB,EAAqCqD,MAAM,EAAGtD,GAAM,EC5ItD8R,GAAyD,IAAIC,QAuBtDC,GAAe,SAAAhS,GAC1B,OAAA8R,GAAkBnH,IAAI3K,EAAA,ECKlBiS,GAAgB,SAAIjS,EAAUC,GAAA,OAClCD,EACIC,EAAKoE,MAAM,KAAKtD,QAAO,SAACf,EAAGC,GAAA,OAAUD,GAAKiC,EAAejC,EAAGC,GAAQD,EAAEC,QAAA,CAAQ,GAAYD,QAC1F,GAEOkS,GACX,SACElS,EACAC,EACAE,GAED,gBAAAO,GAAA,MACC,CAACuR,GAAcjS,EAASU,GAAOP,QAAiD,IAAxC8R,GAAchS,EAAgBS,GAAA,GAE7DyR,GAA8C,SAAAnS,GACzD,IAAIC,EAAWD,EACf,MAAO,CACL,kBAAMC,CACL,WAAAD,GACCC,EAAQ2D,EAAW,CAAC,EAAG3D,EAAOD,EAAS,EAE1C,EC6BGoS,GAAc,WACdC,GAAelM,GAAUwB,KAAK,EAAG,IAEjC2K,GAAU,SAAAtS,GACd+F,GAAeb,EAAOlF,GAAMgF,EAAShF,IACrCiG,GAAejG,EAAI,EAGRuS,GACX,SAAAvS,GAEA,IAAMC,EAAMyR,KACJvR,EAAuDF,EAAzDoO,EAA6B3N,EAA4BT,EAA9ByN,EAC3B/M,EAAyB6O,KAAaE,IAGtCnO,EACJZ,GAA0BA,EAAuB6M,EACjCpM,EAAwBjB,IAAlCyQ,SAEAnP,EAIJL,EAJFyP,KACSnP,EAGPN,EAHF0P,QACUjK,EAERzF,EAFF2P,SACS1P,EACPD,EADF6P,QAEInK,EAAc/D,EAAc/C,GAC5B+G,EAAiCD,EAAc,CAAE,EAAG9G,EAE1DwS,EADmCzL,EAA3B6J,UAMY,CAAC,EAJb3J,EAAAuL,EAAN3B,KACS1J,EAAAqL,EAAT1B,QACUtI,EACVgK,EADAzB,SACSjI,EACP0J,EADFvB,QAGIxI,EAAgB3B,EAAc9G,EAAS+G,EAA8B0L,OACrE1J,EAAalE,EAAG4D,EAAe,YAC/BxH,EAAgBwH,EAAcuI,cAC9B5F,EAAanK,EAAcyR,gBAC3B7H,EAASpC,IAAkBxH,EAAcmP,KACzC/E,EAAMpK,EAAc0R,YACpB7H,EAA8B8G,GAAmCjK,KAAK,EAAG,CAACc,IAC1EsC,EAA+B8G,GAAoClK,KAAK,EAAG,CAACc,IAC5EkF,EAAwBgE,GAA6BhK,KAAK,EAAG,CAACc,IAC9D4I,EAA0BvG,EAA4BnD,KAC1D,EACA0K,GACAxL,GAEI+G,EAAyB7C,EAA6BpD,KAC1D,EACA0K,GACAhR,GAEIwM,EAA0BwD,EAAwB7I,GAClDuF,EAAmBF,IAA4BpF,EAC/CwF,EAAuBF,GAAoBlD,EAC3CyG,GAA0BvD,GAAoBH,EAAuB9E,GAKrEsF,GACHL,GACDhL,EAAc8K,IACdA,IAA4ByD,EACxBjD,EACJD,KAAuBT,EAAsBtM,GACzCiN,EAA6BD,EAC/BgD,IACAxD,EACE0D,EAA2BlD,EAC7BiD,EACA1D,IAIE4D,EAAkBvD,EAAuB7C,EAHhBgD,EAC3BE,EACAT,EAEE4D,EAAqB1I,EACvB+B,EAA4BuH,GAAc5Q,EAA2BwF,GACpEwB,EACCmK,EAAc3E,EAAuBuD,EAAkBC,EACvDoB,EAAiBzE,EAAoBmD,EAA2BD,EAChE9C,EAAYvN,EAAc6R,cAC1BrE,IAAoBV,GAAoB1C,EAAII,MAAQJ,GAAOmD,IAAc/F,EACzEiG,GAAgD,CACpDkE,EAASnK,EACToK,EAAOD,EACPpE,EAAWgD,EACX/C,GACGV,GACDhD,EACEsH,GACA3Q,EACAyF,GAEJwH,GAAUkE,EACVjE,IACGb,IACArN,GACDa,GACAA,EAAmCtB,GACrC4O,GAAsBZ,EAAuB7C,EAAaoG,EAC1D1C,GAAqBb,EAAuBhN,EAAgBuQ,EAC5DzC,GAAY1D,EACZ2D,GAAc/N,EACdgO,GAAalG,EACbmG,GAASrE,EACTsE,GAAcrI,EACduI,GAAmBtB,EACnBuB,GAAoBlB,EACpBmB,GAAmB,SAACvP,EAAoCC,GACtD,OtBzGsB,SAC1BD,EACAC,EACAE,GAEA,IAAMO,EAAaqD,EAAK/D,EAAKC,IAAa,GAE1C,OADsB,IAAIuD,IAAI9C,EAAW2D,MAAM,MAC1B0O,IAAI5S,EAAM,CsBkG3B6S,CACExB,EACAzD,EAAmBP,GAAoBM,GACvCC,EAAmB9N,EAAyBD,EAAA,EAEhDiT,GAAyB,SACvBjT,EACAC,EACAE,GAEA,OAAAiE,EACEoN,EACAzD,EAAmBP,GAAoBM,GACvCC,EAAmB9N,EAAyBD,EAC5CG,EAAA,GAGAwO,GAAoBrO,EAAKoO,IAAoB3N,QAAO,SAACf,EAAKC,GAC9D,IAAME,EAAQuO,GAAmBzO,GACjC,OAAOoD,EAAKrD,KAAKG,GAAU+E,EAAO/E,KAASA,EAC1C,OACG+S,GAAsB,SAAAlT,GAC1B,OAAAA,EAAMoD,EAAQuL,GAAmB3O,IAAQ,EAAI,MACvC4O,GAAoEF,GAAtEkE,EAAW/D,GAA2DH,GAA7DmE,EAAS/D,GAAoDJ,GAAtDD,EAAYM,GAA0CL,GAA5CF,EAAaQ,GAA+BN,GAAjCC,GAAYM,GAAqBP,GAAvBE,GAC/CM,GAA4B,CAChC,WAEEhL,EAAW2K,GAAOrB,IAClBtJ,EAAW2K,GAAOtB,IAClBrJ,EAAW0K,GAASrB,IAChB1C,IACF3G,EAAWkH,EAAYoC,IACvBtJ,EAAWkH,EAAYmC,IACxB,GAGC4B,GAA0BpG,GAAcmK,GAAmBrE,IAC7DO,GAAiBrG,EACjB6F,GACA5J,EACE,CAACgK,GAAUD,GAAWD,GAAUD,GAAOD,IAASlK,MAC7C,SAAA1E,GAAA,OAAoC,IAA5BkT,GAAmBlT,EAAA,KAG9BqP,GAAcpB,EAAuBW,GAAUI,IAAYD,GA+EjE,MAAO,CAACL,GA9Ee,WACrB3K,EAAK8K,GAAOrB,GAAmBO,EAAmB,WAAa,QAC/DhK,EAAK+K,GAAUZ,GAAsB,IACrCnK,EAAKiL,GAAUb,GAAsB,IAEhCJ,GACHhK,EAAKgL,GAAWjB,GAAuB,IAGzC,IAAM9N,EACJ6K,IAAWkD,EACPtG,GAASvC,EAAOuD,GAAgB6E,IAChClF,GA4CN,GAzCI+G,KACFnJ,GAAY4I,GAASC,IAErBxL,EAAK6L,IAAY,WACflJ,GAAY6I,GAAOD,IACnB3I,GAAe4I,GAAM,KAIzB9I,GAAesJ,GAAaD,IAC5BrJ,GAAe8I,GAAOC,IACtB/I,GAAe+I,IAAYD,IAAQd,GAAoBgB,IACvDhJ,GAAegJ,GAAWC,IAE1B3L,EAAK6L,IAAY,WACflP,IACAkE,EAAW4K,GAAUZ,IACrBhK,EAAW8K,GAAUb,IACrBjK,EAAW6K,GAAWtB,IACtBvJ,EAAW6K,GAAWrB,IACtBxJ,EAAW6K,GAAWjB,IAElBoF,GAAmBlE,KACrBsD,GAAOtD,IAELkE,GAAmBnE,KACrBuD,GAAOvD,IAELmE,GAAmBpE,KACrBwD,GAAOxD,GACR,IAGCpO,IAA4BqN,IAC9B3J,EAAU2K,GAAWjB,GAAuBE,IAAkC,GAC9E3K,EAAK6L,GAAYhL,EAAWyD,KAAK,EAAGoH,GAAWjB,MAE7CmB,MpBrNoB,SAC1BjP,EACAC,GAEAuF,EAAON,EAAOlF,GAAOA,EAAMC,EAAc,CoBkNrC6F,CAAaiJ,GAAWE,IACxB5L,EAAK6L,GAAYjJ,GAAe0B,KAAK,EAAGsH,MAEtCR,GAAkB,CACpB,IAAMzO,EAAa+D,EAAKgL,GAAWqD,IAEnCrO,EAAKgL,GAAWqD,GAAa,MAC7BrD,GAAUoE,QAEV,IAAMC,EAAyB,WAAzB,OACJpT,EAAa+D,EAAKgL,GAAWqD,GAAapS,GAAckE,EAAW6K,GAAWqD,GAAA,EAC1EnS,EAAMuK,GAAGvJ,EAAe,uBAAuB,WACnDmS,IACAnT,GAAK,IAGPoD,EAAK6L,GAAY,CAACkE,EAAwBnT,GACrC,MAAIuO,GAAcA,EAA0B2E,OAChD3E,EAA0B2E,QAI7B/D,GAAiB,CAAC,EAGwBzL,EAAgBgE,KAAK,EAAGuH,IAAY,ECnTrEmE,GAA2D,SACtErT,EACAC,GAEA,IAAQE,EAAaH,EAAf2O,GACCjO,GAAP6P,EAAAA,EAAAA,GAAmBtQ,EAAA,MAEnB,OAAQ,SAAAD,GACN,IAAQC,EAAiByR,KAAnBJ,EACE3Q,EAAqBD,IAAvB4S,GACE/R,EAA4BvB,EAA9BuT,GACAnS,GAA0BjB,IAAaF,IAAiBsB,EAQ9D,OANIH,GACFb,EAAMJ,EAAU,CACdqT,OAAQ7S,EAAmB,GAAK,SAI7B,CACL8S,GAAcrS,EACdsS,GAAkBtS,EACnB,CACF,ECtBUuS,GAA2D,SACtE3T,EACAC,GAEA,IAAA2T,GAAArD,EAAAA,EAAAA,GAA6BtQ,EAAA,GAAtBE,EAAAyT,EAAA,GAAUlT,EAAYkT,EAAA,GACrBjT,EAAgEX,EAAlE6S,EAAStR,EAAyDvB,EAA3DyO,EAAYrN,EAA+CpB,EAAjDwO,EAAgC/M,EAAiBzB,EAApCqP,GACpCwE,EAAkD1S,EAChD,CACEE,EAAQ4G,GACR9H,EAAesJ,MAEjBA,GAAmB9B,KAAK,EAAGhH,EAAO,UAAW,KAAAmT,GAAAvD,EAAAA,EAAAA,GAAAsD,EAAA,GALxCnS,EAAAoS,EAAA,GAAoBjN,EAAAiN,EAAA,GAQ3B,OAAO,SAAC9T,EAAaC,EAAaU,GAChC,IAAAoT,EAAgClN,EAAoBlG,GAAAqT,GAAAzD,EAAAA,EAAAA,GAAAwD,EAAA,GAA/C1S,EAAA2S,EAAA,GAASlN,EAAAkN,EAAA,GACdC,EAA2EvC,KAA1C3K,EAAuBkN,EAAhDvG,EAAkDpM,EAAiB2S,EAAnB3C,EAChDrK,EAAoB9G,IAAtB+T,GACE/M,EAAsDnH,EAAxDyT,GAAgBjL,EAAwCxI,EAA1C0T,GAAoB5K,EAAsB9I,EAAxBmU,GACtCC,EAAkDnU,EAAY,mBAAAoU,GAAA9D,EAAAA,EAAAA,GAAA6D,EAAA,GAAvD3L,EAAA4L,EAAA,GAAiBtL,EAAAsL,EAAA,GAGxB,GAAIlN,GAAgBL,IAFKxF,GAAgBkH,EAEH,KAAA8L,EACR5S,EAAmBf,GAAA4T,GAAAhE,EAAAA,EAAAA,GAAA+D,EAAA,GAA9CjT,EAAAkT,EAAA,GAASzN,EAAAyN,EAAA,GAGZ,IAAMnJ,GACH3J,IAAiBsH,GAA0BD,GAAqBhC,GAEnE,GAAIsE,EAAqB,CAEvB,IAAMpL,GAAmByI,IAAqBlH,IAAawF,EACrD9G,EAAoBoB,EAAQD,EAAIC,EAAQK,EACxCvB,EAAkBkB,EAAQrB,EAAIqB,EAAQ0H,EAEtCpI,EAA4B,CAChC6T,YAAaxU,IAAoBiH,GAAmBhH,EAAoB,EACxEwU,aAAczU,GAAmBG,EAAkB,EACnDuU,WAAY1U,GAAmBiH,GAAmBhH,EAAoB,EACtEwL,IAAKzL,GAAmBqB,EAAQrB,EAAI,EACpC2U,MAAO3U,EAAmBiH,GAAmB5F,EAAQD,EAAI,OAAU,EACnEmK,KAAMvL,EAAmBiH,EAAkB,QAAU5F,EAAQK,EAAK,EAClEkT,MAAO5U,EAAA,eAAAqC,OAAiCpC,EAAyB,WAE7DwB,EAA6B,CACjCoT,WAAY7U,EAAkBqB,EAAQrB,EAAI,EAC1C8U,aAAc9U,EAAkBqB,EAAQD,EAAI,EAC5C2T,cAAe/U,EAAkBqB,EAAQ0H,EAAI,EAC7CiM,YAAahV,EAAkBqB,EAAQK,EAAI,GAI7CnB,EAAMgB,GAAYH,EAAWT,GAC7BJ,EAAMa,EAAWK,GAEjBf,EAAS,CACP+N,EAAUpN,EACV4T,IAAmBjV,EACnB6N,EAAuBtM,EACnBE,EACAmC,EAAW,CAAE,EAAEjD,EAAcc,IAEpC,CAED,MAAO,CACLgO,GAAsBrE,EACvB,CACF,ECtBK8J,GAAQrN,KAARC,IACFqN,GAAOD,GAAIvN,KAAK,EAAG,GACnByN,GAAa,UACbC,GAAY,SAEZC,GAAiB,CACrBjU,EAAQ0G,GACR5H,EAAe,CAAE2I,EAAG,EAAG7B,EAAG,IAEtBsO,GAAiB,CACrBlU,EAAQ2G,GACR7H,EAAe,CAAEkL,EAAGgK,GAAWjK,EAAGiK,KAgB9BG,GAAqB,SAAAxV,GAAA,OAAsE,IAAzCA,EAAiBoD,QAAQgS,GAAA,EAOpEK,GAA4D,SACvEzV,EACAC,GAEA,IAAAyV,GAAAnF,EAAAA,EAAAA,GAA6BtQ,EAAA,GAAtBE,EAAAuV,EAAA,GAAUhV,EAAYgV,EAAA,GAE3B/U,EAQEX,EATE6S,EAEJtR,EAOEvB,EARGyO,EAELrN,EAMEpB,EAPMwO,EAER/M,EAKEzB,EANO4O,GAETlN,EAIE1B,EALcqP,GAEhBxI,EAGE7G,EAJeiT,GAEjB5R,EAEErB,EAHqBkP,GAEvBpI,EACE9G,EAFK+O,GAGT4G,EAKIjE,KAJF3K,EAAqB4O,EADjB1H,EAEJ3M,EAAAqU,EADqBrE,EAErBrK,EAAA0O,EADYjI,EAEZvG,EACEwO,EAFqBhI,EAGnBnF,EAAyBgH,KAAaE,IAGtC5G,GACHpH,IACAuF,IACAE,EAA0BkE,GAAKlE,EAA0BiE,GACtD3C,EAAuBpH,GAAWK,EAExCkU,EAAqDzU,EACnDmU,GACAnL,GAAexC,KAAK,EAAGvG,IAAAyU,GAAAtF,EAAAA,EAAAA,GAAAqF,EAAA,GAFlB7M,EAAA8M,EAAA,GAAoB5U,EAA0B4U,EAAA,GAKrDC,EAA2E3U,EAEzEmU,GAAgBtL,GAAWrC,KAAK,EAAGvG,IAAA2U,GAAAxF,EAAAA,EAAAA,GAAAuF,EAAA,GAF9B1K,EAAA2K,EAAA,GAA+BlL,EAAqCkL,EAAA,GAI3EC,EACE7U,EAAwBmU,IAAAW,GAAA1F,EAAAA,EAAAA,GAAAyF,EAAA,GADnB3K,EAAA4K,EAAA,GAA2BnL,EAAAmL,EAAA,GAGlCC,EAA0D/U,EAAwBmU,IAAAa,GAAA5F,EAAAA,EAAAA,GAAA2F,EAAA,GAA3EnL,EAAAoL,EAAA,GAAoB7I,EAAA6I,EAAA,GAE3BC,EAAmCjV,EAA+BoU,IAA3DhI,GAA2DgD,EAAAA,EAAAA,GAAA6F,EAAA,GAA3D,GAODC,EAAiB,SACrBrW,EACAC,GAMA,GAJAM,EAAMa,EAAW,CACfoS,OAAQ,KAGNvT,EAAiB,CACnB,IAAAqW,EAAgDnW,IAAxCF,EAAkBqW,EAApBrB,GAA8BvU,EAAY4V,EAAtB7H,EAClBlN,EAA2CvB,EAA7CuW,GAAmB9U,EAA0BzB,EAA5B8N,EACjBpM,EAAQyI,GAAexJ,GACvBkG,EAAiBgD,GAAWlJ,GAG5BU,EAAiD,gBAAlCd,EAAMa,EAAW,aAChC0F,EAAkB7G,GAAoBoB,EAAeX,EAAQqI,EAAIrI,EAAQV,EAAI,EAC7E+G,IAAuBI,EAA0BkE,GAAKhK,GAE5Dd,EAAMa,EAAW,CACfoS,OACE3M,EAAeI,EACfvF,EAAMuF,GACL1F,EAAgB8J,GAAKtE,EAAqBtF,EAAsB4J,EAAI,GACrEvE,GAEL,GASG0P,EAAqD,SACzDxW,EACAC,GAEA,IAAME,EACH8G,GAA4BjH,EAA8D,EAzH5D,GA0H3ByW,EAAkB,SACtBzW,EACAU,EACAC,GAEA,IAAMY,EAAgBhB,EAAMa,EAAWpB,GAKjC0B,EAAkD,YAHnBzB,EACjCA,EAAiBD,GACjBuB,GAOJ,MAAO,CAACA,EAAeG,EAHrBA,IAAmBuF,EAFiBvG,EAAaP,EAAoBQ,EAEQ,EAC3CD,KAAgBP,EAOnD,EAGHuW,EACED,EAAgB,YAAatP,EAA0BkE,EAAGtE,EAAsBsE,GAAAsL,GAAApG,EAAAA,EAAAA,GAAAmG,EAAA,GAD3EhW,EAAAiW,EAAA,GAAgBhW,EAAAgW,EAAA,GAAiBpV,EAAuBoV,EAAA,GAAAlV,EAAAkV,EAAA,GAE/DC,EACEH,EAAgB,YAAatP,EAA0BiE,EAAGrE,EAAsBqE,GAAAyL,GAAAtG,EAAAA,EAAAA,GAAAqG,EAAA,GAElF,MAAO,CACLE,GAAgB,CACdzL,EAAG3K,EACH0K,EANGyL,EAAA,IAQLN,GAAiB,CACflL,EAAG1K,EACHyK,EAVmByL,EAAA,IAYrB/I,EAAuB,CACrBzC,EAAG9J,EACH6J,EAd2DyL,EAAA,IAgB7D9I,EAA8B,CAC5B1C,EAAG5J,EACH2J,EAlB2DyL,EAAA,IAoB9D,EA2CGE,EAA6C,SACjD/W,EACAC,EACAS,EACAC,GAEA,IAAQY,EAAwDvB,EAA1D8N,EAAyB1M,EAAiCpB,EAAnC+N,EAClBtM,EAA0BL,EAA7BiK,EAAgB3J,EAAaN,EAAhBgK,EACVvE,EAAgCtF,EAAnC8J,EAAmBhK,EAAgBE,EAAnB6J,EACOtE,EAAyB3G,IAAhD0N,EACF9G,EAAyC9G,EAAiB,aAAe,cACzEqB,EAAkDrB,EACpD,cACA,eACEgH,EAAwBH,EAAqBC,GAC7CI,EAAsBL,EAAqB2N,aAC3CjM,EAAyB1B,EAAqBxF,GAC9CwH,EAAuBhC,EAAqBiO,cAGlDpU,EAAiBiU,MAAA,eAAAvS,OAAuBhB,GAAuC,EAAzB4F,EAAA,OACtDtG,EAAiBoG,IAAwB1F,EAAc4F,EAGvDtG,EAAiB8T,cAAgB5N,EAAcM,EAG3CzG,IACFC,EAAiBW,GACfkH,GAA0B9G,EAAWL,EAAc,GACrDV,EAAiBoU,cAAgBjM,GAAwBrH,EAAWoF,EAAc,GACnF,EAGHmQ,EAA+CxO,EAC3CA,EAAuBoF,EACrB9E,EACAxH,EACAF,EACAK,EACAtB,EACAqW,EACAO,GAEF,CAAE,kBAAMjO,CAAA,EAAwC,iBAAM,CAACV,GAAA,GAAA6O,GAAA1G,EAAAA,EAAAA,GAAAyG,EAAA,GAVpDpJ,EAAAqJ,EAAA,GAAiBpJ,EAAuBoJ,EAAA,GAY/C,OAAO,SAACjX,EAAaC,EAAawB,GAChC,IAkCIqN,EAjCFzN,EAMErB,EAPEyT,GAEJ1M,EAKE/G,EANUkX,GAEZ1O,EAIExI,EALW0T,GAEb5K,EAGE9I,EAJcyP,GAEhB1B,EAEE/N,EAHkBuT,GAEpBpF,EACEnO,EAFqBmU,GAGzBgD,EAA8ChX,IAAtCiO,EAAgB+I,EAAlB7D,GAAoBjF,EAAoB8I,EAAtBjD,GACxBkD,EACEnX,EAAqB,gCAAAoX,GAAA9G,EAAAA,EAAAA,GAAA6G,EAAA,GADhB9I,EAAA+I,EAAA,GAAoC9F,EAAA8F,EAAA,GAE3CC,EAAoCrX,EAAkC,YAAAsX,GAAAhH,EAAAA,EAAAA,GAAA+G,EAAA,GAA/D/I,EAAAgJ,EAAA,GAAU/F,EAAA+F,EAAA,GAEX9F,EACJnD,GACAnH,EAA0BkE,GAC1BlE,EAA0BiE,EACtBwH,GACHlR,IACAJ,IACAD,GACCmH,GACAzB,GACAwK,GACAxD,GACE8E,EAAmB2C,GAAkBjH,EAASlD,GAC9CmD,GAAmBgH,GAAkBjH,EAASnD,GAC9CqD,GAAkBoE,GAAoBrE,GAExCE,GAAoBzN,EAAuBQ,GAC3CkN,GAA0B9D,EAAkCpJ,GAC5DmN,GAAqB9D,EAA8BrJ,GACnDoN,GAAoBvB,EAA4B7L,GAiBpD,GAbI8P,GAAuCtK,GACzCJ,EACEmH,GXnVoC,mBWqVnCyD,GAIDmB,IACF9D,EAAkC0H,EAAyB/E,GAC3D4E,EAAevH,EAAiCV,IAIhD/M,GACAyH,GACAN,GACA2F,GACAoD,EACA,CACI9C,IACF5H,EACEoH,GACAN,IACA,GAIJ,IAAA6J,GAAgE3J,EAC9D4D,EACApD,EACAS,GAAA2I,IAAAlH,EAAAA,EAAAA,GAAAiH,GAAA,GAHKxX,GAAqByX,GAAA,GAAAxX,GAAAwX,GAAA,GAK5BC,GAA6ChJ,GAAoB3F,EAAmBtH,GAAAkW,IAAApH,EAAAA,EAAAA,GAAAmH,GAAA,GAA7EvX,GAAAwX,GAAA,GAAcjX,GAAwBiX,GAAA,GAC7CC,GAAyDjJ,GACvDvD,EAA8B3J,GAAAoW,IAAAtH,EAAAA,EAAAA,GAAAqH,GAAA,GADzBjX,GAAAkX,GAAA,GAAoBtW,GAA8BsW,GAAA,GAEnDnW,GAAqBmI,GAAWzI,GAClCC,GAA6BV,GAC7BoG,GAA6BrF,GAEjC1B,MAIGuB,IAA6Bb,IAAuB6Q,IACrDtR,KACCwR,GACD7D,EACE3N,GACAU,GACAR,GACAkO,KAGFtH,GAA6B8C,GAAWzI,GACxCC,GAA6B2I,GAAW5I,IAG1C,IAAME,GAA2B,CAC/BwH,EAAGqM,GAAKD,GAAIvU,GAAmBmI,EAAGzH,GAA2ByH,GAAK3I,GAAa2I,GAC/E7B,EAAGkO,GAAKD,GAAIvU,GAAmBsG,EAAG5F,GAA2B4F,GAAK9G,GAAa8G,IAE3EA,GAA2B,CAC/B6B,EAAGqM,IACA1M,EACG3B,EAAWgR,WACX/Q,GAA2B+B,EAAIqM,GAAKzT,GAAmBoH,EAAInI,GAAmBmI,IAChF3I,GAAa2I,GAEjB7B,EAAGkO,IACA1M,EACG3B,EAAWiR,YAAc5X,GAAa8G,EACtCF,GAA2BE,EAAIkO,GAAKzT,GAAmBuF,EAAItG,GAAmBsG,IAChF9G,GAAa8G,IAInB4H,GAAoB9D,EAAmB9D,IACvC2H,GAAqBvD,EA1WD,SAACrL,EAAgCC,GACzD,IAAME,EAAaS,OAAOoX,iBAAmB,IAAM,EAAI,EAAI,EACrDtX,EAAS,CACboI,EAAGqM,GAAKnV,EAAmB8I,EAAI7I,EAAmB6I,GAClD7B,EAAGkO,GAAKnV,EAAmBiH,EAAIhH,EAAmBgH,IAGpD,MAAO,CACL6B,EAAGpI,EAAOoI,EAAI3I,EAAaO,EAAOoI,EAAI,EACtC7B,EAAGvG,EAAOuG,EAAI9G,EAAaO,EAAOuG,EAAI,EACvC,CAiWKgR,CAAkB3W,GAA0B2F,IAC5CxF,EAEH,CAED,IAAAyW,GAA4CrJ,GAAAsJ,IAAA5H,EAAAA,EAAAA,GAAA2H,GAAA,GAArCnJ,GAAAoJ,GAAA,GAAcnJ,GAAuBmJ,GAAA,GAC5CC,GAAgDxJ,GAAAyJ,IAAA9H,EAAAA,EAAAA,GAAA6H,GAAA,GAAzCnJ,GAAAoJ,GAAA,GAAgBnJ,GAAyBmJ,GAAA,GAChDC,GAAwD3J,GAAA4J,IAAAhI,EAAAA,EAAAA,GAAA+H,GAAA,GAAjDnJ,GAAAoJ,GAAA,GAAoBnJ,GAA6BmJ,GAAA,GACxDC,GAA4C9J,GAAA+J,IAAAlI,EAAAA,EAAAA,GAAAiI,GAAA,GAArCnJ,GAAAoJ,GAAA,GAAcnJ,GAAuBmJ,GAAA,GACtClJ,GAAc,CAClBlE,EAAG4D,GAAenG,EAAI,EACtBsC,EAAG6D,GAAehI,EAAI,GAElBgM,GACHJ,GAAoBrE,KAAqBe,GAAYlE,GAAKkE,GAAYnE,IACtEyH,GAAoBtD,GAAYlE,IAAMkE,GAAYnE,GAClDoD,IAAoBe,GAAYnE,IAAMmE,GAAYlE,EAErD,GACEvC,GACAqF,GACAmB,IACAF,IACAJ,IACAE,IACAsC,GACAD,GACAqB,EACA,CACA,IAAM5S,GAA6B,CACjCwU,YAAa,EACbC,aAAc,EACdC,WAAY,EACZE,MAAO,GACP5E,UAAW,GACXD,UAAW,IAEP9P,GAvOuB,SAC/BD,EACAC,EACAE,EACAO,GAEA,IAAMgY,EAAuB,SAAC1Y,EAA4BC,GACxD,IAAME,EAAkBqV,GAAkBxV,GACpCU,EACHT,GAAmBE,GAAmBH,EAASuC,QAAW,GAAAF,OAAA+S,GAAA,KAAe,KAAQ,GACpF,MAAO,CACLnV,IAAoBE,EAAkBH,EAAW,GACjDwV,GAAkB9U,GAA2B,SAAWA,EACzD,EAGHiY,EAAsCD,EAAqBvY,EAAekL,EAAGpL,EAAYoL,GAAAuN,GAAArI,EAAAA,EAAAA,GAAAoI,EAAA,GAAlFhY,EAAWiY,EAAA,GAAArX,EAAAqX,EAAA,GAClBC,EAAsCH,EAAqBvY,EAAeiL,EAAGnL,EAAYmL,GAAA0N,GAAAvI,EAAAA,EAAAA,GAAAsI,EAAA,GAAlFzX,EAAW0X,EAAA,GAAArX,EAAAqX,EAAA,GAKlB,OAHApY,EAAiBqP,UAAYxO,GAAoBH,EAAYG,EAAmBZ,EAChFD,EAAiBsP,UAAYvO,GAAoBd,EAAYc,EAAmBL,EAEzEoV,EAAyBxW,EAA8BU,EAAiB,CAiN/CqY,CAC5BtH,EACAlC,GACAhB,EACAvO,IAEIG,GAAmByN,EACvB3N,GACAkP,GACAE,GACAhB,GAGG3M,GACHqV,EACE9W,GACAoO,EACAlO,GACAH,IAIA4S,GACFyD,EAAepW,GAAuBmO,GAGpC1M,GACFqC,EAAKpD,EAAO8M,GAA4BzN,GAAc+P,WACtDhM,EAAKpD,EAAO+M,GAA4B1N,GAAcgQ,YAEtDzP,EAAMa,EAAWpB,GAEpB,CAEDoE,EAAUzD,EAAO6M,GAAmBG,GAA8BsF,IAClE7O,EAAU7C,EAAU2M,GX5duBD,kBW4dgCgF,IACtEvR,GACH0C,EACEhD,EACA0M,GACAG,GACAQ,IAIJ,IAAAuK,GAA8CzL,EAC5CiJ,EAAyB/E,GAA8BqF,IAAAmC,IAAA1I,EAAAA,EAAAA,GAAAyI,GAAA,GADlD1F,GAAe2F,GAAA,GAAA1F,GAAA0F,GAAA,GAiBtB,OAbAvY,EAAS,CACPoW,GAAgBxD,GAChB4F,GAAe,CACb7N,EAAG0D,GAAajG,EAChBsC,EAAG2D,GAAa9H,GAElByI,GAAiB,CACfrE,EAAG4D,GAAenG,EAClBsC,EAAG6D,GAAehI,GAEpBkS,GAAc5J,KAGT,CACLK,GAAuB2D,GACvB6F,GAAsBpK,GACtB9N,GAAwBgO,GACzB,CACF,ECnfGmK,GAAqB,SACzBrZ,EACAC,EACAE,GAEA,IAAMO,EAAS,CAAC,EACVC,EAAgBV,GAAY,CAAC,EASnC,OANAF,EAFgBO,EAAKN,GAASqC,OAAO/B,EAAKK,KAE3B,SAAAV,GACb,IAAMsB,EAAevB,EAAQC,GACvBmB,EAAgBT,EAAcV,GACpCS,EAAOT,MAAUE,GAASoB,GAAgBH,EAAc,IAGnDV,CAAqB,EC6GjB4Y,GAAoB,SAC/BtZ,EACAC,EACAE,EACAO,GAEA,IAAIC,GAAc,EAClB4Y,EAOK7Y,GAAoE,CAAC,EANxEa,EAAAgY,EADIzH,GAEJ1Q,EAAAmY,EADWnH,GAEX3Q,EAAA8X,EADwBlH,GAExBxL,EAAA0S,EADmBrE,GAEnB7T,EAAAkY,EADqBpE,GAErBrO,EAAAyS,EADmBnE,GAGfrO,EAA8BuB,IACjC,WACK3H,GACDR,GAAwC,EAG7C,IAAEgH,EAAU,GAAIqB,EAAW,KAE7BgR,EA3F+B,SAC/BxZ,EACAC,EACAE,GAEA,IAAIO,EACAC,GAAY,EAIV8Y,EAAmD,SAAAlY,GACvD,GAAIpB,EAAoB,CACtB,IAAMiB,EAAejB,EAAmBY,QAAiC,SAAAd,EAAKE,GAC5E,GAAIA,EAAM,CACR,IAAAuZ,GAAAnJ,EAAAA,EAAAA,GAA+BpQ,EAAA,GAAxBO,EAAAgZ,EAAA,GAAU/Y,EAAc+Y,EAAA,GACzBtY,EACJT,GACAD,IACCa,EAAcA,EAAYb,GAAYgE,EAAKhE,EAAUV,IAEpDoB,GAAYA,EAAShB,QAAUO,GAAcH,EAASG,IACxD0C,EAAKpD,EAAK,CAACmB,EAAUT,EAAW4D,SAAS,EAE5C,CACD,OAAOtE,CACN,OAEHF,EAAKqB,GAAe,SAAAjB,GAAA,OAClBJ,EAAKI,EAAK,IAAK,SAAAoB,GACb,IAAMH,EAAajB,EAAK,GAClBsB,EAAUf,EAAKiK,IAAIpJ,IAAQ,GAGjC,GAFsBvB,EAAO2Z,SAASpY,GAEnB,CACjB,IAAMvB,EAAMwK,GAAGjJ,EAAKH,GAAa,SAAAjB,GAC3BQ,GACFX,IACAU,EAAKkZ,OAAOrY,IAEZtB,EAASE,EACV,IAEHO,EAAKuL,IAAI1K,EAAK8B,EAAK5B,EAASzB,GACvB,MACL2D,EAAgBlC,GAChBf,EAAKkZ,OAAOrY,EACb,MAGN,GAQH,OALIpB,IACFO,EAAM,IAAIqR,QACV0H,KAGK,CAlDS,WACd9Y,GAAY,CAAI,EAiDD8Y,EAAe,CAkCsCI,CACpE7Z,EACA+G,EACAtF,GAAAqY,GAAAvJ,EAAAA,EAAAA,GAAAiJ,EAAA,GAHKlY,EAA2BwY,EAAA,GAAA7S,EAAA6S,EAAA,GAQ5BtR,EAA+BpH,GAA4B,GAC3D0H,GAFkBvH,GAAe,IAEIc,OAAOmG,GAC5CuR,EAAmB,SACvBpZ,EACAY,GAEA,IAAMH,EAAqBC,GAAuB+G,GAC5C3G,EAAsBqF,GAAwBsB,GAC9C1G,EAA+B,IAAI8B,IACnCuD,EAAkC,IAAIvD,IACxClC,GAAqB,EACrB6F,GAAiB,EA+DrB,GA5DApH,EAAKY,GAAY,SAAAR,GACf,IACEQ,EAMER,EAPE6Z,cAEIzY,EAKNpB,EALFsS,OACApR,EAIElB,EALoBiC,KAEtB0E,EAGE3G,EAJE8Z,SAEJhT,EAEE9G,EAHM+Z,WAERpR,EACE3I,EAFQga,aAGN1R,EAA4B,eAATpH,EACnB0H,EAA2B,cAAT1H,EAClBJ,EAAyBjB,IAAWuB,EACpC6J,EACJ3C,GAAoBjI,EAASG,GACzBoD,EAAKxC,EAA+BZ,GACpC,EACAkK,EAAsC,IAAnBO,GAAwBtE,IAAasE,EACxDC,EACJjI,EAAQoF,EAA8B7H,IAAkB,GAAKkK,EAG/D,GAAI5K,IAAsB8I,IAAoB9H,GAAyB,CACrE,IAAMhB,GAAsBwI,EACtBpH,EAAqBoH,GAAoBoC,EACzC9D,EACJ1F,GAAsBwF,GAAyBhC,EAAGtD,EAAgBsF,GAI9D2B,GAHgBzB,GACjB3F,EAAmBG,EAAgBZ,EAAgBmG,EAAUsE,GAC9DnL,GAAsBoB,KAENI,EAAoBtB,IAAY4G,EAAgB/G,EAAQU,GAE5EX,EAAKkH,GAAa,SAAAjH,GAAS,OAAA0B,EAAkBgG,IAAI1H,EAAA,IACjDD,EAAK+I,GAAe,SAAA9I,GAAS,OAAA0B,EAAkBgG,IAAI1H,EAAA,IAEnDmH,EAAiBA,GAAkBqB,CAEpC,EAGEvI,GACDgB,GACA4J,IACCzJ,EAAmBG,EAAgBZ,EAAgBmG,EAAUsE,KAE9DrE,EAAmBW,IAAI/G,GACvBW,EAAqBA,GAAsB+J,EAC5C,IAIC3J,EAAkB0Y,KAAO,GAC3BnT,GAAkC,SAAAjH,GAChC,OAAAuD,EAAK7B,GAAmBX,QAAe,SAACd,EAAKE,GAE3C,OADAkD,EAAKpD,EAAKyE,EAAK1E,EAAUG,IAClB0E,EAAG1E,EAAMH,GAAYqD,EAAKpD,EAAKE,GAAQF,CAC7C,UAIHA,EAEF,OADCsB,GAAe4F,GAAmBhH,GAAwC,GACpE,EAAC,GAGV,GAAI4G,EAAmBqT,KAAO,GAAK9Y,EAAoB,CACrD,IAAMtB,EAA8C,CAClDuD,EAAKwD,GACLzF,GAIF,OAFCC,GAAgBpB,EAAuCmD,MAAM,EAAGtD,GAE1DA,CACR,GAEGyI,EAAqC,IAAI/G,IAA8B,SAAA1B,GAAA,OAC3E+Z,EAAiB/Z,EAAA,IAcnB,OAVAyI,EAAiB4R,QAAQra,EAAQ,CAC/B0M,YAAY,EACZ4N,mBAAmB,EACnBC,gBAAiBzR,EACjB0R,QAASva,EACTwa,UAAWxa,EACXya,cAAeza,IAEjBU,GAAc,EAEP,CACL,WACMA,IACFW,IACAmH,EAAiBkS,aACjBha,GAAc,EAGlB,aACE,GAAIA,EAAa,CACfoG,EAA4B9F,IAE5B,IAAMjB,EAAUyI,EAAiBmS,cACjC,OAAQlX,EAAa1D,IAAY+Z,EAAiB/Z,GAAS,EAC5D,GAEJ,EC9QG6a,GAAe,QACfC,GAAwB,SAAA9a,GAAA,OAA2BA,IAASA,EAAKwT,QAAUxT,EAAK4U,MAAA,EASzEmG,GAAqB,SAChC/a,EACAC,EACAE,GAEA,IAAA6a,EACE7a,GAAW,CAAC,EAAD8a,EAAAD,EADL3F,GAAY3U,OAAyB,IAAAua,GAAAA,EAAAC,EAAAF,EAAOG,GAASxa,OAAsB,IAAAua,GAAAA,EAE7E3Z,EAAqBiO,KAAaC,IAGZrO,EAAsBsQ,KAA1CxD,EAIFxM,EAHe2E,GACnB,eAAAhE,OAAe+L,GAAsC,kBAAA/L,OAAAiM,GAAA,mBAErB,GAC5BzH,EAAkBnF,EAAamE,WAC/BiB,EAAoB0C,GAAe7B,KAAK,EAAG3H,GACjDob,EAA+Cja,EAAyC,CACtFhB,OAAe,EACfmB,GAAqB,EACrBD,EAAQ,SAACrB,EAASC,GAAA,SAEbD,IAEC8a,GAAqB9a,IAAY8a,GAAqB7a,GAAA,IAPvD8G,eAAA,GAUDsU,EACJ,SAAArb,GAEA,IAAMG,EACJM,EAAQT,IACRA,EAAmBI,OAAS,GAC5ByC,EAAS7C,EAAmB,IAExBW,GACHR,GAAwBuC,EAAW1C,EAA4C,IAE9EuB,GAAO,EACPE,GAAuC,EACvCoF,GAAoB,EAGxB,GAAI1G,EAAsB,CACxB,IAAAmb,EAA8CvU,EAC3C/G,EAA6Cub,MAAOC,aAAAC,GAAAlL,EAAAA,EAAAA,GAAA+K,EAAA,GADhDrb,EAAoBwb,EAAA,GAAAtb,EAAmBsb,EAAA,GAGxC/a,EAAgBoa,GAAqB7a,GAG3CwB,GAFsBqZ,GAAqB3a,IAEhBO,EAE3BmG,IAHAtF,GAAQpB,IAAoBO,EAI7B,MAEI,GAAIC,EAAA,CACJkG,GADI0J,EAAAA,EAAAA,GACiBvQ,EAAA,WAIxByB,GAAgC,IAAvBzB,EAGX,GAAIU,GAA0BmG,EAAmB,CAC/C,IAAM5G,EAAMU,EACPX,EAA4C,GAC7CwJ,GAAe9H,GACnB8C,EACE9C,EACAzB,EACImB,EAAkBnB,GACf4a,GACDzZ,EAAkBK,EAClB,EACAoZ,GACFA,IAENpW,EAAU/C,EAAcmZ,GACzB,CAEItZ,GACHtB,EAAsB,CACpBwT,IAAe9S,EACf2U,GAAsB3U,EACjBX,OACD,EACJmb,KAAW1Z,GAEd,EAEGH,EAA+B,GACjC2F,IAAkDtG,GAClD0a,EAGJ,MAAO,CACL,WACE1X,EAAgBrC,GAChB2E,GAAevE,EAEjB,aACE,GAAIL,GAA2B,CAC7B,IAAMrB,EAAyB,IAAIqB,GAA0Bga,GAC7Drb,EAAuBqa,QAAQxT,GAC/BxD,EAAK/B,GAAc,WACjBtB,EAAuB2a,YAAY,GAEtC,MAAM,GAAIpZ,EAAoB,CAC7B,IAAAma,EAAmDna,EAAmB+L,EACpEzG,EACAwU,EACA1a,GAAAgb,GAAApL,EAAAA,EAAAA,GAAAmL,EAAA,GAHK1b,EAAsB2b,EAAA,GAAA1b,EAAA0b,EAAA,GAK7B1U,EAAiBjH,EACjBqD,EAAK/B,EAAcrB,EACpB,CAED,GAAIS,EAAwB,CAC1B,IAAAkb,EAAoCza,EAClC,CACEhB,OAAe,GAEjB2G,GAJK9G,GAILuQ,EAAAA,EAAAA,GAAAqL,EAAA,GAJK,GAOPvY,EACE/B,EACAkJ,GAAG9I,EAAc,UAAW,SAAAzB,GAC1B,IAAME,EAA4BH,IAClC6b,GAAAtL,EAAAA,EAAAA,GACEpQ,EAAA,GADKO,EAAAmb,EAAA,GAAqBlb,EAAAkb,EAAA,GAA4Bta,EACtDsa,EAAA,GACElb,IACF4G,GAAYV,EAAiB,WAE3BY,GAASZ,EADPnG,EACwB,MAEA,OAG5B2a,EAA2B,GACvB3a,EACFC,EACAY,KAIJ2J,GAAgBjL,EAAM,IAG3B,CAGGgH,IACFQ,GAAS/F,EAAc2M,IACvBhL,EACE/B,EACAkJ,GAAG9I,EAAc,iBAAkBuF,EAAgB,CAEjD8D,IAAS1J,QAKXA,IAA6BE,IAC/BwE,GAAe/F,EAAQ0B,EACxB,EAEJ,EC3LUoa,GAAwB,SACnC9b,EACAC,GAEA,IAAIE,EACEO,EAAkByF,GfKc,uBeJhCxF,EAA+B,GACrCob,EAAqC5a,EAAY,CAC/ChB,GAAe,IADVoB,eAAA,GAGDya,EAAkC,SACtChc,EACAG,GAEA,GAAIH,EAAa,CACf,IAAMU,EAAkBa,EA1BH,SAAAvB,GAAA,OACW,IAAnCA,EAA6BiH,GAC7BjH,EAA4Cic,gBAC5Cjc,EAA4Ckc,kBAAoB,EAuBVC,CAAkBnc,IAGrE,IAFAuQ,EAAAA,EAAAA,GAAmC7P,EAAA,MAIjC,OADCP,GAAeF,EAAyBS,GAClC,CAACA,EAEX,GAEG0b,EAA+B,SACnCpc,EACAC,GAEA,GAAID,GAAWA,EAAQI,OAAS,EAC9B,OAAO4b,EAAgChc,EAAQub,MAAOtb,EACvD,EAGH,MAAO,CACL,WACE0D,EAAgBhD,GAChBsF,GAAevF,EAEjB,aACE,GAAImG,IACF1G,EAA+B,IAAI0G,IAChC,SAAA7G,GAAY,OAAAoc,EAA6Bpc,EAC1C,IAAEqc,KAAMrc,KAEmBqa,QAAQ3Z,GACrC2C,EAAK1C,GAAc,WACjBR,EAA8Bwa,YAAY,QAEvC,CACL,IAAM2B,EAAgB,WACpB,IAAMtc,EAAU0J,GAAWhJ,GAC3Bsb,EAAgChc,EAAQ,EAE1Cuc,EAAkDxB,GAChDra,EACA4b,GAAAE,GAAAjM,EAAAA,EAAAA,GAAAgM,EAAA,GAFKvc,EAAAwc,EAAA,GAAqBvc,EAAsBuc,EAAA,GAIlDnZ,EAAK1C,EAAcX,GACnBC,IACAqc,GACD,CAEDvW,GAAe/F,EAAQU,EAEzB,aACE,GAAIP,EACF,OAAOic,EAA6Bjc,EAA6Bya,eAAe,EACjF,EAEJ,ECzCG6B,GAAA,IAAApa,OAAmBmL,GAAA,KAInBkP,GAAA,IAAAra,OAAuByL,GAAA,KACvB6O,GAA0B,CAAC,YAC3BC,GAAiC,CAAC,OAAQ,OAAQ,QAClDC,GAAyB,CAAC,KAAM,QAAS,QAAS,QAE3CC,GAAgC,SAC3C9c,EACAC,EACAE,GAIA,IAAIO,EACAC,EACAY,EAEFH,EAOEpB,EARE6S,EAEJpR,EAMEzB,EAPGwO,EAEL9M,EAKE1B,EANO2O,GAET9H,EAIE7G,EALMiP,GAERnI,EAGE9G,EAJSqP,GAEXtI,EAEE/G,EAHeuP,GAEjBjO,EACEtB,EAFeiT,GAGXhM,EAAiByK,KAAnBJ,EAENyL,EAAiC5b,EAC/B,CACEE,EAAQ0G,GACR5H,EAAe,CAAE2I,EAAG,EAAG7B,EAAG,KAE5B,WACE,IAAMjH,EAAU+G,EACdkH,GACAN,IAEI1N,EAAa8G,EAAkBgH,GAA0B,IACzD5N,EAAgBF,GAAcuE,EAAW/C,GACzCf,EAAgBT,GAAcwE,EAAUhD,GAC9CH,EAAwB2M,GAAkCN,IAC1DrM,EAAwByM,GAA0B,IAClDzM,EAAwB,GAAIuM,IAAuB,GAEnD,IAAMlN,EAAgBqJ,GAAWtI,GAC3BH,EAAiByI,GAAWvI,GAC5BL,EAAa+I,GAAe1I,GAWlC,OATAH,EACE2M,GACAN,GACA3N,GAEFsB,EAAwByM,GAA0B,GAAI9N,GACtDqB,EAAwB,GAAIuM,IAC5BrJ,EAAW/C,EAAWtB,GACtBsE,EAAUhD,EAAWf,GACd,CACLoI,EAAGvH,EAAeuH,EAAInI,EAAcmI,EAAI1H,EAAW0H,EACnD7B,EAAG1F,EAAe0F,EAAItG,EAAcsG,EAAI7F,EAAW6F,EACpD,IAjCEE,GAiCFoJ,EAAAA,EAAAA,GAAAwM,EAAA,GAjCE,GAoCDvU,EAA8B3B,EAChC+V,GACAC,GAAuBxa,OAAOua,IAC5B9T,EAAuDR,GAASnI,EAAsB,CAC1FgH,EAAU,kBAAMzG,CAAA,EAChB8H,EAAW,kBAAM7H,CAAA,EACjB8H,EAAA,SAAazI,EAAMC,GACjB,IAAOE,GAAPoQ,EAAAA,EAAAA,GAAkBvQ,EAAA,MACXU,GAAP6P,EAAAA,EAAAA,GAAkBtQ,EAAA,MAClB,MAAO,CACLK,EAAKH,GACFkC,OAAO/B,EAAKI,IACZK,QAAO,SAACf,EAAKC,GAEZ,OADAD,EAAIC,GAAOE,EAAQF,IAAQS,EAAQT,GAC5BD,CAAG,GACT,CAAC,GAEV,IAGIgd,EAA+B,SAAAhd,GACnCD,EAAKC,GAAc2c,IAA0B,SAAA3c,GAC3C,GAAIoD,EAAQuZ,GAAyB3c,IAAc,EAAG,CACpD,IAAMC,EAAW8D,EAAK3C,EAAOpB,GACzBQ,EAASP,GACX8D,EAAKtC,EAAWzB,EAAWC,GAE3BiE,EAAWzC,EAAWzB,EAEzB,IACD,EAEEid,EAAmB,SAACjd,EAA4CU,GACpE,IAAAwc,GAAA3M,EAAAA,EAAAA,GAAkDvQ,EAAA,GAA3CW,EAAAuc,EAAA,GACD9b,EAAkD,CACtDmS,GAFgD2J,EAAA,IAOlD,OAHAjd,EAAS,CAAEqT,GAAkB3S,KAE5BD,GAAeP,EAAqBiB,GAC9BA,CAAW,EAEdkb,EAAgB,SAAhBa,GAGJ,IAFAnd,EAAAmd,EAAA1J,GAEA/S,EAAAyc,EADA7H,GACA3U,EAAAwc,EAAAhC,GAEM5Z,GACHvB,GAAgBW,EACbR,EACA2I,EAEF1H,GAAmB,EACvB,GAAIV,EAAsB,CACxB,IAAA0c,GAAA7M,EAAAA,EAAAA,GAAgD7P,EAAA,GAAzCV,EAAAod,EAAA,GACPhc,EADgDgc,EAAA,GAGhDnd,EAAS,CAAEiU,GAAiBlU,GAC7B,CAEDuB,EAAS,CAAEkS,GAAAzT,EAAcmU,GAAmB/S,GAAmB,EAE3Dic,EAAoB,SAACrd,EAAqCC,GAC9D,IAAAqd,EAA+BnW,IAAtBzG,GAAsB6P,EAAAA,EAAAA,GAAA+M,EAAA,MACzB3c,EAAkD,CACtD+S,GAAkBhT,GAUpB,OAHIA,IACDT,IALcD,EACbG,EACA2I,GAGuBnI,GAEpBA,CAAW,EAEd4c,EAAiB,SACrBvd,EACAC,EACAE,GAEA,IAAMO,EAAkD,CAAEwW,GAAejX,GAMzE,OALIA,GACDE,GAAe2I,EAAqDpI,GAC3DoG,GACVkW,EAA4Bhd,GAEvBU,CAAW,EAGpB8c,EACE9b,IAAauF,EAAe6U,GAAsB1a,EAAO6b,GAAoB,CAAC7U,GAAMA,GAAMA,IAAAqV,GAAAlN,EAAAA,EAAAA,GAAAiN,EAAA,GADrF/U,EAAAgV,EAAA,GAAwB1U,EAAuB0U,EAAA,GAAAxc,EAAAwc,EAAA,GAEtDC,EAAmD5W,EAK/C,CAACsB,GAAMA,IAJP2S,GAAmB3Z,EAAOkb,EAAe,CACvCnB,IAAS,EACT9F,IAAY,IAEPsI,GAAApN,EAAAA,EAAAA,GAAAmN,EAAA,GALJtS,EAAqBuS,EAAA,GAAA9S,EAAA8S,EAAA,GAM5BC,EAAkEtE,GAChElY,GACA,EACAmc,EACA,CACEnL,GAA0ByK,GAC1B/K,GAAa+K,GAAuBxa,OAAOsa,qBANxCtR,EAA6BwS,EAAA,GAAA/S,EAAA+S,EAAA,GAU9B9S,EACJjE,GACAzF,IACA,IAAIA,GAA0Bib,EAAc3U,KAAK,EAAG,CAAE8L,IAAc,KAKtE,OAHA1I,GAAkCA,EAA+BsP,QAAQjZ,GACzE4b,IAEO,CACL,WACEvU,IACA2C,IACA7J,GAA2BA,EAAwB,KACnDwJ,GAAkCA,EAA+B4P,aACjEtP,GAEF,aAEER,IACA9B,GAEF,aACE,IAAM/I,EAAkD,CAAC,EACnDC,EAAmB6K,IACnB3K,EAAsBc,IACtBP,EAAsBa,GAA2BA,EAAwB,KAuC/E,OArCItB,GACF2D,EACE5D,EACAud,EAAeja,MACb,EACAD,EAAKpD,GAAkB,KAOzBE,GACFyD,EACE5D,EACAid,EAAiB3Z,MACf,EACAD,EAAKlD,GAA8B,KAOrCO,GACFkD,EACE5D,EACAqd,EAAkB/Z,MAChB,EACAD,EAAK3C,GAAqB,KAQzBV,CAER,WAAAA,GACC,IAAA8d,EAAyB9d,EAA6B,yBAA/CC,GAA+CsQ,EAAAA,EAAAA,GAAAuN,EAAA,GAA/C,GACPC,EAAwC/d,EAA6B,qBAAAge,GAAAzN,EAAAA,EAAAA,GAAAwN,EAAA,GAA9D5d,EAAA6d,EAAA,GAAY5c,EAAA4c,EAAA,GACnBC,EAA8Cje,EAC5C,wBAAAke,GAAA3N,EAAAA,EAAAA,GAAA0N,EAAA,GADKpX,EAAAqX,EAAA,GAAe7c,EAAA6c,EAAA,GAGtBC,EAAyCne,EACvC,mBAAAoe,GAAA7N,EAAAA,EAAAA,GAAA4N,EAAA,GADKpX,EAAAqX,EAAA,GAAe9c,EAAA8c,EAAA,GAIhBC,EAA6B,SAAAre,GAAA,OACjC2C,EAAW1C,IAAmBA,EAAeD,EAAA,EA+B/C,IAjCsCqB,GAAwBD,KAKxDG,IACFA,EAAwB,KACxBA,EAAwB,MAE1BA,EAA0B+X,GACxB5X,GAAYD,GACZ,EACA4b,EACA,CACEvL,GAAatJ,EAA4BnG,OAAOlC,GAAc,IAC9DkS,GAAqBxL,EACrBqO,GAAuBuH,GACvBrH,GAAsB,SAACpV,EAAUC,GAC/B,IAAQE,EAA0BH,EAA5ByS,OAAU/R,EAAkBV,EAApBga,cAKd,QAHG/Z,IAAkBS,GAAkBoG,IACjCzB,EAAYlF,EAAQsc,GAAcC,OAIpCtX,EAAQjF,EAAA,IAAAkC,OAAYmM,QACpB6P,EAA0Bre,EAAS,KAO3CsB,EAEF,GADAwH,EAAqD7H,IACjDR,EAAQsG,GAAgB,CAC1B,IAAM/G,EAAU+G,EAAc,GACxB9G,EAAU8G,EAAc,GAC9BrG,EAAkB+B,EAASzC,IAAYA,EACvCW,EAAmB8B,EAASxC,IAAYA,CACnC,MAAIwC,EAASsE,IAClBrG,EAAkBqG,EAClBpG,GAAmB,IAEnBD,GAAkB,EAClBC,GAAmB,EAEtB,EAEJ,EC7TG2d,GAAkB,CAAEjT,EAAG,EAAGD,EAAG,GAkCtBmT,GAAuB,SAClCve,EACAC,GAEA,IAAME,EAAuB+R,GAAkBjS,EAAS,CAAE,GAC1Due,EAA8C5S,KAAA6S,GAAAlO,EAAAA,EAAAA,GAAAiO,EAAA,GAAvC9d,EAAA+d,EAAA,GAAU9d,EAAA8d,EAAA,GAAald,EAAgBkd,EAAA,GAC9CC,EAA6DnM,GAA6BvS,GAAA2e,GAAApO,EAAAA,EAAAA,GAAAmO,EAAA,GAAnFtd,EAAAud,EAAA,GAAUld,EAAyBkd,EAAA,GAAAjd,EAAAid,EAAA,GACpC9X,EAAQsL,GAvCd,SAAAnS,GACyB,OACzByO,EAAU,CACRzO,EAAG,EACHoB,EAAG,EACH2H,EAAG,EACHrH,EAAG,GAELuT,IAAkB,EAClBpH,EAAuB,CACrB2G,YAAa,EACbC,aAAc,EACdC,WAAY,EACZG,WAAY,EACZC,aAAc,EACdC,cAAe,EACfC,YAAa,GAEfkE,GAAeoF,GACf5O,GAAiB4O,GACjBxH,GAAgB,CACdzL,EAAG,SACHD,EAAG,UAEL+N,GAAc,CACZ9N,GAAG,EACHD,GAAG,GAELkI,IAAkB,EAClBY,GAAiB1K,GAAexJ,EAAS6S,IAUf+L,CAAuCxd,IACjEyd,GAAAtO,EAAAA,EAAAA,GAA6B1J,EAAA,GAAtBxF,EAAAwd,EAAA,GAAU/X,EAAY+X,EAAA,GACvB9X,EL9BkC,SACxC/G,EACAC,GAEA,IAAQE,EAAmEH,EAArE4S,EAAWlS,EAA0DV,EAA5DwO,EAAa7N,EAA+CX,EAAjDiT,GAA2B1R,EAAsBvB,EAAxBqP,GACnDyP,EAA6EpN,KAArEtQ,EAAA0d,EAAFpR,EAA2BjM,EAAAqd,EAAFnR,EAA6BjM,EAAiBod,EAAnBxN,EACpDzK,GACHzF,IAA4BK,EAA0B4J,GAAK5J,EAA0B2J,GAElF/J,EAAgD,CACpDgS,GAA2BrT,EAAwBC,GACnD0T,GAA2B3T,EAAwBC,GACnDwV,GAA4BzV,EAAwBC,IAGtD,OAAO,SACLD,EACAC,EACAmB,GAEA,IAAMK,EAAqB4X,GACzBzV,EACE,CACE6P,IAAc,EACdhE,IAAsB,EACtB0E,IAAmB,EACnBZ,IAAyB,EACzB6F,IAAsB,EACtBlY,IAAwB,EACxB0O,IAAuB,EACvBsH,IAAe,EACfxD,IAAkB,GAEpBzT,GAEF,CAAC,EACDmB,GAEI0F,EAAqBD,IAAsBnF,EAC3CqF,EAAgBD,GAAsBtC,EAAW9D,GACjDY,EAAgBwF,GAAsBrC,EAAU/D,GACtDC,EAAwB,GAAIkN,IAAuB,GAEnD,IAAI5G,EAA4DxF,EAkBhE,OAjBA1B,EAAKsB,GAAiB,SAAApB,GACpBgH,EAAuBoS,GACrBpS,EACAhH,EAAcgH,EAAsBjH,IAAeoB,IAAU,CAAE,EAC/DA,EACD,IAGHoD,EAAW9D,EAAWqG,GACtBtC,EAAU/D,EAAWY,GACrBX,EAAwB,GAAIkN,IAEvBtM,IACHiD,EAAWrE,EAAS,GACpBsE,EAAUtE,EAAS,IAGd8G,CAAoB,CAC5B,CKhCuB8X,CAA2B3d,EAAUyF,GACvDmY,EAAwE,SAC5Ehf,EACAC,EACAE,GAEA,IAAMO,EAAoBJ,EAAKN,GAAaif,MAAM,SAAAhf,GAAA,OAAQD,EAAYC,EAAA,IAChEU,EAAUD,IAAsBmD,EAAc5D,IAAmBE,EAIvE,OAHIQ,GACFY,EAAa,IAAK,CAACvB,EAAaC,EAAgBE,IAE3CQ,CAAO,EAEhBue,EACEpC,GAA8B1b,EAAU0F,GAAW,SAAA9G,GAAA,OACjDgf,EAAmBjY,EAAgB5G,EAAsBH,GAAc,CAAE,GAAE,MAAAmf,GAAA5O,EAAAA,EAAAA,GAAA2O,EAAA,GAFxE5d,EAAkB6d,EAAA,GAAAlY,EAAAkY,EAAA,GAAwBhY,EAAiBgY,EAAA,GAAA3W,EAAA2W,EAAA,GAK5DrW,EAAsBzH,EAASsG,KAAK,GAgB1C,OAdAmB,EAAoByM,GAAyB,SAAAvV,GAAa,OAAAU,EAAS,IAAKV,EAAA,EACxE8I,EAAoB+R,GAAkB,WACpC,IAAQ7a,EAAuBoB,EAAzBwR,EAAW3S,EAAcmB,EAAhBoN,EACTrO,EAAoBqE,EAAWxE,GAC/BU,EAAmB+D,EAAUzE,GAEnCiH,IACAxF,IAEA+C,EAAWvE,EAAWE,GACtBsE,EAAUxE,EAAWS,EAAiB,EAExCoI,EAAoB2T,GAAYrb,EAEzB,CACL,SAACpB,EAAgBG,GACf,IAAMO,EAAcwR,GAAkBjS,EAASD,EAAgBG,GAE/D,OADAqI,EAAuB9H,GAChBse,EACLjY,EAAgBrG,EAAayG,IAAmBhH,GAChDH,IACEG,EACH,EAEH2I,EACA,WACEnI,IACAW,IACAI,GAAiB,EAEpB,EC9FK0d,GAAUvX,KAAVM,MAwBFkX,GAAuC,SAACrf,EAAwBC,GAAA,OACpEuK,GACExK,EACA,YACAwK,GAAG7C,KAAK,EAAG1H,EAAa,QAASiL,GAAiB,CAAEH,GAAO,EAAMD,GAAU,IAC3E,CAAEA,GAAU,KAEVwU,GAA8B,0DAE9BC,GAAgC,SACpCvf,EACAC,EACAE,EACAO,EACAC,EACAY,EACAH,GAEA,IAAQK,EAAuBiQ,KAAzBxD,EACExM,EAAgChB,EAAlCgc,GAAW7V,EAAuBnG,EAAzBic,GAAUtb,EAAeX,EAAjBkc,GACjB9V,EAAA,SAAAzE,OAA4BjB,EAAe,OAAS,OACpD2F,EAAA,SAAA1E,OAAuBjB,EAAe,IAAM,KAC5CE,EAAiBF,EAAe,QAAU,SAC1C6F,EAAa7F,EAAe,OAAS,MACrC+F,EAAQ/F,EAAe,IAAM,IAC7BoH,EAAQpH,EAAe,IAAM,IAE7Boe,EACJ,SAACxf,EAAyBC,GAA2B,gBAAAE,GACnD,IAAQO,EAAoBa,IAAtBmO,GACA3I,EAAkB2C,GAAW7C,GAAQM,GAASuC,GAAWhI,GAASyF,GAElEF,EADsBhH,EAAgBE,EAAiB4G,EACpBrG,EAAgB8H,GAEnDC,EADQe,GAAenI,IAElBD,EAAgBK,EAAmBxB,GAAKwB,EAAmBA,EAAI,GAAK,EAAK,EAEpFd,EAAoBmG,GAAoB9G,EAAkBiH,EAAcwB,CAAkB,GAG9F,OAAO+B,GAAG3D,EAAQ,eAAgB,SAAAnG,GAChC,IAAMa,EACJ6D,EAAQ1E,EAAiB+R,OAAA,IAAApQ,OAAoBwM,OAAgCnN,EACzEN,EAAwBG,EAAeG,EAAUmF,EAGvD,GAFAzC,EAAUnE,EAASuN,GAAmBI,IAA+B,GA3D7C,SAC1B5N,EACAC,EACAE,GAEA,IAAMO,EAAmBT,EAAQ4M,WACzBlM,EAAmCX,EAArCyf,OAAUle,EAA2BvB,EAA7B0f,UAAate,EAAgBpB,EAAlB2f,YACjBle,EAAaf,EAAf0M,SACN,OACa,IAAXzM,GACAY,GACAb,EAAiBP,EAAe,aAAe,iBAC9CsB,GAAY,IAAIme,SAASxe,EAAY,CAiDlCye,CAAoBnf,EAAkBV,EAASuB,GAAe,CAChE,IAAMvB,GAAsBuB,GAAgBb,EAAiBof,SACvDC,EAAgB,WAAhB,OAAsB3V,GAAsB1I,EAAA,EAC5Cse,EAAe,WAAf,OAAqB5V,GAAsBvD,EAAA,EAC3CoZ,EAAkB,SAACjgB,EAAsBC,GAAA,OAC5CD,GAAc+f,KAAiB9Y,IAAehH,GAAa+f,KAAgB/Y,EAAA,EACxExF,EAAqB+d,EACzB7e,EAAoBmG,IAAqB,EACzC,EA7EU,SAAA9G,GAChB,IAAAkgB,EAA0B9V,GAAsBpK,GAAxCC,EAAAigB,EAAFtL,MAASzU,EAAA+f,EAAF1M,OACb2M,EAAiBzW,GAAW1J,GAApBU,EAAAyf,EAAFrX,EAAKnI,EAAAwf,EAAFlZ,EACT,MAAO,CACLoE,EAAG+T,GAAMnf,GAASS,GAAK,EACvB0K,EAAGgU,GAAMjf,GAAUQ,GAAK,EACzB,CAuESyf,CAASzf,GAAqB6H,IAE9BnH,EAAoBX,EAAiBqG,GACrCI,EAAa4Y,IACbjX,EAAYkX,IACZvX,EAAetB,EAAW7F,GAC1ByH,EAAekX,EAAgB9Y,EAAY2B,GAAaL,EAAe,EACvExH,EAA6BI,EAAoByH,EAAU7B,GAC3DmE,EAAc7J,EAAe,EAAIN,EAA6B8H,EAC9DsX,EAAyB,SAAArgB,GAE7B2D,EAAgBkH,GAChBzJ,EAAsBif,sBAAsBrgB,EAAesgB,UAAU,EAGjEzV,EAAS,CACbzG,EAAUuD,KAAK,EAAG1H,EAASuN,GAAmBI,IAC9CpD,GAAGrK,EAAamf,GAA6Be,GAC7C7V,GAAGrK,EAAa,eAAgB,SAAAH,GAAA,OAAiBmL,GAAenL,EAAQ,IACtE6K,GAAU,IAEZL,GAAG3D,EAAQyY,GAA6Be,GACxC7V,GAAG3D,EAAQ,eAAgB,SAAA5G,GACzB,IAAME,EAAmBF,EAAiB8G,GAAe1F,GAErDE,GAAgBvB,IAClByB,EAAmB2J,EAAcjL,EAClC,KAIL,GAAIH,EACFyB,EAAmB2J,QACd,IAAK7J,EAAc,CACxB,IAAMvB,EAAoBwP,KAAaI,IAInC5P,GACFqD,EACEwH,EACA7K,EAAkBsN,EAChB7L,EACAwe,EACA7U,EACA3C,EACAxH,GAIP,CAEDG,EAAsBmf,kBAAkB7f,EAAiB4f,UAC1D,IACD,ECzKIE,GAAyB3Y,KAA3B4Y,IAAOC,GAAoB7Y,KAAtBC,IAAO6Y,GAAe9Y,KAAjB8H,IAAOiR,GAAU/Y,KAAZM,MAER0Y,GAAgC,SAC3C7gB,EACAC,EACAE,EACAO,GAEA,GAAIA,EAAqB,CACvB,IAAMV,EAAOG,EAAe,IAAM,IAC1BF,EAAmCS,EAArCgP,GAEAnO,EAFqCb,EAApBwY,GAEYlZ,GAC7BoB,EAAiBnB,EAAgBD,GACvC,OAAO0gB,GAAI,EAAGF,GAAI,EAAGjf,GAAgBA,EAAeH,IACrD,CACD,IAAMT,EAAOR,EAAe,QAAU,SAChCoB,EAAa6I,GAAsBpK,GAAiBW,GACpDS,EAAYgJ,GAAsBnK,GAAgBU,GACxD,OAAO+f,GAAI,EAAGF,GAAI,EAAGjf,EAAaH,GAAW,ECmDlC0f,GAAgC,SAC3C9gB,EACAC,EACAE,GAEA,IAAA4gB,EAA4DrP,KAApDhR,EAAyBqgB,EAA3B1S,EAA6B1N,EAAyBogB,EAA3B1P,EAEnBjQ,EADgCV,IAAtCmM,WACAqE,KAENzP,EAQExB,EATE+O,GAEJtN,EAOEzB,EARU2S,EAEZ/L,EAME5G,EAPK4S,EAEPxR,EAKEpB,EANGuO,EAEL1H,EAIE7G,EALOkP,GAETpI,EAGE9G,EAJU4O,GAEZ5H,EAEEhH,EAHkBiP,GAEpB/H,EACElH,EAFKoP,GAIKvG,IAD0BhC,EAAe,CAAE,EAAG9G,GAApD6M,YAC+C,CAAC,GAAhDqE,KACFzI,EAAyBoJ,GAG7B,CAACnQ,EAASmF,EAAOxF,IACjB,kBAAO8F,GAAqBF,EAAUvF,EAAUmF,CAAA,GAChDzF,EACA0H,GAEIkY,EAAmC,SACvChhB,EACAC,EACAE,GAEA,IAAMO,EAASP,EAAMsH,GAAWF,GAChCxH,EAAKC,GAAsB,SAAAA,GACzBU,EAAOV,EAAmB4c,GAAY3c,EAAW,GACjD,EAEEghB,EAAwB,SAC5BjhB,EACAC,GAIAF,EAAKC,GAAsB,SAAAA,GACzB,IAAAkhB,EAAsBjhB,EAASD,GAAAmhB,GAAA5Q,EAAAA,EAAAA,GAAA2Q,EAAA,GAC/B3gB,EADO4gB,EAAA,GAAKA,EAAA,GACM,GAClB,EAEEC,EAAwC,SAC5CphB,EACAC,EACAE,GAEA8gB,EAAsBjhB,GAAsB,SAAAA,GAC1C,IAAQU,EAAoBV,EAAtB0c,GAAW/b,EAAWX,EAAb2c,GACf,MAAO,CACLjc,GACA2gB,EAAAA,EAAAA,GAAA,GACGlhB,EAAe,QAAU,YAAAkC,QAC4D,IAApFwe,GAA8BngB,EAASC,EAAQR,EAAcF,IAC7DqhB,QAAQ,SAEb,GACD,EAEEC,EAAwC,SAC5CvhB,EACAC,EACAE,GAEA,IAAMO,EAAgBP,EAAe,IAAM,IAC3C8gB,EAAsBjhB,GAAsB,SAAAA,GAC1C,IAAQW,EAAgCX,EAAlC0c,GAAWnb,EAAuBvB,EAAzB2c,GAAUvb,EAAepB,EAAjB4c,GACjBnb,ED1HiC,SAC3CzB,EACAC,EACAE,EACAO,EACAC,EACAY,GAEA,IAAQH,EAAuBsQ,KAAzBxD,EACAzM,EAAOF,EAAe,IAAM,IAC5BG,EAAgBH,EAAe,OAAS,MACtCsF,EAAoBnG,EAAtBgP,GACArO,EAAoBuf,GAAM/Z,EAAgBpF,IAC1CqF,EAAiB6Z,GAAIxgB,EAAA,SAAAkC,OAA6BX,KAClDqF,EAAYxF,GAAgBZ,EAC5BW,EAA8BF,EAAmBK,EACnDqF,EACAzF,EAAoByF,EAElBK,EAAgBqZ,GAAI,GADEzZ,EAAYzF,EAA8BwF,GACnBzF,GAC7CmH,EAAcqY,GAA8B7gB,EAAiBC,EAAgBsB,GAEnF,OAAQ,EAAIiH,GAAgB,EAAIA,GAAerB,CAAa,CCoGpCqa,CAClB7gB,EACAY,EACAwF,EACA9G,EACAuJ,GAAepI,GACfjB,GAIF,MAAO,CACLQ,EACA,CACE8gB,UAJqBhgB,IAAgBA,EAI1B,YAAAY,OACK3B,EAAA,KAAA2B,QAAgC,IAAdZ,GAAmB6f,QAAQ,GACzD,UAEP,GACD,EAGEvY,EAA6B,GAC7B9H,EAA6C,GAC7CmK,EAA2C,GAE3CsW,EAA2B,SAC/B1hB,EACAC,EACAE,GAEA,IAAMO,EAAagC,EAAUvC,GAEvBoB,GAAcb,IAAcP,IADZO,GAAaP,IAElB6gB,EAAiC/f,EAAsBjB,EAAWC,GACnFsB,GAAeyf,EAAiC5V,EAAoBpL,EAAWC,EAAI,EAU/E0hB,EAAwB,SAAA3hB,GAC5B,IAAMC,EAAqBD,EACvB0O,GACAC,GACEjO,EAAYV,EAAeiB,EAAuBmK,EAClD7J,EAAsBmC,EAAahD,GAAasO,GAAmC,GACnF5N,EAAY+E,GAAA,GAAA9D,OACbmM,GAAA,KAAAnM,OAAsBpC,EAAsB,KAAAoC,OAAAd,IAE3CG,EAAQyE,GAAUyI,IAClBvN,EAAS8E,GAAU0I,IACnB/H,EAAS,CACb8V,GAAYxb,EACZub,GAAQjb,EACRgb,GAASrb,GAuBX,OApBKV,GACH8G,GAASrG,EpBrKmC,kBoBwK9C2E,GAAe3E,EAAWM,GAC1BqE,GAAerE,EAAOL,GAEtBgC,EAAK3C,EAAWoG,GAChBzD,EAAK0F,EAAY,CACf9C,GAAe0B,KAAK,EAAGvG,GACvBjB,EACE2G,EACA4a,EACAjgB,EACAoF,EACAE,EACA/G,KAIG8G,CAAM,EAET+D,EAAuC8W,EAAqBha,KAAK,GAAG,GACpE0D,EAAqCsW,EAAqBha,KAAK,GAAG,GAaxE,OAHAkD,IACAQ,IAEO,CACL,CACEwR,GA/DmC,SAAA7c,GACrCohB,EAAsCngB,EAAsBjB,GAAqB,GACjFohB,EAAsChW,EAAoBpL,EAAoB,EA8D5Ese,GA5DmC,SAAAte,GACrCuhB,EAAsCtgB,EAAsBjB,GAAqB,GACjFuhB,EAAsCnW,EAAoBpL,EAAoB,EA2D5Eof,GAA2BsC,EAC3BpC,GAAa,CACXkB,GAAsBvf,EACtByf,GAAQ7V,EACR8V,GAAcM,EAAsBtZ,KAAK,EAAG1G,IAE9C2f,GAAW,CACTJ,GAAsBpV,EACtBsV,GAAQrV,EACRsV,GAAcM,EAAsBtZ,KAAK,EAAGyD,KAzB3B,WACrBrF,GAAe0C,EAAwBxH,EAAqB,GAAG2b,IAC/D7W,GAAe0C,EAAwB2C,EAAmB,GAAGwR,IAE7Dtb,IAAM,WACJogB,EAAyB1S,GACxB,OAAI,EAuBPrL,EAAgBgE,KAAK,EAAGoB,GACzB,EClOU6Y,GAAwB,SACnC5hB,EACAC,EACAE,EACAO,GAMA,IAAIC,EACAY,EACAH,EACAK,EACAC,EACAmF,EAAsB,EAEpBxF,EAAQ8Q,GAAY,CAAC,GACpBrL,GAAPyJ,EAAAA,EAAAA,GAAmBlP,EAAA,MACnBwgB,EAAwExZ,KAAAyZ,GAAAvR,EAAAA,EAAAA,GAAAsR,EAAA,GAAjE9a,EAAA+a,EAAA,GAAgCxgB,EAAiCwgB,EAAA,GACxEC,EAAkE1Z,KAAA2Z,GAAAzR,EAAAA,EAAAA,GAAAwR,EAAA,GAA3D9a,EAAA+a,EAAA,GAA6B7a,EAA8B6a,EAAA,GAClEC,EAA4C5Z,GAAiB,KAAA6Z,GAAA3R,EAAAA,EAAAA,GAAA0R,EAAA,GAAtDzZ,EAAA0Z,EAAA,GAAepZ,EAAAoZ,EAAA,GACtBC,EAAoD9Z,GAAiB,KAAA+Z,GAAA7R,EAAAA,EAAAA,GAAA4R,EAAA,GAA9D1Z,EAAA2Z,EAAA,GAAqBrZ,EAAAqZ,EAAA,GAC5BC,EAA4Cha,IAAiB,kBAAMxB,CAAA,IAAAyb,GAAA/R,EAAAA,EAAAA,GAAA8R,EAAA,GAA5DphB,EAAAqhB,EAAA,GAAiBlX,EAAoBkX,EAAA,GAC5CC,EAAoDzB,GAClD9gB,EACAG,EAAoBsc,GHkHtB,SACEzc,EACAC,GAAA,OAEF,SACEE,EACAO,EACAC,EACAY,EACAH,EACAK,GAEA,IAAQC,EAAevB,EAAjByc,GACN4F,EAA2Cna,GAAiB,KAAAoa,GAAAlS,EAAAA,EAAAA,GAAAiS,EAAA,GAArD3b,EAAA4b,EAAA,GAAcphB,EAAAohB,EAAA,GACf3b,IAAe1F,EAAgBshB,SACjC3b,GAAgB,EAEpB,OAAOpD,EAAgBgE,KAAK,EAAG,CAC7B6C,GAAG9I,EAAY,gBAAgB,WAC7BhB,EAAyBuO,IAA+B,EAE1D,IAAAzE,GAAG9I,EAAY,8BAA8B,WAC3ChB,EAAyBuO,GAE3B,IAAAzE,GACE9I,EACA,SACC,SAAA1B,GACC,IAAQC,EAA8BD,EAAhC2iB,OAAUxiB,EAAsBH,EAAxB4iB,OAAUjiB,EAAcX,EAAhB6iB,UAGlB/b,GAAcC,GAA+B,IAAdpG,GAAmBuE,EAAOxD,KAAgBH,GAC3EH,EAAgBshB,SAAS,CACvBnX,KAAMtL,EACNwL,IAAKtL,EACL2iB,SAAU,WAId/b,GAAgB,EAChBrG,EAAyB0O,IAAyB,GAClDvI,GAAc,WACZE,GAAgB,EAChBrG,EAAyB0O,GAAwB,IAGnDjE,GAAenL,EAEjB,IAAE6K,GAAU,EAAOC,GAAU,IAE/BuU,GAAqC3d,EAAYf,GACjD4e,GACEvf,EACAuB,EACAZ,EACAR,EACAiB,EACAnB,EACAwB,GAEFJ,GACA,EG9KF0hB,CAA4B9iB,EAASE,IAAA6iB,GAAAzS,EAAAA,EAAAA,GAAAgS,EAAA,GAHhC1X,EAAAmY,EAAA,GAAU3X,EAAA2X,EAAA,GAAgBlY,EAAmBkY,EAAA,GAKpDC,EAOI9iB,EAAoBsc,GANtB1R,EAAAkY,EADIpQ,EAEJvF,EAAA2V,EADKzU,EAELjB,EAAA0V,EADSpU,GAETrB,EAAAyV,EADoBnU,GAEpBrB,EAAAwV,EADmB5T,GAEnB3B,EAAAuV,EADiB/T,GAIjBvB,EAKE9C,EANEyU,GAEJjO,EAIExG,EALS+V,GAEXhT,EAGE/C,EAJOuU,GAETvR,EAEEhD,EAHuBgS,GAEzB/O,EACEjD,EAF4ByT,GAGVvQ,GAAoBJ,EAAlCgT,GACc3S,GAAkBqD,EAAhCsP,GACFuC,GAA0B,SAAAljB,GAC9B,IAAQC,EAAeD,EAAjB4c,GACAzc,EAAMsN,IAAsBC,GAAWxI,EAAOjF,KAAgBqN,GAAarN,EACjF,MAAO,CACLE,EACA,CACEshB,UAAWthB,EACM,aAAAkC,OAAAmC,EAAW+I,GAAA,QAAAlL,OAA4BoC,EAAU8I,GAC9D,WAE+B,EAEnC4V,GAA2B,SAACnjB,EAAyBC,GAEzD,GADAmL,IACIpL,EACF4N,EAA0BuB,QACrB,CACL,IAAMiU,EAAO,WAAP,OAAaxV,EAA0BuB,IAA8B,IACvEtI,EAAsB,IAAM5G,EAC9BgB,EAAgBmiB,GAEhBA,GAEH,GAEGC,GAAmB,YACvB5hB,EAAcF,IACC4hB,IAAyB,EAAK,EAGzClV,GAA6B,CACjCnF,EACAsC,EACArC,EACA5B,EACA7F,EACAwJ,EAEAN,GAAGO,EAAO,cAAesY,GAAkB,CAAEtY,GAAO,IACpDP,GAAGO,EAAO,eAAgBsY,IAC1B7Y,GAAGO,EAAO,gBAAgB,WACxBtJ,GAAc,EACdF,GAAmB4hB,IAAyB,EAE9C,IAAA3Y,GAAGO,EAAO,eAAe,WACvBpK,GACEoG,GAAgC,WAC9B+B,IACAqa,IAAyB,GACzB1a,GAAqB,WACnB9H,GAAkBwiB,IAAyB,EAAM,GACjD,GAGR,IAAA3Y,GAAGgD,EAAqB,UAAW,SAAAxN,GACjCiH,GAA6B,WAC3B6G,EAA+B3N,KAE/BiB,GAAoB+hB,IAAyB,GAC7C3a,GAAe,WACbpH,IAAqBK,GAAe0hB,IAAyB,EAAM,GACnE,IAGJziB,EAASV,GAETyN,GAAqBM,GAAgBmV,IACrCzV,GAAqBO,GAAckV,GAAuB,KAGxDhV,GAAuBpH,EAASa,KAAK,GAK3C,OAHAuG,GAAqBuO,GAAY5R,EACjCqD,GAAqB2M,GAAkBxP,EAEhC,CACL,SAACrL,EAAgBU,EAAOe,GACtB,IACEJ,EAIEI,EALE2X,GAEJtS,EAGErF,EAJkBP,GAEpB6F,EAEEtF,EAHoBmO,GAEtBtO,EACEG,EAFmB0S,GAGflN,EAA8ByK,KAAhC/D,EACAxG,EAAc+K,GAAkBjS,EAASD,EAAgBU,GACzD8H,EAA0BrI,IACxB2I,EAAqDN,EAAvDkH,GAAmBjH,EAAoCD,EAAtCsO,GAAkB/N,EAAoBP,EAAtB0L,GACvCoP,EACEnc,EAAqB,gCAAAoc,GAAAhT,EAAAA,EAAAA,GAAA+S,EAAA,GADhBriB,EAAAsiB,EAAA,GAAoCnY,EAAAmY,EAAA,GAE3CC,EAA8Brc,EAA2B,oBAAAsc,GAAAlT,EAAAA,EAAAA,GAAAiT,EAAA,GAAlD3Y,EAAA4Y,EAAA,GAAOpY,EAAAoY,EAAA,GACdC,EACEvc,EAA0C,yBAAAwc,GAAApT,EAAAA,EAAAA,GAAAmT,EAAA,GADrC5Y,EAAA6Y,EAAA,GAAY5Y,EAAA4Y,EAAA,GAEnBC,EACEzc,EAAwC,uBAAA0c,GAAAtT,EAAAA,EAAAA,GAAAqT,EAAA,GADnCtW,EAAAuW,EAAA,GAAUtW,EAAAsW,EAAA,GAEjBC,EAAwB3c,EAAoB,4BAArCqG,GAAqC+C,EAAAA,EAAAA,GAAAuT,EAAA,GAArC,GACPC,EAAwC5c,EAAqB,yBAAA6c,GAAAzT,EAAAA,EAAAA,GAAAwT,EAAA,GAAtDtW,EAAAuW,EAAA,GAAYrW,EAAAqW,EAAA,GACnBC,EAA0C9c,EAAqB,0BAAA+c,GAAA3T,EAAAA,EAAAA,GAAA0T,EAAA,GAAxD5S,EAAA6S,EAAA,GAAanW,EAAAmW,EAAA,GAEdlW,EAAe3M,GAAwByF,GAA0BxF,EACjE2M,EAAmBlH,GAAyBgE,EAC5CmD,EACJjN,GACAgG,EAA0BoE,GAC1BpE,EAA0BmE,EAEtB+Y,GAAyB,SAACnkB,EAA8BC,GAC5D,IAAME,EACW,YAAf2K,GAA4C,SAAfA,GAA2C,WAAlB9K,EAExD,OADA4N,EAA0BkB,GAA2B3O,EAAWF,GACzDE,CAAS,EA0BlB,GAvBA0G,EAAsB2G,EAElBpC,GACFwC,ErBxJmC,gBqBwJoBM,GAErD7C,IACFuC,EAA0BlM,GAC1BkM,EAA0B/C,GAAO,GAEjCnJ,EAAYmJ,GAEV0C,IACF5M,EAA8B,SAAb2M,EACjB/L,EAA+B,UAAb+L,EAElB6V,KADA/hB,EAAgC,UAAbkM,IACyB,IAE1CK,GACFC,EAA0B0B,GAAqC7B,GAE7DM,GACFH,EAA0ByB,GAAoCgC,GAE5DpD,EAAkB,CACpB,IAAMjO,GAAWmkB,GAAuB1b,EAAe4C,GAAG,GACpDpL,GAAWkkB,GAAuB1b,EAAe2C,GAAG,GAG1DwC,EAA0BmB,KAFR/O,IAAYC,IAG/B,CACG+N,IACFH,EAA+BrF,GAC/BsF,EAA+BtF,GAE/BoF,EAA0BsB,IAA6BpG,EAAgBuC,GAAG,GAC1EuC,EAA0BsB,IAA6BpG,EAAgBsC,GAAG,GAC1EwC,EAA0Ba,GAAuB1F,IAAoB2E,GAGzE,EAAAQ,GACAvK,EAAgBgE,KAAK,EAAGsG,IACzB,ECbGmW,GAAuB,SAC3BpkB,EACAC,EACAE,GAEIwC,EAAW3C,IACbA,EAAeC,QAAA,EAAwBE,QAAe,EACvD,EAIUkkB,GAA6C,SACxDrkB,EACAC,EACAE,GAEA,IAAAmkB,EACE5S,KADMhR,EAAkB4jB,EAApB/S,EAAsB5Q,EAAA2jB,EAAFjW,EAA6B9M,EAAA+iB,EAAFnW,EAAoB/M,EACvEkjB,EADqElW,EAEjE3M,EAAU+N,KACV9N,EAAkBqB,EAAc/C,GAChC6G,EAAiBnF,EAAkB1B,EAASA,EAAOyS,OACnDpR,EAAoB2Q,GAAYnL,GACtC,GAAI5G,IAAYoB,EAAmB,CACjC,IAAIA,GAAY,EACVkjB,EAAmB,SAAAvkB,GACvB,IAAMC,EAA0BuP,KAC9B,4BAEIrP,EAAWF,GAA2BA,EAAwBqN,EACpE,OAAOnN,EAAWA,EAASH,GAAY,GAAQA,CAAU,EAErD8G,EAAkClD,EACtC,CAAE,EACFlD,IACA6jB,EAAgBtkB,IAElBukB,EAA8C5Y,GAAuBzL,GAAAskB,GAAAlU,EAAAA,EAAAA,GAAAiU,EAAA,GAA9Dzd,EAAA0d,EAAA,GAAUnjB,EAAamjB,EAAA,GAAAxd,EAAAwd,EAAA,GAC9BC,EAA4DnG,GAC1Dve,EACA8G,GAAA6d,GAAApU,EAAAA,EAAAA,GAAAmU,EAAA,GAFKvd,EAAiBwd,EAAA,GAAAnc,EAAAmc,EAAA,GAAgB7b,EAAoB6b,EAAA,GAI5DC,EAA+DhD,GAC7D5hB,EACA8G,EACA0B,GAEC,SAAAxI,GAAgB,OAAAiH,EAAa,SAAU,CAAC6D,EAAU9K,GAAA,IAAA6kB,GAAAtU,EAAAA,EAAAA,GAAAqU,EAAA,GAL9Cnc,EAAAoc,EAAA,GAAkB9b,EAAiB8b,EAAA,GAAA5jB,EAAA4jB,EAAA,GAOpCrY,EAAS,SAACxM,EAAgCC,GAAA,OAC9CkH,EAAgBnH,IAAkBC,EAAA,EAC9BmL,EAAcoB,EAAO7E,KAAK,EAAG,CAAC,GAAG,GACjCkD,EAAqBtJ,EAAiB6J,GACtCC,EAAuBjK,EAAmBgK,GAC1C0Z,EAAW,SAAA9kB,IhBnQU,SAAAA,GAC7B8R,GAAkB8H,OAAO5Z,EAAO,CgBmQ5B+kB,CAAele,GACfgE,IACAQ,IAEApK,IACA6H,IAEAzH,GAAY,EAGZ4F,EAAa,YAAa,CAAC6D,IAAY9K,IACvCsB,GAAa,EAGTwJ,EAA8B,CAClCka,QAAA,SAAQhlB,EAA6BC,GACnC,GAAID,EAAY,CACd,IAAMG,EAAOF,EAAOS,IAAuB,CAAC,EACtCC,EAAiB0M,GACrBvG,EACAlD,EAAWzD,EAAMokB,EAAgBvkB,KAE9B6D,EAAclD,KACjBiD,EAAWkD,EAAgBnG,GAC3B6L,EAAO7L,GAEV,CACD,OAAOiD,EAAW,CAAC,EAAGkD,EACvB,EACD0D,GAAIzD,EACJuD,IAAK,SAACtK,EAAMC,GACVD,GAAQC,GAAYqB,EAAYtB,EAAMC,EAAgB,EAExDglB,MAAA,WACE,IAAAC,EAQI1c,IAPFxI,EAAAklB,EADIhM,GAEJjZ,EAAAilB,EADaxV,GAEbvP,EAAA+kB,EADepO,GAEfpW,EAAAwkB,EADc/L,GAEdxY,EAAAukB,EADYzW,EAEZlN,EAAA2jB,EADQjQ,GAER7T,EACE8jB,EAFchR,GAGlB,OAAOtQ,EACL,CAAC,EACD,CACEuhB,aAAcnlB,EACdolB,eAAgBnlB,EAChBolB,cAAellB,EACfmlB,YAAa5kB,EACboQ,QAASnQ,EACT2L,gBAAiB/K,EACjBgkB,aAAcnkB,EACdokB,UAAAnkB,GAGL,EACDuP,SAAA,WACE,IAAA6U,EAQIjd,EAAeiU,GAPjBzc,EAAAylB,EADI7S,EAEJ3S,EAAAwlB,EADO5S,EAEP1S,EAAQslB,EADHhX,EAEL/N,EAAS+kB,EADDjX,EAER7N,EAAQ8kB,EADC9W,GAETpN,EAAoBkkB,EADZ5W,GAERzN,EAAAqkB,EADoB3W,GAGtB4W,EAAmC3c,EAAgB0T,GAA3Chb,EAAAikB,EAAFpG,GAAe5d,EAAAgkB,EAAF9E,GACb+E,EACJ,SAAA3lB,GAEA,IAAQC,EAAgCD,EAAlC0c,GAAWvc,EAAuBH,EAAzB2c,GACf,MAAO,CACLiJ,UAFsC5lB,EAAjB4c,GAGrBiJ,MAAO1lB,EACP2lB,OAAQ7lB,EACT,EAEG8lB,EACJ,SAAA/lB,GAEA,IAAQC,EAAiCD,EAAnCwgB,GAAwBrgB,EAAWH,EAAb0gB,GACtBhgB,EAAsBilB,EAA4B1lB,EAAqB,IAE7E,OAAO2D,EAAW,CAAE,EAAElD,EAAqB,CACzCslB,MAAO,WACL,IAAMhmB,EAAS2lB,EAA4BxlB,KAE3C,OADAsI,EAAiB,CAAE,GAAE,EAAM,CAAC,GACrBzI,CAAM,GAEf,EAEJ,OAAO4D,EACL,CAAC,EACD,CACE6O,OAAQzS,EACR6Q,KAAM5Q,EACN6Q,QAAS3Q,GAAYO,EACrBqQ,SAAUrQ,EACVuQ,QAAStQ,GAAYD,EACrBulB,oBAAqB1kB,EACrB2kB,mBAAoB9kB,EACpB+kB,oBAAqBJ,EAAgCtkB,GACrD2kB,kBAAmBL,EAAgCrkB,IAGxD,EACD8K,OAAS,SAAAxM,GAAA,OAAoBwM,EAAO,GAAIxM,EAAA,EACxC8kB,QAASA,EAAQnd,KAAK,IAaxB,OAVAa,EAAe+M,IAAsB,SAACvV,EAAaC,EAAgBE,GACjEsI,EAAiBxI,EAAgBE,EAAOH,EAAY,IhB5X/B,SAACA,EAAiBC,GAC3C6R,GAAkB7F,IAAIjM,EAAQC,EAAW,CgB+XvComB,CAAYxf,EAAgBiE,GAG5B/K,EAAKO,EAAKmB,IAAW,SAAAzB,GAAA,OAAeokB,GAAqB3iB,EAAQzB,GAAa,EAAG8K,EAAA,IjB1PjD,SAClC9K,EACAC,EACAE,GAEA,IAAAmmB,EAA2CnmB,GAA6B,CAAC,EAAjEO,EAAA4lB,EAAFlV,yBAA4BzQ,EAAA2lB,EAAFlW,KAChCmW,EAA+D7U,KAAvDnQ,EAAyBglB,EAA3B5Y,EAA6BvM,EAA4BmlB,EAA9B7Y,EACCjM,EAChCxB,EADMmR,yBAAiE1P,EACvEzB,EADiEmQ,KAG7DvJ,EACJ,MAAAnG,EAAAA,EAA4Be,EACxBJ,EAAmCa,EAAYvB,GAAQe,EAAcf,EAErEmG,GACHvF,EAA0B8J,GAAK9J,EAA0B6J,IAC1DvE,EACIE,EACJ/G,IACCmC,EAAOd,IACHD,EACDC,GAEN,QAASyF,KAAmCC,CAA6B,CiBsOrEyf,CACEhe,EAAeiU,GAAUvN,GACzBvO,IAA4BwQ,QAC3BzP,GAAmB1B,EAAOmR,SAG7B2T,GAAQ,GACDha,IAGTtC,EAAeqS,KACf9R,EAAgB8R,KAEhB5T,EAAa,cAAe,CAAC6D,IAE7BtC,EAAe+M,IAAsB,SAACvV,EAAaC,EAAgBE,GACjE,IACEO,EAQEV,EATEyT,GAEJ9S,EAOEX,EARUmU,GAEZ5S,EAMEvB,EAPeuT,GAEjBnS,EAKEpB,EANqBoZ,GAEvB3X,EAIEzB,EALkBkB,GAEpBQ,EAGE1B,EAJoB4P,GAEtB/I,EAEE7G,EAHmB0T,GAErBrS,EACErB,EAFckX,GAIlBjQ,EAAa,UAAW,CACtB6D,EACA,CACE2b,YAAa,CACXC,YAAahmB,EACbimB,iBAAkBhmB,EAClBimB,uBAAwBrlB,EACxBslB,oBAAqBzlB,EACrB0lB,sBAAuBrlB,EACvBslB,qBAAsBrlB,EACtBslB,gBAAiBngB,EACjBogB,aAAc5lB,GAEhB6lB,eAAAjnB,EACAknB,MAAAhnB,IAEF,IAGJ2K,EAAS0B,QAAO,GAET1B,EACR,CACD,OAAOzJ,CAAkB,EAG3BgjB,GAAkB+C,OAAU,SAAApnB,GAC1BD,ErB7awB,SAAAC,GACxB,IAAMC,EAAmB,GAQzB,OAPAF,EAAMU,EAAQT,GAAeA,EAAc,CAACA,IAA4B,SAAAA,GAGtED,EADuBO,EAAKN,IACN,SAAAG,GACpBkD,EAAKpD,EAASsP,GAAepP,GAAOH,EAAOG,GAAM,GACjD,IAEGF,CAAM,CqBoaRonB,CAAUrnB,IAAW,SAAAA,GACxB,OAAAokB,GAAqBpkB,EAAgBqkB,GAAA,GACtC,EAEHA,GAAkBiD,MAAS,SAAAtnB,GACzB,IAAMC,EAAYD,GAAeA,EAAiC4Q,SAC5DzQ,EAAWwC,EAAW1C,IAAcA,IAC1C,OAAO6C,EAAc3C,MAAe6R,GAAY7R,EAASsS,OAAO,EAElE4R,GAAkBkD,IAAM,WACtB,IAAAC,EAaI9V,KAZF1R,EAAAwnB,EADIvZ,EAEJhO,EAAAunB,EADqB7Z,EAErBxN,EAAuBqnB,EADE9Z,EAEzBhN,EAAkB8mB,EADKtZ,EAEvBvN,EAAY6mB,EADMlW,EAElB/P,EAAAimB,EADYnW,EAEZjQ,EAAAomB,EADoBhW,EAEpB/P,EAAA+lB,EAD4B/V,EAE5B/P,EAAA8lB,EADqBnZ,EAErBxH,EAAyB2gB,EADAlZ,EAEzBjN,EAAkBmmB,EADOjW,EAEzBzK,EACE0gB,EAFgBjZ,EAGpB,OAAO3K,EACL,CAAC,EACD,CACE6jB,eAAgBznB,EAChB0nB,mBAAoBznB,EACpB0nB,iBAAkBxnB,EAClBynB,kBAAmBlnB,EACnBmnB,YAAalnB,EACbmnB,oBAAqBvmB,EACrBwmB,4BAA6B3mB,EAC7B4mB,qBAAsBvmB,EAEtBwmB,yBAA0BvmB,EAC1BwmB,yBAA0BrhB,EAC1BshB,kBAAmB9mB,EACnB+mB,kBAAmBthB,GAEtB,2DCldGwG,GAAc,WAEd,UAAO1M,OAAW,IAAa,CAGjC,IAAMX,EAAO,WAAO,EACb,OAACA,EAAMA,EAChB,CAGI,IAAAyB,EACAH,EACEvB,EAAMY,OACNT,EAAmD,mBAA5BH,EAAIqoB,oBAC3BxhB,EAAM7G,EAAIsoB,sBACV7mB,EAAMzB,EAAIuoB,qBACVnnB,EAAQjB,EAAgBH,EAAIqoB,oBAAsBxhB,EAClDxF,EAAQlB,EAAgBH,EAAIwoB,mBAAqB/mB,EACjDf,EAAQ,WACZW,EAAMK,GACND,EAAIF,EAAK,EAGJ,OACL,SAACtB,EAAUU,GACHD,IACGgB,EAAAN,EACPjB,EACI,WACQO,IAENa,EAAQsF,EAAI5G,EAAQ,EAEtBA,EACe,iBAAZU,EAAuBA,EAAU,CAAE8nB,QAAS,MAEvD,EACA/nB,EAEJ,ECEMiN,IAAyC5C,EAAAA,EAAAA,aA5CZ,SACjCrJ,EACAH,GAEM,IAAAmnB,EAAkEhnB,EAAhEinB,QAAA3oB,OAAA,IAAA0oB,EAAU,MAAAA,EAAOvoB,EAA+CuB,EAA/CsjB,QAASne,EAAsCnF,EAAtCknB,OAAQnnB,EAA8BC,EAA9BmnB,MAAOznB,EAAuBM,EAAvBonB,SAAaznB,GAAA0nB,EAAAA,EAAAA,GAAUrnB,EAAAsnB,IAClEtoB,EAAMV,EACNC,GAAa8G,EAAAA,EAAAA,QAAsB,MACnCpG,GAAcoG,EAAAA,EAAAA,QAAuB,MAAIkiB,ED4Cb,SAClCvnB,GAEA,IAAA6G,EAAmC7G,GAAU,CAAC,EAAtCH,EAAAgH,EAAAyc,QAAShlB,EAAAuI,EAAAqgB,OAAQzoB,EAAAoI,EAAAsgB,MAAAK,GACWpgB,EAAAA,EAAAA,SAAewE,GAAa,IAAE6b,GAAA5Y,EAAAA,EAAAA,GAAA2Y,EAAA,GAA3DriB,EAAAsiB,EAAA,GAAc1nB,EAAW0nB,EAAA,GAC1B/nB,GAAc2F,EAAAA,EAAAA,QAAiD,MAC/D1F,GAAW0F,EAAAA,EAAAA,QAAO5G,GAClBO,GAAaqG,EAAAA,EAAAA,QAAOxF,GACpBtB,GAAY8G,EAAAA,EAAAA,QAAO/G,GAEzB,OAAAmH,EAAAA,EAAAA,YAAU,WACR9F,EAAS+nB,QAAUjpB,CAAA,GAClB,CAACA,KAEJgH,EAAAA,EAAAA,YAAU,WACF,IAAWxG,EAAaS,EAAtBgoB,QAER1oB,EAAW0oB,QAAU7nB,EAEjByM,GAAkBsZ,MAAM3mB,IAC1BA,EAASqkB,QAAQzjB,GAAW,CAAC,GAAG,EAClC,GACC,CAACA,KAEJ4F,EAAAA,EAAAA,YAAU,WACF,IAAWxG,EAAaS,EAAtBgoB,QAERnpB,EAAUmpB,QAAUppB,EAEhBgO,GAAkBsZ,MAAM3mB,IAC1BA,EAAS6J,GAAGxK,GAAU,CAAC,GAAG,EAC5B,GACC,CAACA,KAEJmH,EAAAA,EAAAA,YACE,kBAAM,iBACQ1F,IACZ,OAAAd,EAAAS,EAAYgoB,UAAZzoB,EAAqBmkB,SACvB,IACA,KAGKhc,EAAAA,EAAAA,UACL,iBAAM,CACJ,SAACnI,GAEC,IAAMyK,EAAkBhK,EAAYgoB,QAChC,IAAApb,GAAkBsZ,MAAMlc,GAAxB,CAIJ,IAAMtE,EAAYzF,EAAS+nB,QACrB1b,EAAchN,EAAW0oB,SAAW,CAAC,EACrCnoB,EAAahB,EAAUmpB,SAAW,CAAC,EACnC3gB,EAAO,WAAP,OACHrH,EAAYgoB,QAAUpb,GAAkBrN,EAAQ+M,EAAazM,EAAU,EAEtE6F,EACFD,EAAa4B,EAAM3B,GAEd2B,GAZC,CAcV,EACA,kBAAMrH,EAAYgoB,OAAA,EACpB,GACA,GAEJ,CC9GmCve,CAAqB,CAAEma,QAAA7kB,EAASyoB,OAAA/hB,EAAQgiB,MAAApnB,IAAO4nB,GAAA9Y,EAAAA,EAAAA,GAAA0Y,EAAA,GAAzE7d,EAAAie,EAAA,GAAYviB,EAAUuiB,EAAA,GAE7B,OAAAliB,EAAAA,EAAAA,YAAU,WACF,IAAWuG,EAAQzN,EAAjBmpB,QACSnoB,EAAgBN,EAAzByoB,QACR,OAAI1b,GAAOzM,GACEmK,EAAA,CACTqH,OAAQ/E,EACRkD,SAAU,CACRG,SAAU9P,EACVgQ,QAAShQ,KAIR,iBAAM,cAAAwH,EAAA3B,UAAA,EAAA2B,EAAcqc,SAAA,CAAQ,GAClC,CAAC1Z,EAAYpL,KAEhByN,EAAAA,EAAAA,qBACElM,GACA,iBACS,CACL+nB,WAAAxiB,EACAyiB,WAAY,kBAAMtpB,EAAWmpB,OAAA,KAGjC,IAKCrgB,EAAAA,cAAArI,GAAA8oB,EAAAA,EAAAA,GAAA,CAAI,oCAAkC,GAAGC,IAAKxpB,GAAgBoB,GAC5D0H,EAAAA,cAAA,OAAI0gB,IAAK9oB,GAAcS,GAG9B","sources":["../node_modules/src/support/utils/array.ts","../node_modules/src/support/dom/style.ts","../node_modules/src/support/cache.ts","../node_modules/src/support/dom/events.ts","../node_modules/src/environment.ts","../node_modules/src/support/compatibility/server.ts","../node_modules/src/support/utils/types.ts","../node_modules/src/support/utils/object.ts","../node_modules/src/support/dom/attribute.ts","../node_modules/src/support/dom/traversal.ts","../node_modules/src/support/dom/manipulation.ts","../node_modules/src/support/dom/create.ts","../node_modules/src/support/compatibility/vendors.ts","../node_modules/src/support/compatibility/apis.ts","../node_modules/src/support/dom/class.ts","../node_modules/src/support/utils/equal.ts","../node_modules/src/support/utils/animation.ts","../node_modules/src/support/utils/function.ts","../node_modules/src/support/dom/dimensions.ts","../node_modules/src/support/dom/offset.ts","../node_modules/src/support/eventListeners.ts","../node_modules/src/options.ts","../node_modules/src/classnames.ts","../node_modules/src/plugins/plugins.ts","../node_modules/src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../node_modules/src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../node_modules/src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../node_modules/src/initialization.ts","../node_modules/src/instances.ts","../node_modules/src/setups/setups.ts","../node_modules/src/setups/structureSetup/structureSetup.elements.ts","../node_modules/src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../node_modules/src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../node_modules/src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../node_modules/src/setups/structureSetup/structureSetup.update.ts","../node_modules/src/observers/domObserver.ts","../node_modules/src/observers/sizeObserver.ts","../node_modules/src/observers/trinsicObserver.ts","../node_modules/src/setups/structureSetup/structureSetup.observers.ts","../node_modules/src/setups/structureSetup/structureSetup.ts","../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.calculations.ts","../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.ts","../node_modules/src/overlayscrollbars.ts","../node_modules/src/useOverlayScrollbars.ts","../node_modules/src/OverlayScrollbarsComponent.tsx"],"sourcesContent":["import { isArrayLike, isString } from '~/support/utils/types';\nimport type { PlainObject } from '~/typings';\n\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\n\n/**\n * Iterates through a array or object\n * @param arrayLikeOrObject The array or object through which shall be iterated.\n * @param callback The function which is responsible for the iteration.\n * If the function returns true its treated like a \"continue\" statement.\n * If the function returns false its treated like a \"break\" statement.\n */\nexport function each<T>(\n  array: Array<T> | ReadonlyArray<T>,\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\n): Array<T> | ReadonlyArray<T>;\nexport function each<T>(\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\nexport function each<T>(\n  arrayLikeObject: ArrayLike<T>,\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\n): ArrayLike<T>;\nexport function each<T>(\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\n): ArrayLike<T> | false | null | undefined;\nexport function each(\n  obj: PlainObject,\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\n): PlainObject;\nexport function each(\n  obj: PlainObject | false | null | undefined,\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\n): PlainObject | false | null | undefined;\nexport function each<T>(\n  source: Array<T> | ArrayLike<T> | ReadonlyArray<T> | PlainObject | false | null | undefined,\n  callback: (value: T, indexOrKey: any, source: any) => boolean | unknown\n): Array<T> | ArrayLike<T> | ReadonlyArray<T> | PlainObject | false | null | undefined {\n  if (isArrayLike(source)) {\n    for (let i = 0; i < source.length; i++) {\n      if (callback(source[i], i, source) === false) {\n        break;\n      }\n    }\n  } else if (source) {\n    // cant use support func keys here due to circular dep\n    each(Object.keys(source), (key) => callback(source[key], key, source));\n  }\n  return source;\n}\n\n/**\n * Returns the index of the given inside the given array or -1 if the given item isn't part of the given array.\n * @param arr The array.\n * @param item The item.\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n */\nexport const indexOf = <T = any>(arr: T[], item: T, fromIndex?: number): number =>\n  arr.indexOf(item, fromIndex);\n\n/**\n * Pushesh all given items into the given array and returns it.\n * @param array The array the items shall be pushed into.\n * @param items The items which shall be pushed into the array.\n */\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\n    ? Array.prototype.push.apply(array, items as T[])\n    : array.push(items as T);\n  return array;\n};\n\n/**\n * Creates a shallow-copied Array instance from an array-like or iterable object.\n * @param arr The object from which the array instance shall be created.\n */\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\n  const original = Array.from;\n  const result: T[] = [];\n\n  if (original && arr) {\n    return original(arr);\n  }\n\n  if (arr instanceof Set) {\n    arr.forEach((value) => {\n      push(result, value);\n    });\n  } else {\n    each(arr, (elm) => {\n      push(result, elm);\n    });\n  }\n\n  return result;\n};\n\n/**\n * Check whether the passed array is empty.\n * @param array The array which shall be checked.\n */\nexport const isEmptyArray = (array: any[] | null | undefined): boolean =>\n  !!array && array.length === 0;\n\n/**\n * Calls all functions in the passed array/set of functions.\n * @param arr The array filled with function which shall be called.\n * @param args The args with which each function is called.\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\n */\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\n  // eslint-disable-next-line prefer-spread\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\n  each(arr, runFn);\n  !keep && ((arr as any[]).length = 0);\n};\n","import { each, keys } from '~/support/utils';\nimport { isString, isNumber, isArray, isUndefined } from '~/support/utils/types';\nimport type { PlainObject, StyleObject } from '~/typings';\n\nexport interface TRBL {\n  t: number;\n  r: number;\n  b: number;\n  l: number;\n}\n\nconst cssNumber = {\n  // animationiterationcount: 1,\n  // columncount: 1,\n  // fillopacity: 1,\n  // flexgrow: 1,\n  // flexshrink: 1,\n  // fontweight: 1,\n  // lineheight: 1,\n  // order: 1,\n  // orphans: 1,\n  // widows: 1,\n  // zoom: 1,\n  opacity: 1,\n  zindex: 1,\n};\n\nconst parseToZeroOrNumber = (value: string, toFloat?: boolean): number => {\n  /* istanbul ignore next */\n  const num = toFloat ? parseFloat(value) : parseInt(value, 10);\n  // num === num means num is not NaN\n  /* istanbul ignore next */\n  return num === num ? num : 0; // eslint-disable-line no-self-compare\n};\n\nconst adaptCSSVal = (prop: string, val: string | number): string | number =>\n  !cssNumber[prop.toLowerCase()] && isNumber(val) ? `${val}px` : val;\n\nconst getCSSVal = (elm: HTMLElement, computedStyle: CSSStyleDeclaration, prop: string): string =>\n  /* istanbul ignore next */\n  computedStyle != null\n    ? computedStyle[prop] || computedStyle.getPropertyValue(prop)\n    : elm.style[prop];\n\nconst setCSSVal = (elm: HTMLElement, prop: string, val: string | number): void => {\n  try {\n    const { style: elmStyle } = elm;\n    if (!isUndefined(elmStyle[prop])) {\n      elmStyle[prop] = adaptCSSVal(prop, val);\n    } else {\n      elmStyle.setProperty(prop, val as string);\n    }\n  } catch (e) {}\n};\n\n/**\n * Gets or sets the passed styles to the passed element.\n * @param elm The element to which the styles shall be applied to / be read from.\n * @param styles The styles which shall be set or read.\n */\nexport function style<CustomCssProps>(\n  elm: HTMLElement | false | null | undefined,\n  styles: StyleObject<CustomCssProps>\n): void;\nexport function style(elm: HTMLElement | false | null | undefined, styles: string): string;\nexport function style(\n  elm: HTMLElement | false | null | undefined,\n  styles: Array<string> | string\n): { [key: string]: string };\nexport function style<CustomCssProps>(\n  elm: HTMLElement | false | null | undefined,\n  styles: StyleObject<CustomCssProps> | Array<string> | string\n): { [key: string]: string } | string | void {\n  const getSingleStyle = isString(styles);\n  const getStyles = isArray(styles) || getSingleStyle;\n\n  if (getStyles) {\n    let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\n    if (elm) {\n      const computedStyle: CSSStyleDeclaration = window.getComputedStyle(elm, null);\n      getStylesResult = getSingleStyle\n        ? getCSSVal(elm, computedStyle, styles as string)\n        : (styles as Array<string>).reduce((result, key) => {\n            result[key] = getCSSVal(elm, computedStyle, key as string);\n            return result;\n          }, getStylesResult);\n    }\n    return getStylesResult;\n  }\n  elm && each(keys(styles), (key) => setCSSVal(elm, key, styles[key]));\n}\n\nexport const directionIsRTL = (elm: HTMLElement | false | null | undefined): boolean =>\n  style(elm, 'direction') === 'rtl';\n\n/**\n * Returns the top right bottom left values of the passed css property.\n * @param elm The element of which the values shall be returned.\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\n * @param propertySuffix The css property suffix. (e.g. \"width\")\n */\nexport const topRightBottomLeft = (\n  elm?: HTMLElement | false | null | undefined,\n  propertyPrefix?: string,\n  propertySuffix?: string\n): TRBL => {\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\n  const top = `${finalPrefix}top${finalSuffix}`;\n  const right = `${finalPrefix}right${finalSuffix}`;\n  const bottom = `${finalPrefix}bottom${finalSuffix}`;\n  const left = `${finalPrefix}left${finalSuffix}`;\n  const result = style(elm, [top, right, bottom, left]);\n  return {\n    t: parseToZeroOrNumber(result[top], true),\n    r: parseToZeroOrNumber(result[right], true),\n    b: parseToZeroOrNumber(result[bottom], true),\n    l: parseToZeroOrNumber(result[left], true),\n  };\n};\n","export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","import { isUndefined } from '~/support/utils/types';\nimport { each, push, runEachAndClear } from '~/support/utils/array';\n\nlet passiveEventsSupport: boolean;\nconst supportPassiveEvents = (): boolean => {\n  if (isUndefined(passiveEventsSupport)) {\n    passiveEventsSupport = false;\n    try {\n      /* eslint-disable */\n      // @ts-ignore\n      window.addEventListener(\n        'test',\n        null,\n        Object.defineProperty({}, 'passive', {\n          get() {\n            passiveEventsSupport = true;\n          },\n        })\n      );\n      /* eslint-enable */\n    } catch (e) {}\n  }\n  return passiveEventsSupport;\n};\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\n\nexport interface OnOptions {\n  _capture?: boolean;\n  _passive?: boolean;\n  _once?: boolean;\n}\n\n/**\n * Removes the passed event listener for the passed events with the passed options.\n * @param target The element from which the listener shall be removed.\n * @param eventNames The eventsnames for which the listener shall be removed.\n * @param listener The listener which shall be removed.\n * @param capture The options of the removed listener.\n */\nexport const off = <T extends Event = Event>(\n  target: EventTarget,\n  eventNames: string,\n  listener: (event: T) => any,\n  capture?: boolean\n): void => {\n  each(splitEventNames(eventNames), (eventName) => {\n    target.removeEventListener(eventName, listener as EventListener, capture);\n  });\n};\n\n/**\n * Adds the passed event listener for the passed eventnames with the passed options.\n * @param target The element to which the listener shall be added.\n * @param eventNames The eventsnames for which the listener shall be called.\n * @param listener The listener which is called on the eventnames.\n * @param options The options of the added listener.\n */\nexport const on = <T extends Event = Event>(\n  target: EventTarget,\n  eventNames: string,\n  listener: (event: T) => any,\n  options?: OnOptions\n): (() => void) => {\n  const doSupportPassiveEvents = supportPassiveEvents();\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\n  const capture = (options && options._capture) || false;\n  const once = (options && options._once) || false;\n  const offListeners: (() => void)[] = [];\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\n    ? {\n        passive,\n        capture,\n      }\n    : capture;\n\n  each(splitEventNames(eventNames), (eventName) => {\n    const finalListener = (\n      once\n        ? (evt: T) => {\n            target.removeEventListener(eventName, finalListener, capture);\n            listener && listener(evt);\n          }\n        : listener\n    ) as EventListener;\n\n    push(offListeners, off.bind(null, target, eventName, finalListener, capture));\n    target.addEventListener(eventName, finalListener, nativeOptions);\n  });\n\n  return runEachAndClear.bind(0, offListeners);\n};\n\n/**\n * Shorthand for the stopPropagation event Method.\n * @param evt The event of which the stopPropagation method shall be called.\n */\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\n\n/**\n * Shorthand for the preventDefault event Method.\n * @param evt The event of which the preventDefault method shall be called.\n */\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\n\n/**\n * Shorthand for the stopPropagation and preventDefault event Method.\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\n */\nexport const stopAndPrevent = (evt: Event): void =>\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\n","import {\n  createDOM,\n  addClass,\n  style,\n  appendChildren,\n  fractionalSize,\n  clientSize,\n  absoluteCoordinates,\n  offsetSize,\n  scrollLeft,\n  removeAttr,\n  removeElements,\n  equalBCRWH,\n  getBoundingClientRect,\n  assignDeep,\n  cssProperty,\n  createCache,\n  equalXY,\n  createEventListenerHub,\n  debounce,\n} from '~/support';\nimport {\n  classNameEnvironment,\n  classNameEnvironmentFlexboxGlue,\n  classNameEnvironmentFlexboxGlueMax,\n  classNameScrollbarHidden,\n} from '~/classnames';\nimport { defaultOptions } from '~/options';\nimport { getPlugins, scrollbarsHidingPluginName } from '~/plugins';\nimport type { XY, EventListener } from '~/support';\nimport type { Options, PartialOptions } from '~/options';\nimport type { ScrollbarsHidingPluginInstance } from '~/plugins';\nimport type { Initialization, PartialInitialization } from '~/initialization';\n\ntype EnvironmentEventArgs = {\n  z: [];\n  r: [];\n};\n\n/**\n * Describes the OverlayScrollbars environment.\n */\nexport interface Environment {\n  /** The native scrollbars size of the browser / system. */\n  scrollbarsSize: XY<number>;\n  /** Whether the native scrollbars are overlaid. */\n  scrollbarsOverlaid: XY<boolean>;\n  /** Whether the browser supports native scrollbars hiding. */\n  scrollbarsHiding: boolean;\n  /** The rtl scroll behavior of the browser. */\n  rtlScrollBehavior: { n: boolean; i: boolean };\n  /** Whether the browser supports all needed Flexbox features for OverlayScrollbars to work in a more performant way. */\n  flexboxGlue: boolean;\n  /** Whether the browser supports custom css properties. (also known as css variables) */\n  cssCustomProperties: boolean;\n  /** The default Initialization to use if nothing else is specified. */\n  staticDefaultInitialization: Initialization;\n  /** The default Options to use if nothing else is specified. */\n  staticDefaultOptions: Options;\n\n  /** Returns the current default Initialization. */\n  getDefaultInitialization(): Initialization;\n  /** Returns the current default Options. */\n  getDefaultOptions(): Options;\n\n  /**\n   * Sets a new default Initialization.\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\n   * @param newDefaultInitialization The new default Initialization.\n   * @returns The current default Initialization.\n   */\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\n  /**\n   * Sets new default Options.\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\n   * @param newDefaultOptions The new default Options.\n   * @returns The current default options.\n   */\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\n}\n\nexport interface InternalEnvironment {\n  readonly _nativeScrollbarsSize: XY;\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\n  readonly _nativeScrollbarsHiding: boolean;\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\n  readonly _flexboxGlue: boolean;\n  readonly _cssCustomProperties: boolean;\n  readonly _staticDefaultInitialization: Initialization;\n  readonly _staticDefaultOptions: Options;\n  _addZoomListener(listener: EventListener<EnvironmentEventArgs, 'z'>): () => void;\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\n  _getDefaultInitialization(): Initialization;\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\n  _getDefaultOptions(): Options;\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\n}\n\nlet environmentInstance: InternalEnvironment;\n\nconst getNativeScrollbarSize = (\n  body: HTMLElement,\n  measureElm: HTMLElement,\n  measureElmChild: HTMLElement,\n  clear?: boolean\n): XY => {\n  appendChildren(body, measureElm);\n\n  const cSize = clientSize(measureElm);\n  const oSize = offsetSize(measureElm);\n  const fSize = fractionalSize(measureElmChild);\n\n  clear && removeElements(measureElm);\n\n  return {\n    x: oSize.h - cSize.h + fSize.h,\n    y: oSize.w - cSize.w + fSize.w,\n  };\n};\n\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\n  let result = false;\n  const revertClass = addClass(testElm, classNameScrollbarHidden);\n  try {\n    result =\n      style(testElm, cssProperty('scrollbar-width')) === 'none' ||\n      window.getComputedStyle(testElm, '::-webkit-scrollbar').getPropertyValue('display') ===\n        'none';\n  } catch (ex) {}\n  revertClass();\n  return result;\n};\n\nconst getRtlScrollBehavior = (\n  parentElm: HTMLElement,\n  childElm: HTMLElement\n): { i: boolean; n: boolean } => {\n  const strHidden = 'hidden';\n  style(parentElm, { overflowX: strHidden, overflowY: strHidden, direction: 'rtl' });\n  scrollLeft(parentElm, 0);\n\n  const parentOffset = absoluteCoordinates(parentElm);\n  const childOffset = absoluteCoordinates(childElm);\n  scrollLeft(parentElm, -999); // https://github.com/KingSora/OverlayScrollbars/issues/187\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\n  return {\n    /**\n     * origin direction = determines if the zero scroll position is on the left or right side\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\n     * true = on the left side\n     * false = on the right side\n     */\n    i: parentOffset.x === childOffset.x,\n    /**\n     * negative = determines if the maximum scroll is positive or negative\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\n     * true = negative\n     * false = positive\n     */\n    n: childOffset.x !== childOffsetAfterScroll.x,\n  };\n};\n\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\n  const minOffsetsize = getBoundingClientRect(childElm);\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\n\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\n  const maxOffsetsize = getBoundingClientRect(childElm);\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\n\n  revertFbxGlue();\n  revertFbxGlueMax();\n\n  return supportsMin && supportsMax;\n};\n\nconst createEnvironment = (): InternalEnvironment => {\n  const { body } = document;\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\n  const envElm = envDOM[0] as HTMLElement;\n  const envChildElm = envElm.firstChild as HTMLElement;\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\n    {\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\n      _equal: equalXY,\n    },\n    getNativeScrollbarSize.bind(0, body, envElm, envChildElm, true)\n  );\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\n  const nativeScrollbarsOverlaid = {\n    x: nativeScrollbarsSize.x === 0,\n    y: nativeScrollbarsSize.y === 0,\n  };\n  const staticDefaultInitialization: Initialization = {\n    elements: {\n      host: null,\n      padding: !nativeScrollbarsHiding,\n      viewport: (target) =>\n        nativeScrollbarsHiding && target === target.ownerDocument.body && target,\n      content: false,\n    },\n    scrollbars: {\n      slot: true,\n    },\n    cancel: {\n      nativeScrollbarsOverlaid: false,\n      body: null,\n    },\n  };\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\n  const getDefaultOptions = (assignDeep as typeof assignDeep<Options, Options>).bind(\n    0,\n    {} as Options,\n    staticDefaultOptions\n  );\n  const getDefaultInitialization = (\n    assignDeep as typeof assignDeep<Initialization, Initialization>\n  ).bind(0, {} as Initialization, staticDefaultInitialization);\n\n  const env: InternalEnvironment = {\n    _nativeScrollbarsSize: nativeScrollbarsSize,\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\n    _cssCustomProperties: style(envElm, 'zIndex') === '-1',\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\n    _addZoomListener: addEvent.bind(0, 'z'),\n    _addResizeListener: addEvent.bind(0, 'r'),\n    _getDefaultInitialization: getDefaultInitialization,\n    _setDefaultInitialization: (newInitializationStrategy) =>\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\n      getDefaultInitialization(),\n    _getDefaultOptions: getDefaultOptions,\n    _setDefaultOptions: (newDefaultOptions) =>\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\n  };\n  const windowAddEventListener = window.addEventListener;\n  const debouncedWindowResize = debounce((zoom: boolean) => triggerEvent(zoom ? 'z' : 'r'), {\n    _timeout: 33,\n    _maxDelay: 99,\n  });\n\n  removeAttr(envElm, 'style');\n  removeElements(envElm);\n\n  // needed in case content has css viewport units\n  windowAddEventListener('resize', debouncedWindowResize.bind(0, false));\n\n  if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\n    let resizeFn: undefined | ReturnType<ScrollbarsHidingPluginInstance['_envWindowZoom']>;\n    windowAddEventListener('resize', () => {\n      const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\n        | ScrollbarsHidingPluginInstance\n        | undefined;\n\n      resizeFn = resizeFn || (scrollbarsHidingPlugin && scrollbarsHidingPlugin._envWindowZoom());\n      resizeFn &&\n        resizeFn(env, updateNativeScrollbarSizeCache, debouncedWindowResize.bind(0, true));\n    });\n  }\n\n  return env;\n};\n\nconst getEnvironment = (): InternalEnvironment => {\n  if (!environmentInstance) {\n    environmentInstance = createEnvironment();\n  }\n  return environmentInstance;\n};\n\nexport { getEnvironment };\n","export const isClient = () => typeof window !== 'undefined';\n","import { isClient } from '~/support/compatibility/server';\nimport type { PlainObject } from '~/typings';\n\nconst ElementNodeType = isClient() && Node.ELEMENT_NODE;\nconst { toString, hasOwnProperty } = Object.prototype;\n\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\n\nexport const isNull = (obj: any): obj is null => obj === null;\n\nexport const type = (obj: any): string =>\n  isUndefined(obj) || isNull(obj)\n    ? `${obj}`\n    : toString\n        .call(obj)\n        .replace(/^\\[object (.+)\\]$/, '$1')\n        .toLowerCase();\n\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\n\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\n\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\n\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\n\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\n\nexport const isObject = (obj: any): boolean =>\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\n\n/**\n * Returns true if the given object is array like, false otherwise.\n * @param obj The Object\n */\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\n  const length = !!obj && obj.length;\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\n\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\n    ? length > 0 && isObject(obj)\n      ? length - 1 in obj\n      : true\n    : false;\n};\n\n/**\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\n * @param obj The Object.\n */\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\n\n  let key;\n  const cstr = 'constructor';\n  const ctor = obj[cstr];\n  const ctorProto = ctor && ctor.prototype;\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\n\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\n    return false;\n  }\n\n  /* eslint-disable no-restricted-syntax */\n  for (key in obj) {\n    /**/\n  }\n  /* eslint-enable */\n\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\n};\n\n/**\n * Checks whether the given object is a HTMLElement.\n * @param obj The object which shall be checked.\n */\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\n  const instanceofObj = HTMLElement;\n  return obj\n    ? instanceofObj\n      ? obj instanceof instanceofObj\n      : obj.nodeType === ElementNodeType\n    : false;\n};\n\n/**\n * Checks whether the given object is a Element.\n * @param obj The object which shall be checked.\n */\nexport const isElement = (obj: any): obj is Element => {\n  const instanceofObj = Element;\n  return obj\n    ? instanceofObj\n      ? obj instanceof instanceofObj\n      : obj.nodeType === ElementNodeType\n    : false;\n};\n","import { isArray, isFunction, isPlainObject, isNull } from '~/support/utils/types';\nimport { each } from '~/support/utils/array';\n\n/**\n * Determines whether the passed object has a property with the passed name.\n * @param obj The object.\n * @param prop The name of the property.\n */\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\n  Object.prototype.hasOwnProperty.call(obj, prop);\n\n/**\n * Returns the names of the enumerable string properties and methods of an object.\n * @param obj The object of which the properties shall be returned.\n */\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\n\ntype AssignDeep = {\n  <T, U>(target: T, object1: U): T & U;\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\n    U &\n    V &\n    W &\n    X &\n    Y;\n  <T, U, V, W, X, Y, Z>(\n    target: T,\n    object1?: U,\n    object2?: V,\n    object3?: W,\n    object4?: X,\n    object5?: Y,\n    object6?: Z\n  ): T & U & V & W & X & Y & Z;\n};\n\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\n  target: T,\n  object1?: U,\n  object2?: V,\n  object3?: W,\n  object4?: X,\n  object5?: Y,\n  object6?: Z\n): T & U & V & W & X & Y & Z => {\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\n\n  // Handle case when target is a string or something (possible in deep copy)\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\n    target = {} as T;\n  }\n\n  each(sources, (source) => {\n    // Extend the base object\n    each(keys(source), (key) => {\n      const copy: any = source[key];\n\n      // Prevent Object.prototype pollution\n      // Prevent never-ending loop\n      if (target === copy) {\n        return true;\n      }\n\n      const copyIsArray = isArray(copy);\n\n      // Recurse if we're merging plain objects or arrays\n      if (copy && (isPlainObject(copy) || copyIsArray)) {\n        const src = target[key];\n        let clone: any = src;\n\n        // Ensure proper type for the source value\n        if (copyIsArray && !isArray(src)) {\n          clone = [];\n        } else if (!copyIsArray && !isPlainObject(src)) {\n          clone = {};\n        }\n\n        // Never move original objects, clone them\n        target[key] = assignDeep(clone, copy) as any;\n      } else {\n        target[key] = copy;\n      }\n    });\n  });\n\n  // Return the modified object\n  return target as any;\n};\n\n/**\n * Returns true if the given object is empty, false otherwise.\n * @param obj The Object.\n */\nexport const isEmptyObject = (obj: any): boolean => {\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\n  for (const name in obj) return false;\n  return true;\n  /* eslint-enable */\n};\n","import { from } from '~/support/utils/array';\nimport { isNumber, isString, isUndefined } from '~/support/utils/types';\n\ntype GetSetPropName = 'scrollLeft' | 'scrollTop' | 'value';\n\ntype Attr = {\n  (elm: HTMLElement | false | null | undefined, attrName: string): string | null;\n  (elm: HTMLElement | false | null | undefined, attrName: string, value: string): void;\n  (elm: HTMLElement | false | null | undefined, attrName: string, value?: string):\n    | string\n    | null\n    | void;\n};\n\ntype GetSetProp<T> = {\n  (elm: HTMLElement | false | null | undefined): T;\n  (elm: HTMLElement | false | null | undefined, value: T | false | null): void;\n  (elm: HTMLElement | false | null | undefined, value?: T | false | null): T | void;\n};\n\nconst getSetProp = (\n  topLeft: GetSetPropName,\n  fallback: number | string,\n  elm: HTMLElement | HTMLInputElement | false | null | undefined,\n  value?: number | string | false | null\n): number | string | void => {\n  if (isUndefined(value)) {\n    return elm ? elm[topLeft] : fallback;\n  }\n  elm && (isString(value) || isNumber(value)) && (elm[topLeft] = value);\n};\n\n/**\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\n * Returns null if the element has no attribute with the given name.\n * @param elm The element of which the attribute shall be get or set.\n * @param attrName The attribute name which shall be get or set.\n * @param value The value of the attribute which shall be set.\n */\nexport const attr = ((\n  elm: HTMLElement | false | null | undefined,\n  attrName: string,\n  value?: string\n): string | null | void => {\n  if (isUndefined(value)) {\n    return elm ? elm.getAttribute(attrName) : null;\n  }\n  elm && elm.setAttribute(attrName, value);\n}) as Attr;\n\n/**\n * Removes the given attribute from the given element.\n * @param elm The element of which the attribute shall be removed.\n * @param attrName The attribute name.\n */\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\n  elm && elm.removeAttribute(attrName);\n};\n\n/**\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\n * @param elm The element.\n * @param attrName The attributeName to which the value shall be added or removed.\n * @param value The value which shall be added or removed.\n * @param add True if the value shall be added, false otherwise.\n */\nexport const attrClass = (\n  elm: HTMLElement | false | null | undefined,\n  attrName: string,\n  value: string,\n  add?: boolean\n) => {\n  if (value) {\n    const currValues = attr(elm, attrName) || '';\n    const currValuesSet = new Set(currValues.split(' '));\n    currValuesSet[add ? 'add' : 'delete'](value);\n    const newTokens = from(currValuesSet).join(' ').trim();\n    attr(elm, attrName, newTokens);\n  }\n};\n\n/**\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\n * @param elm The element.\n * @param attrName The attributeName from which the content shall be checked.\n * @param value The value.\n * @returns True if the given attribute has the value in it, false otherwise.\n */\nexport const hasAttrClass = (\n  elm: HTMLElement | false | null | undefined,\n  attrName: string,\n  value: string\n) => {\n  const currValues = attr(elm, attrName) || '';\n  const currValuesSet = new Set(currValues.split(' '));\n  return currValuesSet.has(value);\n};\n\n/**\n * Gets or sets the scrollLeft value of the given element depending whether the value attribute is given.\n * @param elm The element of which the scrollLeft value shall be get or set.\n * @param value The scrollLeft value which shall be set.\n */\nexport const scrollLeft = ((\n  elm: HTMLElement | false | null | undefined,\n  value?: number | false | null\n): number | void => getSetProp('scrollLeft', 0, elm, value) as number) as GetSetProp<number>;\n\n/**\n * Gets or sets the scrollTop value of the given element depending whether the value attribute is given.\n * @param elm The element of which the scrollTop value shall be get or set.\n * @param value The scrollTop value which shall be set.\n */\nexport const scrollTop = ((\n  elm: HTMLElement | false | null | undefined,\n  value?: number | false | null\n): number | void => getSetProp('scrollTop', 0, elm, value) as number) as GetSetProp<number>;\n\n/**\n * Gets or sets the value of the given input element depending whether the value attribute is given.\n * @param elm The input element of which the value shall be get or set.\n * @param value The value which shall be set.\n */\nexport const val = ((\n  elm: HTMLInputElement | false | null | undefined,\n  value?: string\n): string | void => getSetProp('value', '', elm, value) as string) as GetSetProp<string>;\n","import { isClient } from '~/support/compatibility/server';\nimport { isElement } from '~/support/utils/types';\nimport { push, from } from '~/support/utils/array';\n\ntype InputElementType = Node | Element | Node | false | null | undefined;\ntype OutputElementType = Node | Element | null;\n\nconst getElmPrototype = (isClient() && Element.prototype) as Element; // only Element.prototype wont work on server\n\n/**\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\n * @param selector The selector which has to be searched by.\n * @param elm The element from which the search shall be outgoing.\n */\nconst find = (selector: string, elm?: InputElementType): Element[] => {\n  const arr: Array<Element> = [];\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\n\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\n};\n\n/**\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\n * @param selector The selector which has to be searched by.\n * @param elm The element from which the search shall be outgoing.\n */\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\n\n  return rootElm ? rootElm.querySelector(selector) : null;\n};\n\n/**\n * Determines whether the passed element is matching with the passed selector.\n * @param elm The element which has to be compared with the passed selector.\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\n */\nconst is = (elm: InputElementType, selector: string): boolean => {\n  if (isElement(elm)) {\n    /* istanbul ignore next */\n    // eslint-disable-next-line\n    const fn: (...args: any) => boolean =\n      // @ts-ignore\n      getElmPrototype.matches || getElmPrototype.msMatchesSelector;\n    return fn.call(elm, selector);\n  }\n  return false;\n};\n\n/**\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\n * @param elm The element of which the children shall be returned.\n * @param selector The selector which must match with the children elements.\n */\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\n  const childs: Array<Element> = [];\n\n  return isElement(elm)\n    ? push(\n        childs,\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\n      )\n    : childs;\n};\n\n/**\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\n * @param elm The element of which the childNodes shall be returned.\n */\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\n  elm ? from(elm.childNodes) : [];\n\n/**\n * Returns the parent element of the passed element, or null if the passed element is null.\n * @param elm The element of which the parent element shall be returned.\n */\nconst parent = (elm: InputElementType): OutputElementType => (elm ? elm.parentElement : null);\n\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\n  if (isElement(elm)) {\n    const closestFn = getElmPrototype.closest;\n    if (closestFn) {\n      return closestFn.call(elm, selector);\n    }\n\n    do {\n      if (is(elm, selector)) {\n        return elm as Element;\n      }\n      elm = parent(elm);\n    } while (elm);\n  }\n\n  return null;\n};\n\n/**\n * Determines whether the given element lies between two selectors in the DOM.\n * @param elm The element.\n * @param highBoundarySelector The high boundary selector.\n * @param deepBoundarySelector The deep boundary selector.\n */\nconst liesBetween = (\n  elm: InputElementType,\n  highBoundarySelector: string,\n  deepBoundarySelector: string\n): boolean => {\n  const closestHighBoundaryElm = elm && closest(elm, highBoundarySelector);\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\n  const deepBoundaryIsValid =\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\n\n  return closestHighBoundaryElm && closestDeepBoundaryElm\n    ? closestHighBoundaryElm === elm ||\n        closestDeepBoundaryElm === elm ||\n        (deepBoundaryIsValid &&\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\n            closestHighBoundaryElm)\n    : false;\n};\n\nexport { find, findFirst, is, children, contents, parent, liesBetween, closest };\n","import { isArrayLike } from '~/support/utils/types';\nimport { each, from } from '~/support/utils/array';\nimport { parent } from '~/support/dom/traversal';\n\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\n\n/**\n * Inserts Nodes before the given preferredAnchor element.\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\n * @param insertedElms The Nodes which shall be inserted.\n */\nconst before = (\n  parentElm: Node | false | null | undefined,\n  preferredAnchor: Node | false | null | undefined,\n  insertedElms: NodeCollection\n): void => {\n  if (insertedElms && parentElm) {\n    let anchor: Node | false | null | undefined = preferredAnchor;\n    let fragment: DocumentFragment | Node | null | undefined;\n\n    if (isArrayLike(insertedElms)) {\n      fragment = document.createDocumentFragment();\n\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\n      each(insertedElms, (insertedElm) => {\n        if (insertedElm === anchor) {\n          anchor = insertedElm.previousSibling;\n        }\n        fragment!.appendChild(insertedElm);\n      });\n    } else {\n      fragment = insertedElms;\n    }\n\n    // if the preferred anchor isn't null set it to a valid anchor\n    if (preferredAnchor) {\n      if (!anchor) {\n        anchor = parentElm.firstChild;\n      } else if (anchor !== preferredAnchor) {\n        anchor = anchor.nextSibling;\n      }\n    }\n\n    parentElm.insertBefore(fragment, anchor || null);\n  }\n};\n\n/**\n * Appends the given children at the end of the given Node.\n * @param node The Node to which the children shall be appended.\n * @param children The Nodes which shall be appended.\n */\nexport const appendChildren = (\n  node: Node | false | null | undefined,\n  children: NodeCollection\n): void => {\n  before(node, null, children);\n};\n\n/**\n * Prepends the given children at the start of the given Node.\n * @param node The Node to which the children shall be prepended.\n * @param children The Nodes which shall be prepended.\n */\nexport const prependChildren = (\n  node: Node | false | null | undefined,\n  children: NodeCollection\n): void => {\n  before(node, node && node.firstChild, children);\n};\n\n/**\n * Inserts the given Nodes before the given Node.\n * @param node The Node before which the given Nodes shall be inserted.\n * @param insertedNodes The Nodes which shall be inserted.\n */\nexport const insertBefore = (\n  node: Node | false | null | undefined,\n  insertedNodes: NodeCollection\n): void => {\n  before(parent(node), node, insertedNodes);\n};\n\n/**\n * Inserts the given Nodes after the given Node.\n * @param node The Node after which the given Nodes shall be inserted.\n * @param insertedNodes The Nodes which shall be inserted.\n */\nexport const insertAfter = (\n  node: Node | false | null | undefined,\n  insertedNodes: NodeCollection\n): void => {\n  before(parent(node), node && node.nextSibling, insertedNodes);\n};\n\n/**\n * Removes the given Nodes from their parent.\n * @param nodes The Nodes which shall be removed.\n */\nexport const removeElements = (nodes: NodeCollection): void => {\n  if (isArrayLike(nodes)) {\n    each(from(nodes), (e) => removeElements(e));\n  } else if (nodes) {\n    const parentElm = parent(nodes);\n    if (parentElm) {\n      parentElm.removeChild(nodes);\n    }\n  }\n};\n","import { each } from '~/support/utils/array';\nimport { attr } from '~/support/dom/attribute';\nimport { contents } from '~/support/dom/traversal';\nimport { removeElements } from '~/support/dom/manipulation';\n\n/**\n * Creates a div DOM node.\n */\nexport const createDiv = (classNames?: string): HTMLDivElement => {\n  const div = document.createElement('div');\n  if (classNames) {\n    attr(div, 'class', classNames);\n  }\n  return div;\n};\n\n/**\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\n * @param html The html string after which the DOM nodes shall be created.\n */\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\n  const createdDiv = createDiv();\n  createdDiv.innerHTML = html.trim();\n\n  return each(contents(createdDiv), (elm) => removeElements(elm));\n};\n","import { each } from '~/support/utils/array';\nimport { isClient } from '~/support/compatibility/server';\nimport { hasOwnProperty } from '~/support/utils/object';\nimport { createDiv } from '~/support/dom/create';\n\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\n\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\n\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\nexport const jsPrefixes: ReadonlyArray<string> = [\n  'WebKit',\n  'Moz',\n  'O',\n  'MS',\n  'webkit',\n  'moz',\n  'o',\n  'ms',\n];\n\nexport const jsCache: { [key: string]: any } = {};\nexport const cssCache: { [key: string]: string } = {};\n\n/**\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\n * @param name The name of the CSS property which shall be get.\n */\nexport const cssProperty = (name: string): string => {\n  let result: string | undefined = cssCache[name];\n\n  if (hasOwnProperty(cssCache, name)) {\n    return result;\n  }\n\n  const uppercasedName: string = firstLetterToUpper(name);\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\n\n  each(cssPrefixes, (prefix: string) => {\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\n    const resultPossibilities: Array<string> = [\n      name, // transition\n      prefix + name, // -webkit-transition\n      prefixWithoutDashes + uppercasedName, // webkitTransition\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\n    ];\n\n    // eslint-disable-next-line no-return-assign\n    return !(result = resultPossibilities.find(\n      (resultPossibility: string) => elmStyle[resultPossibility] !== undefined\n    ));\n  });\n\n  // eslint-disable-next-line no-return-assign\n  return (cssCache[name] = result || '');\n};\n\n/**\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\n * @param property The CSS property to which the CSS property value(s) belong.\n * @param values The value(s) separated by spaces which shall be get.\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\n */\nexport const cssPropertyValue = (property: string, values: string, suffix?: string): string => {\n  const name = `${property} ${values}`;\n  let result: string | undefined = cssCache[name];\n\n  if (hasOwnProperty(cssCache, name)) {\n    return result;\n  }\n\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\n  const possbleValues: Array<string> = values.split(' ');\n  const preparedSuffix: string = suffix || '';\n  const cssPrefixesWithFirstEmpty = [''].concat(cssPrefixes);\n\n  each(possbleValues, (possibleValue: string) => {\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\n      const prop = prefix + possibleValue;\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\n      if (dummyStyle.length) {\n        result = prop;\n        return false;\n      }\n    });\n    return !result;\n  });\n\n  // eslint-disable-next-line no-return-assign\n  return (cssCache[name] = result || '');\n};\n\n/**\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\n * @param name The name of the JS function, object or constructor.\n */\nexport const jsAPI = <T = any>(name: string): T | undefined => {\n  if (isClient()) {\n    let result: any = jsCache[name] || window[name];\n\n    if (hasOwnProperty(jsCache, name)) {\n      return result;\n    }\n\n    each(jsPrefixes, (prefix: string) => {\n      result = result || window[prefix + firstLetterToUpper(name)];\n      return !result;\n    });\n\n    jsCache[name] = result;\n    return result;\n  }\n};\n","import { isClient } from '~/support/compatibility/server';\nimport { jsAPI } from '~/support/compatibility/vendors';\n\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\nexport const IntersectionObserverConstructor =\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\nexport const cAF = jsAPI<typeof cancelAnimationFrame>('cancelAnimationFrame');\nexport const rAF = jsAPI<typeof requestAnimationFrame>('requestAnimationFrame');\nexport const setT = (isClient() && window.setTimeout) as (\n  handler: TimerHandler,\n  timeout?: number\n) => number;\nexport const clearT = (isClient() && window.clearTimeout) as (id?: number) => void;\n","import { isString } from '~/support/utils/types';\nimport { each } from '~/support/utils/array';\nimport { keys } from '~/support/utils/object';\n\ntype ClassContainingElement = Node | Element | false | null | undefined;\ntype ClassName = string | false | null | undefined;\n\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\nconst classListAction = (\n  elm: ClassContainingElement,\n  className: ClassName,\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\n): boolean => {\n  const classList = elm && (elm as Element).classList;\n  let clazz: string;\n  let i = 0;\n  let result = false;\n\n  if (classList && className && isString(className)) {\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\n    result = classes.length > 0;\n    while ((clazz = classes[i++])) {\n      result = !!action(classList, clazz) && result;\n    }\n  }\n  return result;\n};\n\n/**\n * Check whether the given element has the given class name(s).\n * @param elm The element.\n * @param className The class name(s).\n */\nexport const hasClass = (elm: ClassContainingElement, className: ClassName): boolean =>\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\n\n/**\n * Removes the given class name(s) from the given element.\n * @param elm The element.\n * @param className The class name(s) which shall be removed. (separated by spaces)\n */\nexport const removeClass = (elm: ClassContainingElement, className: ClassName): void => {\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\n};\n\n/**\n * Adds the given class name(s) to the given element.\n * @param elm The element.\n * @param className The class name(s) which shall be added. (separated by spaces)\n * @returns A function which removes the added class name(s).\n */\nexport const addClass = (elm: ClassContainingElement, className: ClassName): (() => void) => {\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\n  return removeClass.bind(0, elm, className);\n};\n\n/**\n * Takes two className strings, compares them and returns the difference as array.\n * @param classNameA ClassName A.\n * @param classNameB ClassName B.\n */\nexport const diffClass = (classNameA: ClassName, classNameB: ClassName) => {\n  const classNameASplit = classNameA && classNameA.split(' ');\n  const classNameBSplit = classNameB && classNameB.split(' ');\n  const tempObj = {};\n\n  each(classNameASplit, (className) => {\n    tempObj[className] = 1;\n  });\n  each(classNameBSplit, (className) => {\n    if (tempObj[className]) {\n      delete tempObj[className];\n    } else {\n      tempObj[className] = 1;\n    }\n  });\n\n  return keys(tempObj);\n};\n","import { each } from '~/support/utils/array';\nimport type { WH, XY, TRBL } from '~/support/dom';\nimport type { PlainObject } from '~/typings';\n\n/**\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\n * @param a Object a.\n * @param b Object b.\n * @param props The props which shall be compared.\n */\nexport const equal = <T extends PlainObject>(\n  a: T | undefined,\n  b: T | undefined,\n  props: Array<keyof T>,\n  propMutation?: ((value: any) => any) | null | false\n): boolean => {\n  if (a && b) {\n    let result = true;\n    each(props, (prop) => {\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\n      if (compareA !== compareB) {\n        result = false;\n      }\n    });\n    return result;\n  }\n  return false;\n};\n\n/**\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\n * Also returns false if one of the objects is undefined or null.\n * @param a Object a.\n * @param b Object b.\n */\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\n\n/**\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\n * Also returns false if one of the objects is undefined or null.\n * @param a Object a.\n * @param b Object b.\n */\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\n\n/**\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\n * Also returns false if one of the objects is undefined or null.\n * @param a Object a.\n * @param b Object b.\n */\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\n\n/**\n * Compares two DOM Rects for their equality of their width and height properties\n * Also returns false if one of the DOM Rects is undefined or null.\n * @param a DOM Rect a.\n * @param b DOM Rect b.\n * @param round Whether the values should be rounded.\n */\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\n  equal<DOMRect>(a, b, ['width', 'height'], round && ((value) => Math.round(value)));\n","import { rAF, cAF } from '~/support/compatibility';\nimport { isFunction } from './types';\n\nconst { max } = Math;\nconst animationCurrentTime = () => performance.now();\n\n/**\n * percent: current percent (0 - 1),\n * time: current time (duration * percent),\n * min: start value\n * max: end value\n * duration: duration in ms\n */\nexport type EasingFn = (\n  percent: number,\n  time: number,\n  min: number,\n  max: number,\n  duration: number\n) => number;\n\nexport const animateNumber = (\n  from: number,\n  to: number,\n  duration: number,\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\n  easing?: EasingFn | false\n): ((complete?: boolean) => void) => {\n  let animationFrameId = 0;\n  const timeStart = animationCurrentTime();\n  const finalDuration = max(0, duration);\n  const frame = (complete?: boolean) => {\n    const timeNow = animationCurrentTime();\n    const timeElapsed = timeNow - timeStart;\n    const stopAnimation = timeElapsed >= finalDuration;\n    const percent = complete\n      ? 1\n      : 1 - (max(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\n    const progress =\n      (to - from) *\n        (isFunction(easing)\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\n          : percent) +\n      from;\n    const animationCompleted = stopAnimation || percent === 1;\n\n    onFrame && onFrame(progress, percent, animationCompleted);\n\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\n  };\n  frame();\n  return (complete) => {\n    cAF!(animationFrameId);\n    complete && frame(complete);\n  };\n};\n","import { isNumber, isFunction } from '~/support/utils/types';\nimport { from } from '~/support/utils/array';\nimport { rAF, cAF, setT, clearT } from '~/support/compatibility/apis';\n\ntype DebounceTiming = number | false | null | undefined;\n\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\n  /**\n   * The timeout for debouncing. If null, no debounce is applied.\n   */\n  _timeout?: DebounceTiming | (() => DebounceTiming);\n  /**\n   * A maximum amount of ms. before the function will be called even with debounce.\n   */\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\n  /**\n   * Function which merges parameters for each canceled debounce.\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\n   */\n  _mergeParams?: (\n    prev: Parameters<FunctionToDebounce>,\n    curr: Parameters<FunctionToDebounce>\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\n}\n\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\n  _flush(): void;\n}\n\nexport const noop = () => {}; // eslint-disable-line\n\n/**\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\n */\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\n  let id: number;\n  const setTFn = timeout ? setT : rAF!;\n  const clearTFn = timeout ? clearT : cAF!;\n  return [\n    (callback: () => any) => {\n      clearTFn(id);\n      // @ts-ignore\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\n    },\n    () => clearTFn(id),\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\n};\n\n/**\n * Debounces the given function either with a timeout or a animation frame.\n * @param functionToDebounce The function which shall be debounced.\n * @param options Options for debouncing.\n */\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\n  functionToDebounce: FunctionToDebounce,\n  options?: DebounceOptions<FunctionToDebounce>\n): Debounced<FunctionToDebounce> => {\n  let maxTimeoutId: number | undefined;\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\n  let clear: () => void = noop;\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\n\n  const invokeFunctionToDebounce = function (args: IArguments) {\n    clear();\n    clearT(maxTimeoutId);\n    maxTimeoutId = prevArguments = undefined;\n    clear = noop;\n    // eslint-disable-next-line\n    // @ts-ignore\n    functionToDebounce.apply(this, args);\n  };\n\n  const mergeParms = (\n    curr: Parameters<FunctionToDebounce>\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\n\n  const flush = () => {\n    /* istanbul ignore next */\n    if (clear !== noop) {\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\n    }\n  };\n\n  const debouncedFn = function () {\n    // eslint-disable-next-line prefer-rest-params\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\n\n    if (hasTimeout) {\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\n      const mergeParamsResult = mergeParms(args);\n      const invokedArgs = mergeParamsResult || args;\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\n\n      // if (!mergeParamsResult) {\n      //   invokeFunctionToDebounce(prevArguments || args);\n      // }\n\n      clear();\n      // @ts-ignore\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\n      clear = () => clearTimeoutFn(timeoutId);\n\n      if (hasMaxWait && !maxTimeoutId) {\n        maxTimeoutId = setT(flush, finalMaxWait as number);\n      }\n\n      prevArguments = latestArguments = invokedArgs;\n    } else {\n      invokeFunctionToDebounce(args);\n    }\n  };\n  debouncedFn._flush = flush;\n\n  return debouncedFn as Debounced<FunctionToDebounce>;\n};\n","import { style } from '~/support/dom/style';\n\nexport interface WH<T = number> {\n  w: T;\n  h: T;\n}\n\nconst { round } = Math;\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\nconst zeroObj: WH = {\n  w: 0,\n  h: 0,\n};\n\n/**\n * Returns the window inner- width and height.\n */\nexport const windowSize = (): WH => ({\n  w: window.innerWidth,\n  h: window.innerHeight,\n});\n\n/**\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the scroll- width and height shall be returned.\n */\nexport const offsetSize = (elm: HTMLElement | null | undefined): WH =>\n  elm\n    ? {\n        w: elm.offsetWidth,\n        h: elm.offsetHeight,\n      }\n    : zeroObj;\n\n/**\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the client- width and height shall be returned.\n */\nexport const clientSize = (elm: HTMLElement | false | null | undefined): WH =>\n  elm\n    ? {\n        w: elm.clientWidth,\n        h: elm.clientHeight,\n      }\n    : zeroObj;\n\n/**\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the client- width and height shall be returned.\n */\nexport const scrollSize = (elm: HTMLElement | false | null | undefined): WH =>\n  elm\n    ? {\n        w: elm.scrollWidth,\n        h: elm.scrollHeight,\n      }\n    : zeroObj;\n\n/**\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the fractional- width and height shall be returned.\n */\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): WH => {\n  const cssHeight = parseFloat(style(elm, 'height')) || 0;\n  const cssWidth = parseFloat(style(elm, 'width')) || 0;\n  return {\n    w: cssWidth - round(cssWidth),\n    h: cssHeight - round(cssHeight),\n  };\n};\n\n/**\n * Returns the BoundingClientRect of the passed element.\n * @param elm The element of which the BoundingClientRect shall be returned.\n */\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\n\n/**\n * Determines whether the passed element has any dimensions.\n * @param elm The element.\n */\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\n  elm ? elementHasDimensions(elm as HTMLElement) : false;\n","import { getBoundingClientRect } from '~/support/dom/dimensions';\n\nexport interface XY<T = number> {\n  x: T;\n  y: T;\n}\n\nconst zeroObj: XY = {\n  x: 0,\n  y: 0,\n};\n\n/**\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\n * @param elm The element of which the offset- top and left coordinates shall be returned.\n */\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): XY => {\n  const rect = elm ? getBoundingClientRect(elm) : 0;\n  return rect\n    ? {\n        x: rect.left + window.pageYOffset,\n        y: rect.top + window.pageXOffset,\n      }\n    : zeroObj;\n};\n\n/**\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\n * @param elm The element of which the offset- top and left coordinates shall be returned.\n */\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): XY =>\n  elm\n    ? {\n        x: elm.offsetLeft,\n        y: elm.offsetTop,\n      }\n    : zeroObj;\n","import { isArray, isBoolean, isFunction, isString } from '~/support/utils/types';\r\nimport { keys } from '~/support/utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear } from '~/support/utils/array';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args?: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(isArray(listener) ? listener : [listener], callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = ((\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as any);\r\n\r\n      return removeEvent.bind(0, nameOrEventListeners as any, listenerOrPure as any);\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return runEachAndClear.bind(0, offFns);\r\n  }) as AddEvent<EventArgs>; // sorry!\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    const eventSet = events.get(name);\r\n\r\n    each(from(eventSet), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args as any);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\n  assignDeep,\n  each,\n  isObject,\n  keys,\n  isArray,\n  hasOwnProperty,\n  isFunction,\n  isEmptyObject,\n} from '~/support';\nimport type { DeepPartial, DeepReadonly } from '~/typings';\n\nconst opsStringify = (value: any) =>\n  JSON.stringify(value, (_, val) => {\n    if (isFunction(val)) {\n      throw new Error();\n    }\n    return val;\n  });\n\n/**\n * The overflow behavior of an axis.\n */\nexport type OverflowBehavior =\n  /** No scrolling is possible and the content is clipped. */\n  | 'hidden'\n  /** No scrolling is possible and the content isn't clipped. */\n  | 'visible'\n  /** Scrolling is possible if there is an overflow. */\n  | 'scroll'\n  /**\n   * If the other axis has no overflow the behavior is similar to `visible`.\n   * If the other axis has overflow the behavior is similar to `hidden`.\n   */\n  | 'visible-hidden'\n  /**\n   * If the other axis has no overflow the behavior is similar to `visible`.\n   * If the other axis has overflow the behavior is similar to `scroll`.\n   */\n  | 'visible-scroll';\n\n/**\n * The scrollbars visibility behavior.\n */\nexport type ScrollbarsVisibilityBehavior =\n  /** The scrollbars are always visible. */\n  | 'visible'\n  /** The scrollbars are always hidden. */\n  | 'hidden'\n  /** The scrollbars are only visibile if there is overflow. */\n  | 'auto';\n\n/**\n * The scrollbars auto hide behavior\n */\nexport type ScrollbarsAutoHideBehavior =\n  /** The scrollbars are never hidden automatically. */\n  | 'never'\n  /** The scrollbars are hidden unless the user scrolls. */\n  | 'scroll'\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\n  | 'move'\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\n  | 'leave';\n\n/**\n * Describes the options of a OverlayScrollbars instance.\n */\nexport interface Options {\n  /** Whether the padding shall be absolute. */\n  paddingAbsolute: boolean;\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\n  showNativeOverlaidScrollbars: boolean;\n  /** Customizes the automatic update behavior. */\n  update: {\n    /**\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\n     */\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\n    /**\n     * The debounce which is used to detect content changes.\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\n     * If a single number customizes only the `timeout`.\n     *\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\n     */\n    debounce: [timeout: number, maxWait: number] | number | null;\n    /**\n     * HTML attributes which will trigger an update if they're changed.\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\n     */\n    attributes: string[] | null;\n    /**\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\n     * @param mutation The MutationRecord from the MutationObserver.\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\n     */\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\n  };\n  /** Customizes the overflow behavior per axis. */\n  overflow: {\n    /** The overflow behavior of the horizontal (x) axis. */\n    x: OverflowBehavior;\n    /** The overflow behavior of the vertical (y) axis. */\n    y: OverflowBehavior;\n  };\n  /** Customizes appearance of the scrollbars. */\n  scrollbars: {\n    /**\n     * The scrollbars theme.\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\n     */\n    theme: string | null;\n    /** The scrollbars visibility behavior. */\n    visibility: ScrollbarsVisibilityBehavior;\n    /** The scrollbars auto hide behavior. */\n    autoHide: ScrollbarsAutoHideBehavior;\n    /** The scrollbars auto hide delay in milliseconds. */\n    autoHideDelay: number;\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\n    dragScroll: boolean;\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\n    clickScroll: boolean;\n    /**\n     * An array of pointer types which shall be supported.\n     * Common pointer types are: `mouse`, `pen` and `touch`.\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */\n    pointers: string[] | null;\n  };\n}\n\nexport type ReadonlyOptions = DeepReadonly<Options>;\n\nexport type PartialOptions = DeepPartial<Options>;\n\nexport const defaultOptions: Options = {\n  paddingAbsolute: false,\n  showNativeOverlaidScrollbars: false,\n  update: {\n    elementEvents: [['img', 'load']],\n    debounce: [0, 33],\n    attributes: null,\n    ignoreMutation: null,\n  },\n  overflow: {\n    x: 'scroll',\n    y: 'scroll',\n  },\n  scrollbars: {\n    theme: 'os-theme-dark',\n    visibility: 'auto',\n    autoHide: 'never',\n    autoHideDelay: 1300,\n    dragScroll: true,\n    clickScroll: false,\n    pointers: ['mouse', 'touch', 'pen'],\n  },\n};\n\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\n  const diff: DeepPartial<T> = {};\n  const optionsKeys = keys(newOptions).concat(keys(currOptions));\n\n  each(optionsKeys, (optionKey) => {\n    const currOptionValue = currOptions[optionKey];\n    const newOptionValue = newOptions[optionKey];\n\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\n      assignDeep((diff[optionKey] = {}), getOptionsDiff(currOptionValue, newOptionValue));\n      // delete empty nested objects\n      if (isEmptyObject(diff[optionKey])) {\n        delete diff[optionKey];\n      }\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\n      let isDiff = true;\n\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\n        try {\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\n            isDiff = false;\n          }\n        } catch {}\n      }\n\n      if (isDiff) {\n        diff[optionKey] = newOptionValue;\n      }\n    }\n  });\n\n  return diff;\n};\n","// environment\nexport const classNameEnvironment = 'os-environment';\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\n\n// misc\nexport const classNameScrollbarHidden = `os-scrollbar-hidden`;\n\n// initialize\nexport const dataAttributeInitialize = 'data-overlayscrollbars-initialize';\n\n// host\nexport const dataAttributeHost = 'data-overlayscrollbars';\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\nexport const dataValueHostOverflowVisible = 'overflowVisible';\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\nexport const dataValueHostScrollbarPressed = 'scrollbarPressed';\nexport const dataValueHostUpdating = 'updating';\n\n// viewport\nexport const dataAttributeViewport = 'data-overlayscrollbars-viewport';\nexport const dataValueViewportArrange = 'arrange';\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\nexport const dataValueViewportOverflowVisible = dataValueHostOverflowVisible;\n\n// padding\nexport const dataAttributePadding = 'data-overlayscrollbars-padding';\nexport const dataValuePaddingOverflowVisible = dataValueViewportOverflowVisible;\n\n// content\nexport const dataAttributeContent = 'data-overlayscrollbars-content';\n\n// size observer\nexport const classNameSizeObserver = 'os-size-observer';\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\n\n// trinsic observer\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\n\n// scrollbars\nexport const classNameScrollbarNoCssCustomProps = 'os-no-css-vars';\nexport const classNameScrollbarThemeNone = 'os-theme-none';\nexport const classNameScrollbar = 'os-scrollbar';\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\nexport const classNameScrollbarAutoHidden = `${classNameScrollbar}-auto-hidden`;\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\n","import { each, isArray, keys, push } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\n\r\n/** Describes the instance of a OverlayScrollbars plugin. */\r\nexport type PluginInstance =\r\n  /** A `static` plugin. Its neither bound to a instance nor to the static object. */\r\n  | Record<string, unknown>\r\n  /**\r\n   * A plugin which is bound to either a instance or to the static object.\r\n   * The function will be called multiple times. Once with the static object and each time a new instance is created.\r\n   * The plugin then can add new methods or fields to thow objects.\r\n   * These plugins should be side-effect free and deterministic. (same input produces same output)\r\n   */\r\n  | ((staticObj?: OverlayScrollbarsStatic, instanceObj?: OverlayScrollbars) => void);\r\n\r\n/** Describes a OverlayScrollbars plugin. */\r\nexport type Plugin<T extends PluginInstance = PluginInstance> = {\r\n  [pluginName: string]: T;\r\n};\r\n\r\nconst pluginRegistry: Record<string, PluginInstance> = {};\r\n\r\nexport const getPlugins = () => pluginRegistry;\r\n\r\nexport const addPlugin = (addedPlugin: Plugin | Plugin[]): Plugin[] => {\r\n  const result: Plugin[] = [];\r\n  each((isArray(addedPlugin) ? addedPlugin : [addedPlugin]) as Plugin[], (plugin) => {\r\n    // multiple \"sub-plugins\" per plugin object possible to support \"static\", \"instanceObj\" and \"staticObj\" sub-plugins per plugin\r\n    const pluginNameKeys = keys(plugin);\r\n    each(pluginNameKeys, (key) => {\r\n      push(result, (pluginRegistry[key] = plugin[key]));\r\n    });\r\n  });\r\n  return result;\r\n};\r\n","import {\n  createDOM,\n  style,\n  appendChildren,\n  offsetSize,\n  scrollLeft,\n  scrollTop,\n  on,\n  addClass,\n  equalWH,\n  push,\n  cAF,\n  rAF,\n  stopPropagation,\n} from '~/support';\nimport {\n  classNameSizeObserverListenerScroll,\n  classNameSizeObserverListenerItem,\n  classNameSizeObserverListenerItemFinal,\n} from '~/classnames';\nimport type { Plugin } from '~/plugins';\n\nexport type SizeObserverPluginInstance = {\n  _: (\n    listenerElement: HTMLElement,\n    onSizeChangedCallback: (appear: boolean) => any,\n    observeAppearChange: boolean\n  ) => [appearCallback: () => any, offFns: (() => any)[]];\n};\n\nconst scrollAmount = 3333333;\nconst scrollEventName = 'scroll';\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\n\nexport const SizeObserverPlugin: Plugin<SizeObserverPluginInstance> = /* @__PURE__ */ (() => ({\n  [sizeObserverPluginName]: {\n    _: (listenerElement, onSizeChangedCallback, observeAppearChange) => {\n      const observerElementChildren = createDOM(\n        `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\n      );\n      appendChildren(listenerElement, observerElementChildren);\n      addClass(listenerElement, classNameSizeObserverListenerScroll);\n      const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\n      const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\n      const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\n      const expandElementChild = expandElement?.firstChild as HTMLElement;\n\n      let cacheSize = offsetSize(observerElementChildrenRoot);\n      let currSize = cacheSize;\n      let isDirty = false;\n      let rAFId: number;\n\n      const reset = () => {\n        scrollLeft(expandElement, scrollAmount);\n        scrollTop(expandElement, scrollAmount);\n        scrollLeft(shrinkElement, scrollAmount);\n        scrollTop(shrinkElement, scrollAmount);\n      };\n      const onResized = (appear?: unknown) => {\n        rAFId = 0;\n        if (isDirty) {\n          cacheSize = currSize;\n          onSizeChangedCallback(appear === true);\n        }\n      };\n      const onScroll = (scrollEvent?: Event | false) => {\n        currSize = offsetSize(observerElementChildrenRoot);\n        isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\n\n        if (scrollEvent) {\n          stopPropagation(scrollEvent);\n\n          if (isDirty && !rAFId) {\n            cAF!(rAFId);\n            rAFId = rAF!(onResized);\n          }\n        } else {\n          onResized(scrollEvent === false);\n        }\n\n        reset();\n      };\n      const offListeners = push(\n        [],\n        [on(expandElement, scrollEventName, onScroll), on(shrinkElement, scrollEventName, onScroll)]\n      );\n\n      // lets assume that the divs will never be that large and a constant value is enough\n      style(expandElementChild, {\n        width: scrollAmount,\n        height: scrollAmount,\n      });\n\n      rAF!(reset);\n\n      return [observeAppearChange ? onScroll.bind(0, false) : reset, offListeners];\n    },\n  },\n}))();\n","import { keys, attr, style, noop, each, assignDeep, windowSize, attrClass } from '~/support';\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\nimport type { WH, UpdateCache, XY } from '~/support';\nimport type { StyleObject } from '~/typings';\nimport type { StructureSetupState } from '~/setups/structureSetup';\nimport type {\n  ViewportOverflowState,\n  GetViewportOverflowState,\n  HideNativeScrollbars,\n} from '~/setups/structureSetup/updateSegments/overflowUpdateSegment';\nimport type { InternalEnvironment } from '~/environment';\nimport type { Plugin } from '~/plugins';\n\nexport type ArrangeViewport = (\n  viewportOverflowState: ViewportOverflowState,\n  viewportScrollSize: WH<number>,\n  sizeFraction: WH<number>,\n  directionIsRTL: boolean\n) => boolean;\n\nexport type UndoViewportArrangeResult = [\n  redoViewportArrange: () => void,\n  overflowState?: ViewportOverflowState\n];\n\nexport type UndoArrangeViewport = (\n  showNativeOverlaidScrollbars: boolean,\n  directionIsRTL: boolean,\n  viewportOverflowState?: ViewportOverflowState\n) => UndoViewportArrangeResult;\n\nexport type ScrollbarsHidingPluginInstance = {\n  _createUniqueViewportArrangeElement(env: InternalEnvironment): HTMLStyleElement | false;\n  _overflowUpdateSegment(\n    doViewportArrange: boolean,\n    flexboxGlue: boolean,\n    viewport: HTMLElement,\n    viewportArrange: HTMLStyleElement | false | null | undefined,\n    getState: () => StructureSetupState,\n    getViewportOverflowState: GetViewportOverflowState,\n    hideNativeScrollbars: HideNativeScrollbars\n  ): [ArrangeViewport, UndoArrangeViewport];\n  _envWindowZoom(): (\n    envInstance: InternalEnvironment,\n    updateNativeScrollbarSizeCache: UpdateCache<XY<number>>,\n    triggerEvent: () => void\n  ) => void;\n};\n\nlet contentArrangeCounter = 0;\nconst { round, abs } = Math;\nconst getWindowDPR = (): number => {\n  // eslint-disable-next-line\n  // @ts-ignore\n  const dDPI = window.screen.deviceXDPI || 0;\n  // eslint-disable-next-line\n  // @ts-ignore\n  const sDPI = window.screen.logicalXDPI || 1;\n  return window.devicePixelRatio || dDPI / sDPI;\n};\n\nconst diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\n  const absValOne = abs(valOne);\n  const absValTwo = abs(valTwo);\n  return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\n};\n\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\n\nexport const ScrollbarsHidingPlugin: Plugin<ScrollbarsHidingPluginInstance> =\n  /* @__PURE__ */ (() => ({\n    [scrollbarsHidingPluginName]: {\n      _createUniqueViewportArrangeElement: (env: InternalEnvironment) => {\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _cssCustomProperties } = env;\n        const create =\n          !_cssCustomProperties &&\n          !_nativeScrollbarsHiding &&\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\n        const result = create ? document.createElement('style') : false;\n\n        if (result) {\n          attr(\n            result,\n            'id',\n            `${dataAttributeViewport}-${dataValueViewportArrange}-${contentArrangeCounter}`\n          );\n          contentArrangeCounter++;\n        }\n\n        return result;\n      },\n      _overflowUpdateSegment: (\n        doViewportArrange,\n        flexboxGlue,\n        viewport,\n        viewportArrange,\n        getState,\n        getViewportOverflowState,\n        hideNativeScrollbars\n      ) => {\n        /**\n         * Sets the styles of the viewport arrange element.\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\n         * @param viewportScrollSize The content scroll size.\n         * @param directionIsRTL Whether the direction is RTL or not.\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\n         */\n        const arrangeViewport: ArrangeViewport = (\n          viewportOverflowState,\n          viewportScrollSize,\n          sizeFraction,\n          directionIsRTL\n        ) => {\n          if (doViewportArrange) {\n            const { _viewportPaddingStyle } = getState();\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\n              ? 'paddingRight'\n              : 'paddingLeft';\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\n              viewportArrangeHorizontalPaddingKey\n            ] as number;\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\n            const arrangeSize = {\n              w:\n                hideOffsetY && arrangeY\n                  ? `${\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\n                    }px`\n                  : '',\n              h:\n                hideOffsetX && arrangeX\n                  ? `${\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\n                    }px`\n                  : '',\n            };\n\n            // adjust content arrange / before element\n            if (viewportArrange) {\n              const { sheet } = viewportArrange;\n              if (sheet) {\n                const { cssRules } = sheet;\n                if (cssRules) {\n                  if (!cssRules.length) {\n                    sheet.insertRule(\n                      `#${attr(\n                        viewportArrange,\n                        'id'\n                      )} + [${dataAttributeViewport}~='${dataValueViewportArrange}']::before {}`,\n                      0\n                    );\n                  }\n\n                  // @ts-ignore\n                  const ruleStyle = cssRules[0].style;\n\n                  ruleStyle.width = arrangeSize.w;\n                  ruleStyle.height = arrangeSize.h;\n                }\n              }\n            } else {\n              style<'--os-vaw' | '--os-vah'>(viewport, {\n                '--os-vaw': arrangeSize.w,\n                '--os-vah': arrangeSize.h,\n              });\n            }\n          }\n\n          return doViewportArrange;\n        };\n\n        /**\n         * Removes all styles applied because of the viewport arrange strategy.\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\n         * @param directionIsRTL Whether the direction is RTL or not.\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\n         */\n        const undoViewportArrange: UndoArrangeViewport = (\n          showNativeOverlaidScrollbars,\n          directionIsRTL,\n          viewportOverflowState?\n        ) => {\n          if (doViewportArrange) {\n            const finalViewportOverflowState =\n              viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\n            const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\n            const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\n            const finalPaddingStyle: StyleObject = {};\n            const assignProps = (props: string) =>\n              each(props.split(' '), (prop) => {\n                finalPaddingStyle[prop] = viewportPaddingStyle[prop];\n              });\n\n            if (arrangeX) {\n              assignProps('marginBottom paddingTop paddingBottom');\n            }\n\n            if (arrangeY) {\n              assignProps('marginLeft marginRight paddingLeft paddingRight');\n            }\n\n            const prevStyle = style(viewport, keys(finalPaddingStyle));\n\n            // add class\n            attrClass(viewport, dataAttributeViewport, dataValueViewportArrange);\n\n            if (!flexboxGlue) {\n              finalPaddingStyle.height = '';\n            }\n\n            style(viewport, finalPaddingStyle);\n\n            return [\n              () => {\n                hideNativeScrollbars(\n                  finalViewportOverflowState,\n                  directionIsRTL,\n                  doViewportArrange,\n                  prevStyle\n                );\n                style(viewport, prevStyle);\n                // remove class\n                attrClass(viewport, dataAttributeViewport, dataValueViewportArrange, true);\n              },\n              finalViewportOverflowState,\n            ];\n          }\n          return [noop];\n        };\n\n        return [arrangeViewport, undoViewportArrange];\n      },\n      _envWindowZoom: () => {\n        let size = { w: 0, h: 0 };\n        let dpr = 0;\n\n        return (envInstance, updateNativeScrollbarSizeCache, triggerEvent) => {\n          const sizeNew = windowSize();\n          const deltaSize = {\n            w: sizeNew.w - size.w,\n            h: sizeNew.h - size.h,\n          };\n\n          if (deltaSize.w === 0 && deltaSize.h === 0) {\n            return;\n          }\n\n          const deltaAbsSize = {\n            w: abs(deltaSize.w),\n            h: abs(deltaSize.h),\n          };\n          const deltaAbsRatio = {\n            w: abs(round(sizeNew.w / (size.w / 100.0))),\n            h: abs(round(sizeNew.h / (size.h / 100.0))),\n          };\n          const dprNew = getWindowDPR();\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\n          const dprChanged = dprNew !== dpr && dprNew > 0;\n          const isZoom = deltaIsBigger && difference && dprChanged;\n\n          if (isZoom) {\n            const [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\n\n            assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\n\n            if (scrollbarSizeChanged) {\n              triggerEvent();\n            }\n          }\n\n          size = sizeNew;\n          dpr = dprNew;\n        };\n      },\n    },\n  }))();\n","import { animateNumber, noop } from '~/support';\nimport type { Plugin } from '~/plugins';\n\nexport type ClickScrollPluginInstance = {\n  _: (\n    moveHandleRelative: (deltaMovement: number) => void,\n    getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\n    startOffset: number,\n    handleLength: number,\n    relativeTrackPointerOffset: number\n  ) => () => void;\n};\n\nexport const clickScrollPluginName = '__osClickScrollPlugin';\n\nexport const ClickScrollPlugin: Plugin<ClickScrollPluginInstance> = /* @__PURE__ */ (() => ({\n  [clickScrollPluginName]: {\n    _: (\n      moveHandleRelative,\n      getHandleOffset,\n      startOffset,\n      handleLength,\n      relativeTrackPointerOffset\n    ) => {\n      // click scroll animation\n      let iteration = 0;\n      let clear = noop;\n      const animateClickScroll = (clickScrollProgress: number) => {\n        clear = animateNumber(\n          clickScrollProgress,\n          clickScrollProgress + handleLength * Math.sign(startOffset),\n          133,\n          (animationProgress, _, animationCompleted) => {\n            moveHandleRelative(animationProgress);\n            const handleStartBound = getHandleOffset();\n            const handleEndBound = handleStartBound + handleLength;\n            const mouseBetweenHandleBounds =\n              relativeTrackPointerOffset >= handleStartBound &&\n              relativeTrackPointerOffset <= handleEndBound;\n\n            if (animationCompleted && !mouseBetweenHandleBounds) {\n              if (iteration) {\n                animateClickScroll(animationProgress);\n              } else {\n                const firstIterationPauseTimeout = setTimeout(() => {\n                  animateClickScroll(animationProgress);\n                }, 222);\n                clear = () => {\n                  clearTimeout(firstIterationPauseTimeout);\n                };\n              }\n              iteration++;\n            }\n          }\n        );\n      };\n\n      animateClickScroll(0);\n\n      return () => clear();\n    },\n  },\n}))();\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport type { DeepPartial } from '~/typings';\n\ntype StaticInitialization = HTMLElement | false | null;\ntype DynamicInitialization = HTMLElement | boolean | null;\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\n  StaticInitializationElement<Args>,\n  (...args: Args) => any\n> extends (...args: infer P) => any\n  ? (...args: P) => HTMLElement\n  : never;\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\n  DynamicInitializationElement<Args>,\n  (...args: Args) => any\n> extends (...args: infer P) => any\n  ? (...args: P) => HTMLElement\n  : never;\n\n/**\n * Static elements are elements which MUST be present in the final DOM.\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\n */\nexport type StaticInitializationElement<Args extends any[]> =\n  /** A function which returns the the StaticInitialization value. */\n  | ((...args: Args) => StaticInitialization)\n  /** The StaticInitialization value. */\n  | StaticInitialization;\n\n/**\n * Dynamic elements are elements which CAN be present in the final DOM.\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\n * With `true` an appropriate element is generated automatically.\n * With `false`, `null` or `undefined` the element won't be in the DOM.\n */\nexport type DynamicInitializationElement<Args extends any[]> =\n  /** A function which returns the the DynamicInitialization value. */\n  | ((...args: Args) => DynamicInitialization)\n  /** The DynamicInitialization value. */\n  | DynamicInitialization;\n\n/**\n * Describes how a OverlayScrollbar instance should initialize.\n */\nexport type Initialization = {\n  /**\n   * Customizes which elements are generated and used.\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\n   * Any passed function should be a \"pure\" function. (same input produces same output)\n   */\n  elements: {\n    /**\n     * Assign a custom element as the host element.\n     * Only relevant if the target element is a Textarea.\n     */\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\n    /** Assign a custom element as the viewport element. */\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\n    /** Assign a custom element as the padding element or force the element not to be generated. */\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\n    /** Assign a custom element as the content element or force the element not to be generated. */\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\n  };\n  /**\n   * Customizes elements related to the scrollbars.\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\n   */\n  scrollbars: {\n    slot: DynamicInitializationElement<\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\n    >;\n  };\n  /**\n   * Customizes the cancelation behavior.\n   */\n  cancel: {\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\n    nativeScrollbarsOverlaid: boolean;\n    /**\n     * Whether the initialization shall be canceled if its applied to a body element.\n     * With `true` an initialization is always canceled, with `false` its never canceled.\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\n     */\n    body: boolean | null;\n  };\n};\n\nexport type PartialInitialization = DeepPartial<Initialization>;\n\n/** The initialization target element. */\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\n\n/**\n * The initialization target object.\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\n */\nexport type InitializationTargetObject = PartialInitialization & {\n  target: InitializationTargetElement;\n};\n\n/** The initialization target. */\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\n\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\n  args: any,\n  value: any\n): T => (isFunction(value) ? value.apply(0, args) : value);\n\nexport const staticInitializationElement = <Args extends any[]>(\n  args: Args,\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\n  staticInitializationElementValue?: StaticInitializationElement<Args>\n): HTMLElement => {\n  const staticInitialization = isUndefined(staticInitializationElementValue)\n    ? defaultStaticInitializationElement\n    : staticInitializationElementValue;\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\n    args,\n    staticInitialization\n  );\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\n};\n\nexport const dynamicInitializationElement = <Args extends any[]>(\n  args: Args,\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\n): HTMLElement | false => {\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\n    ? defaultDynamicInitializationElement\n    : dynamicInitializationElementValue;\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\n    args,\n    dynamicInitialization\n  );\n  return (\n    !!resolvedInitialization &&\n    (isHTMLElement(resolvedInitialization)\n      ? resolvedInitialization\n      : fallbackDynamicInitializationElement.apply(0, args))\n  );\n};\n\nexport const cancelInitialization = (\n  isBody: boolean,\n  defaultCancelInitialization: Initialization['cancel'],\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\n): boolean => {\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding } = getEnvironment();\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\n    defaultCancelInitialization;\n\n  const resolvedNativeScrollbarsOverlaid =\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\n\n  const finalNativeScrollbarsOverlaid =\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\n    resolvedNativeScrollbarsOverlaid;\n  const finalDocumentScrollingElement =\n    isBody &&\n    (isNull(resolvedDocumentScrollingElement)\n      ? !_nativeScrollbarsHiding\n      : resolvedDocumentScrollingElement);\n\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\n};\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import { assignDeep, hasOwnProperty } from '~/support';\nimport type { PartialOptions, ReadonlyOptions } from '~/options';\n\nexport type SetupElements<T extends Record<string, any>> = [elements: T, destroy: () => void];\n\nexport type SetupUpdate<Args extends any[], R> = (\n  changedOptions: PartialOptions,\n  force: boolean,\n  ...args: Args\n) => R;\n\nexport type SetupUpdateCheckOption = <T>(path: string) => [value: T, changed: boolean];\n\nexport type SetupUpdateSegment<Hints extends Record<string, any>> = (\n  updateHints: Hints,\n  checkOption: SetupUpdateCheckOption,\n  force: boolean\n) => Partial<Hints> | void;\n\nexport type SetupState<T extends Record<string, any>> = [\n  get: () => T,\n  set: (newState: Partial<T>) => void\n];\n\nexport type Setup<\n  DynamicState,\n  StaticState extends Record<string, any> = Record<string, any>,\n  Args extends any[] = [],\n  R = void\n> = [update: SetupUpdate<Args, R>, state: (() => DynamicState) & StaticState, destroy: () => void];\n\nconst getPropByPath = <T>(obj: any, path: string): T =>\n  obj\n    ? path.split('.').reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\n    : undefined;\n\nexport const createOptionCheck =\n  (\n    options: ReadonlyOptions,\n    changedOptions: PartialOptions,\n    force?: boolean\n  ): SetupUpdateCheckOption =>\n  (path: string) =>\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\n\nexport const createState = <S extends Record<string, any>>(initialState: S): SetupState<S> => {\n  let state: S = initialState;\n  return [\n    () => state,\n    (newState: Partial<S>) => {\n      state = assignDeep({}, state, newState);\n    },\n  ];\n};\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  indexOf,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  noop,\r\n  on,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNameScrollbarHidden,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { getPlugins, scrollbarsHidingPluginName } from '~/plugins';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n  resolveInitialization as generalResolveInitialization,\r\n} from '~/initialization';\r\nimport type { ScrollbarsHidingPluginInstance } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportIsContent: boolean;\r\n  _viewportHasClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string\r\n  ) => boolean;\r\n  _viewportAddRemoveClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string,\r\n    add?: boolean\r\n  ) => void;\r\n}\r\n\r\nconst tabIndexStr = 'tabindex';\r\nconst createNewDiv = createDiv.bind(0, '');\r\n\r\nconst unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n  appendChildren(parent(elm), contents(elm));\r\n  removeElements(elm);\r\n};\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n    | ScrollbarsHidingPluginInstance\r\n    | undefined;\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const isBody = targetElement === ownerDocument.body;\r\n  const wnd = ownerDocument.defaultView as Window;\r\n  const staticInitializationElement = generalStaticInitializationElement.bind(0, [targetElement]);\r\n  const dynamicInitializationElement = generalDynamicInitializationElement.bind(0, [targetElement]);\r\n  const resolveInitialization = generalResolveInitialization.bind(0, [targetElement]);\r\n  const generateViewportElement = staticInitializationElement.bind(\r\n    0,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = dynamicInitializationElement.bind(\r\n    0,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // check the default contentElement\r\n  // if truthy (so the element would be present in the DOM) the passed element is the final content element and viewport is generated\r\n  // if falsy the passed element is the final viewport element and the content element is generated\r\n  const viewportIsContent =\r\n    !viewportIsTarget &&\r\n    isHTMLElement(possibleViewportElement) &&\r\n    possibleViewportElement === possibleContentElement;\r\n  const defaultContentElementPresent =\r\n    viewportIsContent && !!resolveInitialization(defaultContentInitialization);\r\n  const viewportIstContentViewport = defaultContentElementPresent\r\n    ? generateViewportElement()\r\n    : possibleViewportElement;\r\n  const viewportIsContentContent = defaultContentElementPresent\r\n    ? possibleContentElement\r\n    : generateContentElement();\r\n  const nonBodyViewportElement = viewportIsContent\r\n    ? viewportIstContentViewport\r\n    : possibleViewportElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : nonBodyViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const contentElement = viewportIsContent ? viewportIsContentContent : possibleContentElement;\r\n  const activeElm = ownerDocument.activeElement;\r\n  const setViewportFocus = !viewportIsTarget && wnd.top === wnd && activeElm === targetElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultPaddingInitialization,\r\n        paddingInitialization\r\n      ),\r\n    _content: contentElement,\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _windowElm: wnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportIsContent: viewportIsContent,\r\n    _viewportHasClass: (viewportAttributeClassName: string, hostAttributeClassName: string) =>\r\n      hasAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName\r\n      ),\r\n    _viewportAddRemoveClass: (\r\n      viewportAttributeClassName: string,\r\n      hostAttributeClassName: string,\r\n      add?: boolean\r\n    ) =>\r\n      attrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName,\r\n        add\r\n      ),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key: string) => {\r\n    const value = evaluatedTargetObj[key];\r\n    return push(arr, value && !parent(value) ? value : false);\r\n  }, [] as HTMLElement[]);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? indexOf(generatedElements, elm) > -1 : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttr(_host, dataAttributeHost);\r\n      removeAttr(_host, dataAttributeInitialize);\r\n      removeAttr(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttr(docElement, dataAttributeHost);\r\n        removeAttr(docElement, dataAttributeInitialize);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const appendElements = () => {\r\n    attr(_host, dataAttributeHost, viewportIsTarget ? 'viewport' : 'host');\r\n    attr(_padding, dataAttributePadding, '');\r\n    attr(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      attr(_viewport, dataAttributeViewport, '');\r\n    }\r\n\r\n    const removeHtmlClass =\r\n      isBody && !viewportIsTarget\r\n        ? addClass(parent(targetElement), classNameScrollbarHidden)\r\n        : noop;\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHtmlClass();\r\n      removeAttr(_padding, dataAttributePadding);\r\n      removeAttr(_content, dataAttributeContent);\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n      removeAttr(_viewport, dataAttributeViewport);\r\n\r\n      if (elementIsGenerated(_content)) {\r\n        unwrap(_content);\r\n      }\r\n      if (elementIsGenerated(_viewport)) {\r\n        unwrap(_viewport);\r\n      }\r\n      if (elementIsGenerated(_padding)) {\r\n        unwrap(_padding);\r\n      }\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      attrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden, true);\r\n      push(destroyFns, removeAttr.bind(0, _viewport, dataAttributeViewport));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, removeElements.bind(0, _viewportArrange));\r\n    }\r\n    if (setViewportFocus) {\r\n      const ogTabindex = attr(_viewport, tabIndexStr);\r\n\r\n      attr(_viewport, tabIndexStr, '-1');\r\n      _viewport.focus();\r\n\r\n      const revertViewportTabIndex = () =>\r\n        ogTabindex ? attr(_viewport, tabIndexStr, ogTabindex) : removeAttr(_viewport, tabIndexStr);\r\n      const off = on(ownerDocument, 'pointerdown keydown', () => {\r\n        revertViewportTabIndex();\r\n        off();\r\n      });\r\n\r\n      push(destroyFns, [revertViewportTabIndex, off]);\r\n    } else if (activeElm && (activeElm as HTMLElement).focus) {\r\n      (activeElm as HTMLElement).focus();\r\n    }\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, runEachAndClear.bind(0, destroyFns)];\r\n};\r\n","import { style } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport type { CreateStructureUpdateSegment } from '~/setups/structureSetup/structureSetup.update';\n\n/**\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\n * @param structureUpdateHub\n * @returns\n */\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment = (\n  structureSetupElements,\n  state\n) => {\n  const { _content } = structureSetupElements;\n  const [getState] = state;\n\n  return (updateHints) => {\n    const { _flexboxGlue } = getEnvironment();\n    const { _heightIntrinsic } = getState();\n    const { _heightIntrinsicChanged } = updateHints;\n    const heightIntrinsicChanged = (_content || !_flexboxGlue) && _heightIntrinsicChanged;\n\n    if (heightIntrinsicChanged) {\n      style(_content, {\n        height: _heightIntrinsic ? '' : '100%',\n      });\n    }\n\n    return {\n      _sizeChanged: heightIntrinsicChanged,\n      _contentMutation: heightIntrinsicChanged,\n    };\n  };\n};\n","import { createCache, topRightBottomLeft, equalTRBL, style, assignDeep } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport type { StyleObject } from '~/typings';\nimport type { CreateStructureUpdateSegment } from '~/setups/structureSetup/structureSetup.update';\n\n/**\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\n * @param structureUpdateHub\n * @returns\n */\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\n  structureSetupElements,\n  state\n) => {\n  const [getState, setState] = state;\n  const { _host, _padding, _viewport, _viewportIsTarget: _isSingleElm } = structureSetupElements;\n  const [updatePaddingCache, currentPaddingCache] = createCache(\n    {\n      _equal: equalTRBL,\n      _initialValue: topRightBottomLeft(),\n    },\n    topRightBottomLeft.bind(0, _host, 'padding', '')\n  );\n\n  return (updateHints, checkOption, force) => {\n    let [padding, paddingChanged] = currentPaddingCache(force);\n    const { _nativeScrollbarsHiding: _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\n    const { _directionIsRTL } = getState();\n    const { _sizeChanged, _contentMutation, _directionChanged } = updateHints;\n    const [paddingAbsolute, paddingAbsoluteChanged] = checkOption('paddingAbsolute');\n    const contentMutation = !_flexboxGlue && _contentMutation;\n\n    if (_sizeChanged || paddingChanged || contentMutation) {\n      [padding, paddingChanged] = updatePaddingCache(force);\n    }\n\n    const paddingStyleChanged =\n      !_isSingleElm && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\n\n    if (paddingStyleChanged) {\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarStyling);\n      const paddingHorizontal = padding.r + padding.l;\n      const paddingVertical = padding.t + padding.b;\n\n      const paddingStyle: StyleObject = {\n        marginRight: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\n        marginBottom: paddingRelative ? -paddingVertical : 0,\n        marginLeft: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\n        top: paddingRelative ? -padding.t : 0,\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\n        width: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\n      };\n      const viewportStyle: StyleObject = {\n        paddingTop: paddingRelative ? padding.t : 0,\n        paddingRight: paddingRelative ? padding.r : 0,\n        paddingBottom: paddingRelative ? padding.b : 0,\n        paddingLeft: paddingRelative ? padding.l : 0,\n      };\n\n      // if there is no padding element apply the style to the viewport element instead\n      style(_padding || _viewport, paddingStyle);\n      style(_viewport, viewportStyle);\n\n      setState({\n        _padding: padding,\n        _paddingAbsolute: !paddingRelative,\n        _viewportPaddingStyle: _padding\n          ? viewportStyle\n          : assignDeep({}, paddingStyle, viewportStyle),\n      });\n    }\n\n    return {\n      _paddingStyleChanged: paddingStyleChanged,\n    };\n  };\n};\n","import {\n  createCache,\n  attr,\n  style,\n  scrollSize,\n  fractionalSize,\n  equalWH,\n  clientSize,\n  equalXY,\n  attrClass,\n  noop,\n} from '~/support';\nimport { getEnvironment } from '~/environment';\nimport {\n  dataAttributeHost,\n  dataAttributeHostOverflowX,\n  dataAttributeHostOverflowY,\n  dataValueHostScrollbarHidden,\n  dataValueHostOverflowVisible,\n  dataValueViewportScrollbarHidden,\n  dataValueViewportOverflowVisible,\n  dataAttributeViewport,\n  dataAttributePadding,\n  dataValuePaddingOverflowVisible,\n} from '~/classnames';\nimport { getPlugins, scrollbarsHidingPluginName } from '~/plugins';\nimport type { WH, XY } from '~/support';\nimport type {\n  ScrollbarsHidingPluginInstance,\n  ArrangeViewport,\n  UndoArrangeViewport,\n} from '~/plugins/scrollbarsHidingPlugin';\nimport type { StyleObject, OverflowStyle } from '~/typings';\nimport type { OverflowBehavior } from '~/options';\nimport type { CreateStructureUpdateSegment } from '~/setups/structureSetup/structureSetup.update';\n\nexport interface ViewportOverflowState {\n  _scrollbarsHideOffset: XY<number>;\n  _scrollbarsHideOffsetArrange: XY<boolean>;\n  _overflowScroll: XY<boolean>;\n  _overflowStyle: XY<OverflowStyle>;\n}\n\nexport type GetViewportOverflowState = (\n  showNativeOverlaidScrollbars: boolean,\n  viewportStyleObj?: StyleObject\n) => ViewportOverflowState;\n\nexport type HideNativeScrollbars = (\n  viewportOverflowState: ViewportOverflowState,\n  directionIsRTL: boolean,\n  viewportArrange: boolean,\n  viewportStyleObj: StyleObject\n) => void;\n\nconst { max } = Math;\nconst max0 = max.bind(0, 0);\nconst strVisible = 'visible';\nconst strHidden = 'hidden';\nconst overlaidScrollbarsHideOffset = 42;\nconst whCacheOptions = {\n  _equal: equalWH,\n  _initialValue: { w: 0, h: 0 },\n};\nconst xyCacheOptions = {\n  _equal: equalXY,\n  _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\n};\n\nconst getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\n  const tollerance = window.devicePixelRatio % 1 !== 0 ? 1 : 0;\n  const amount = {\n    w: max0(viewportScrollSize.w - viewportClientSize.w),\n    h: max0(viewportScrollSize.h - viewportClientSize.h),\n  };\n\n  return {\n    w: amount.w > tollerance ? amount.w : 0,\n    h: amount.h > tollerance ? amount.h : 0,\n  };\n};\n\nconst overflowIsVisible = (overflowBehavior: string) => overflowBehavior.indexOf(strVisible) === 0;\n\n/**\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\n * @param structureUpdateHub\n * @returns\n */\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\n  structureSetupElements,\n  state\n) => {\n  const [getState, setState] = state;\n  const {\n    _host,\n    _padding,\n    _viewport,\n    _viewportArrange,\n    _viewportIsTarget,\n    _viewportAddRemoveClass,\n    _isBody,\n    _windowElm,\n  } = structureSetupElements;\n  const {\n    _nativeScrollbarsSize,\n    _flexboxGlue,\n    _nativeScrollbarsHiding,\n    _nativeScrollbarsOverlaid,\n  } = getEnvironment();\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\n    | ScrollbarsHidingPluginInstance\n    | undefined;\n  const doViewportArrange =\n    !_viewportIsTarget &&\n    !_nativeScrollbarsHiding &&\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\n\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\n    whCacheOptions,\n    fractionalSize.bind(0, _viewport)\n  );\n\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\n    WH<number>\n  >(whCacheOptions, scrollSize.bind(0, _viewport));\n\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\n    createCache<WH<number>>(whCacheOptions);\n\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\n\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\n\n  /**\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\n   * @param viewportOverflowState The current overflow state.\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\n   */\n  const fixFlexboxGlue = (\n    viewportOverflowState: ViewportOverflowState,\n    heightIntrinsic: boolean\n  ) => {\n    style(_viewport, {\n      height: '',\n    });\n\n    if (heightIntrinsic) {\n      const { _paddingAbsolute, _padding: padding } = getState();\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\n      const fSize = fractionalSize(_host);\n      const hostClientSize = clientSize(_host);\n\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\n      const isContentBox = style(_viewport, 'boxSizing') === 'content-box';\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\n\n      style(_viewport, {\n        height:\n          hostClientSize.h +\n          fSize.h +\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\n          paddingVertical,\n      });\n    }\n  };\n\n  /**\n   * Gets the current overflow state of the viewport.\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\n   * @returns A object which contains informations about the current overflow state.\n   */\n  const getViewportOverflowState: GetViewportOverflowState = (\n    showNativeOverlaidScrollbars,\n    viewportStyleObj?\n  ) => {\n    const arrangeHideOffset =\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\n    const getStatePerAxis = (\n      styleKey: string,\n      isOverlaid: boolean,\n      nativeScrollbarSize: number\n    ) => {\n      const overflowStyle = style(_viewport, styleKey);\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\n      const objectPrefferedOverflowStyle = viewportStyleObj\n        ? viewportStyleObj[styleKey]\n        : overflowStyle;\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\n      const scrollbarsHideOffset =\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\n\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\n        overflowStyle: OverflowStyle,\n        overflowScroll: boolean,\n        scrollbarsHideOffset: number,\n        scrollbarsHideOffsetArrange: boolean\n      ];\n    };\n\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\n      getStatePerAxis('overflowX', _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\n      getStatePerAxis('overflowY', _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\n\n    return {\n      _overflowStyle: {\n        x: xOverflowStyle,\n        y: yOverflowStyle,\n      },\n      _overflowScroll: {\n        x: xOverflowScroll,\n        y: yOverflowScroll,\n      },\n      _scrollbarsHideOffset: {\n        x: xScrollbarsHideOffset,\n        y: yScrollbarsHideOffset,\n      },\n      _scrollbarsHideOffsetArrange: {\n        x: xScrollbarsHideOffsetArrange,\n        y: yScrollbarsHideOffsetArrange,\n      },\n    };\n  };\n\n  /**\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\n   * @param overflowAmount The overflow amount.\n   * @param overflow The overflow behavior according to the options.\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\n   * @returns A object which represents the newly set overflow state.\n   */\n  const setViewportOverflowState = (\n    showNativeOverlaidScrollbars: boolean,\n    hasOverflow: XY<boolean>,\n    overflowOption: XY<OverflowBehavior>,\n    viewportStyleObj: StyleObject\n  ): ViewportOverflowState => {\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\n      const overflowVisible = overflowIsVisible(behavior);\n      const overflowVisibleBehavior =\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\n      return [\n        hasOverflowAxis && !overflowVisible ? behavior : '',\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\n      ];\n    };\n\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\n\n    viewportStyleObj.overflowX = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\n    viewportStyleObj.overflowY = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\n\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\n  };\n\n  /**\n   * Hides the native scrollbars according to the passed parameters.\n   * @param viewportOverflowState The viewport overflow state.\n   * @param directionIsRTL Whether the direction is RTL or not.\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\n   */\n  const hideNativeScrollbars: HideNativeScrollbars = (\n    viewportOverflowState,\n    directionIsRTL,\n    viewportArrange,\n    viewportStyleObj\n  ) => {\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\n    const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? 'marginLeft' : 'marginRight';\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\n      ? 'paddingLeft'\n      : 'paddingRight';\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\n    const verticalMarginValue = viewportPaddingStyle.marginBottom as number;\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\n    const verticalPaddingValue = viewportPaddingStyle.paddingBottom as number;\n\n    // horizontal\n    viewportStyleObj.width = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\n\n    // vertical\n    viewportStyleObj.marginBottom = -hideOffsetX + verticalMarginValue;\n\n    // viewport arrange additional styles\n    if (viewportArrange) {\n      viewportStyleObj[viewportHorizontalPaddingKey] =\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\n      viewportStyleObj.paddingBottom = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\n    }\n  };\n\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\n        doViewportArrange,\n        _flexboxGlue,\n        _viewport,\n        _viewportArrange,\n        getState,\n        getViewportOverflowState,\n        hideNativeScrollbars\n      )\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\n\n  return (updateHints, checkOption, force) => {\n    const {\n      _sizeChanged,\n      _hostMutation,\n      _contentMutation,\n      _paddingStyleChanged,\n      _heightIntrinsicChanged,\n      _directionChanged,\n    } = updateHints;\n    const { _heightIntrinsic, _directionIsRTL } = getState();\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\n      checkOption<boolean>('showNativeOverlaidScrollbars');\n    const [overflow, overflowChanged] = checkOption<XY<OverflowBehavior>>('overflow');\n\n    const showNativeOverlaidScrollbars =\n      showNativeOverlaidScrollbarsOption &&\n      _nativeScrollbarsOverlaid.x &&\n      _nativeScrollbarsOverlaid.y;\n    const adjustFlexboxGlue =\n      !_viewportIsTarget &&\n      !_flexboxGlue &&\n      (_sizeChanged ||\n        _contentMutation ||\n        _hostMutation ||\n        showNativeOverlaidScrollbarsChanged ||\n        _heightIntrinsicChanged);\n    const overflowXVisible = overflowIsVisible(overflow.x);\n    const overflowYVisible = overflowIsVisible(overflow.y);\n    const overflowVisible = overflowXVisible || overflowYVisible;\n\n    let sizeFractionCache = getCurrentSizeFraction(force);\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(force);\n    let overflowAmuntCache = getCurrentOverflowAmountCache(force);\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(force);\n\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\n\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\n      _viewportAddRemoveClass(\n        dataValueViewportScrollbarHidden,\n        dataValueHostScrollbarHidden,\n        !showNativeOverlaidScrollbars\n      );\n    }\n\n    if (adjustFlexboxGlue) {\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\n    }\n\n    if (\n      _sizeChanged ||\n      _paddingStyleChanged ||\n      _contentMutation ||\n      _directionChanged ||\n      showNativeOverlaidScrollbarsChanged\n    ) {\n      if (overflowVisible) {\n        _viewportAddRemoveClass(\n          dataValueViewportOverflowVisible,\n          dataValueHostOverflowVisible,\n          false\n        );\n      }\n\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\n        showNativeOverlaidScrollbars,\n        _directionIsRTL,\n        preMeasureViewportOverflowState\n      );\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(force));\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\n        updateViewportScrollSizeCache(force));\n      const viewportclientSize = clientSize(_viewport);\n      let arrangedViewportScrollSize = viewportScrollSize;\n      let arrangedViewportClientSize = viewportclientSize;\n\n      redoViewportArrange();\n\n      // if re measure is required (only required if content arrange strategy is used)\n      if (\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\n        undoViewportArrangeOverflowState &&\n        !showNativeOverlaidScrollbars &&\n        arrangeViewport(\n          undoViewportArrangeOverflowState,\n          viewportScrollSize,\n          sizeFraction,\n          _directionIsRTL\n        )\n      ) {\n        arrangedViewportClientSize = clientSize(_viewport);\n        arrangedViewportScrollSize = scrollSize(_viewport);\n      }\n\n      const overflowAmountScrollSize = {\n        w: max0(max(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\n        h: max0(max(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\n      };\n      const overflowAmountClientSize = {\n        w: max0(\n          (viewportIsTargetBody\n            ? _windowElm.innerWidth\n            : arrangedViewportClientSize.w + max0(viewportclientSize.w - viewportScrollSize.w)) +\n            sizeFraction.w\n        ),\n        h: max0(\n          (viewportIsTargetBody\n            ? _windowElm.innerHeight + sizeFraction.h\n            : arrangedViewportClientSize.h + max0(viewportclientSize.h - viewportScrollSize.h)) +\n            sizeFraction.h\n        ),\n      };\n\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\n      overflowAmuntCache = updateOverflowAmountCache(\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\n        force\n      );\n    }\n\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\n    const hasOverflow = {\n      x: overflowAmount.w > 0,\n      y: overflowAmount.h > 0,\n    };\n    const removeClipping =\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\n\n    if (\n      _paddingStyleChanged ||\n      _directionChanged ||\n      sizeFractionChanged ||\n      viewportScrollSizeChanged ||\n      overflowEdgeChanged ||\n      overflowAmountChanged ||\n      overflowChanged ||\n      showNativeOverlaidScrollbarsChanged ||\n      adjustFlexboxGlue\n    ) {\n      const viewportStyle: StyleObject = {\n        marginRight: 0,\n        marginBottom: 0,\n        marginLeft: 0,\n        width: '',\n        overflowY: '',\n        overflowX: '',\n      };\n      const viewportOverflowState = setViewportOverflowState(\n        showNativeOverlaidScrollbars,\n        hasOverflow,\n        overflow,\n        viewportStyle\n      );\n      const viewportArranged = arrangeViewport(\n        viewportOverflowState,\n        viewportScrollSize,\n        sizeFraction,\n        _directionIsRTL\n      );\n\n      if (!_viewportIsTarget) {\n        hideNativeScrollbars(\n          viewportOverflowState,\n          _directionIsRTL,\n          viewportArranged,\n          viewportStyle\n        );\n      }\n\n      if (adjustFlexboxGlue) {\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\n      }\n\n      if (_viewportIsTarget) {\n        attr(_host, dataAttributeHostOverflowX, viewportStyle.overflowX as string);\n        attr(_host, dataAttributeHostOverflowY, viewportStyle.overflowY as string);\n      } else {\n        style(_viewport, viewportStyle);\n      }\n    }\n\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\n    attrClass(_padding, dataAttributePadding, dataValuePaddingOverflowVisible, removeClipping);\n    if (!_viewportIsTarget) {\n      attrClass(\n        _viewport,\n        dataAttributeViewport,\n        dataValueViewportOverflowVisible,\n        overflowVisible\n      );\n    }\n\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\n    );\n\n    setState({\n      _overflowStyle: overflowStyle,\n      _overflowEdge: {\n        x: overflowEdge.w,\n        y: overflowEdge.h,\n      },\n      _overflowAmount: {\n        x: overflowAmount.w,\n        y: overflowAmount.h,\n      },\n      _hasOverflow: hasOverflow,\n    });\n\n    return {\n      _overflowStyleChanged: overflowStyleChanged,\n      _overflowEdgeChanged: overflowEdgeChanged,\n      _overflowAmountChanged: overflowAmountChanged,\n    };\n  };\n};\n","import { each, scrollLeft, scrollTop, assignDeep, keys } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport { dataValueHostUpdating } from '~/classnames';\nimport {\n  createTrinsicUpdateSegment,\n  createPaddingUpdateSegment,\n  createOverflowUpdateSegment,\n} from '~/setups/structureSetup/updateSegments';\nimport type { SetupState, SetupUpdateSegment, SetupUpdateCheckOption } from '~/setups';\nimport type { StructureSetupState } from '~/setups/structureSetup';\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\n\nexport type CreateStructureUpdateSegment = (\n  structureSetupElements: StructureSetupElementsObj,\n  state: SetupState<StructureSetupState>\n) => StructureSetupUpdateSegment;\n\nexport type StructureSetupUpdateSegment = SetupUpdateSegment<StructureSetupUpdateHints>;\n\nexport type StructureSetupUpdate = (\n  checkOption: SetupUpdateCheckOption,\n  updateHints: Partial<StructureSetupUpdateHints>,\n  force?: boolean\n) => StructureSetupUpdateHints;\n\nexport interface StructureSetupUpdateHints {\n  _sizeChanged: boolean;\n  _directionChanged: boolean;\n  _heightIntrinsicChanged: boolean;\n  _overflowEdgeChanged: boolean;\n  _overflowAmountChanged: boolean;\n  _overflowStyleChanged: boolean;\n  _paddingStyleChanged: boolean;\n  _hostMutation: boolean;\n  _contentMutation: boolean;\n}\n\nconst prepareUpdateHints = <T extends StructureSetupUpdateHints>(\n  leading: Required<T>,\n  adaptive?: Partial<T>,\n  force?: boolean\n): Required<T> => {\n  const result = {};\n  const finalAdaptive = adaptive || {};\n  const objKeys = keys(leading).concat(keys(finalAdaptive));\n\n  each(objKeys, (key) => {\n    const leadingValue = leading[key];\n    const adaptiveValue = finalAdaptive[key];\n    result[key] = !!(force || leadingValue || adaptiveValue);\n  });\n\n  return result as Required<T>;\n};\n\nexport const createStructureSetupUpdate = (\n  structureSetupElements: StructureSetupElementsObj,\n  state: SetupState<StructureSetupState>\n): StructureSetupUpdate => {\n  const { _target, _viewport, _viewportAddRemoveClass, _viewportIsTarget } = structureSetupElements;\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _flexboxGlue } = getEnvironment();\n  const doViewportArrange =\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\n\n  const updateSegments: StructureSetupUpdateSegment[] = [\n    createTrinsicUpdateSegment(structureSetupElements, state),\n    createPaddingUpdateSegment(structureSetupElements, state),\n    createOverflowUpdateSegment(structureSetupElements, state),\n  ];\n\n  return (\n    checkOption: SetupUpdateCheckOption,\n    updateHints: Partial<StructureSetupUpdateHints>,\n    force?: boolean\n  ) => {\n    const initialUpdateHints = prepareUpdateHints(\n      assignDeep(\n        {\n          _sizeChanged: false,\n          _paddingStyleChanged: false,\n          _directionChanged: false,\n          _heightIntrinsicChanged: false,\n          _overflowEdgeChanged: false,\n          _overflowAmountChanged: false,\n          _overflowStyleChanged: false,\n          _hostMutation: false,\n          _contentMutation: false,\n        },\n        updateHints\n      ),\n      {},\n      force\n    );\n    const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\n    const scrollOffsetX = adjustScrollOffset && scrollLeft(_viewport);\n    const scrollOffsetY = adjustScrollOffset && scrollTop(_viewport);\n    _viewportAddRemoveClass('', dataValueHostUpdating, true);\n\n    let adaptivedUpdateHints: Required<StructureSetupUpdateHints> = initialUpdateHints;\n    each(updateSegments, (updateSegment) => {\n      adaptivedUpdateHints = prepareUpdateHints<StructureSetupUpdateHints>(\n        adaptivedUpdateHints,\n        updateSegment(adaptivedUpdateHints, checkOption, !!force) || {},\n        force\n      );\n    });\n\n    scrollLeft(_viewport, scrollOffsetX);\n    scrollTop(_viewport, scrollOffsetY);\n    _viewportAddRemoveClass('', dataValueHostUpdating);\n\n    if (!_viewportIsTarget) {\n      scrollLeft(_target, 0);\n      scrollTop(_target, 0);\n    }\n\n    return adaptivedUpdateHints;\n  };\n};\n","import {\n  each,\n  noop,\n  debounce,\n  indexOf,\n  isString,\n  MutationObserverConstructor,\n  isEmptyArray,\n  on,\n  attr,\n  is,\n  find,\n  push,\n  from,\n  runEachAndClear,\n} from '~/support';\n\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\n\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\n\ninterface DOMObserverOptionsBase {\n  _attributes?: string[];\n  /**\n   * A function which can ignore a changed attribute if it returns true.\n   * for DOMTargetObserver this applies to the changes to the observed target\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\n   */\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\n}\n\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\n  _nestedTargetSelector?: string;\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\n}\n\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\n  /**\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\n   */\n  _styleChangingAttributes?: string[];\n}\n\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\n\nexport type DOMObserverEventContentChange =\n  | Array<ContentChangeArrayItem>\n  | false\n  | null\n  | undefined;\n\nexport type DOMObserverIgnoreContentChange = (\n  mutation: MutationRecord,\n  isNestedTarget: boolean,\n  domObserverTarget: HTMLElement,\n  domObserverOptions?: DOMContentObserverOptions\n) => boolean;\n\nexport type DOMObserverIgnoreTargetChange = (\n  target: Node,\n  attributeName: string,\n  oldAttributeValue: string | null,\n  newAttributeValue: string | null\n) => boolean;\n\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\n  ? DOMContentObserverCallback\n  : DOMTargetObserverCallback;\n\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\n  ? DOMContentObserverOptions\n  : DOMTargetObserverOptions;\n\nexport type DOMObserver<ContentObserver extends boolean> = [\n  destroy: () => void,\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\n];\n\ntype EventContentChangeUpdateElement = (\n  getElements?: (selector: string) => Node[],\n  removed?: boolean\n) => void;\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\n\n/**\n * Creates a set of helper functions to observe events of elements inside the target element.\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\n * @param callback Callback which is called if one of the elements emits the corresponding event.\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\n */\nconst createEventContentChange = (\n  target: HTMLElement,\n  callback: (...args: any) => any,\n  eventContentChange?: DOMObserverEventContentChange\n): EventContentChange => {\n  let map: WeakMap<Node, (() => any)[]> | undefined; // weak map to prevent memory leak for detached elements\n  let destroyed = false;\n  const destroy = () => {\n    destroyed = true;\n  };\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\n    if (eventContentChange) {\n      const eventElmList = eventContentChange.reduce<Array<[Node[], string]>>((arr, item) => {\n        if (item) {\n          const [selector, eventNames] = item;\n          const elements =\n            eventNames &&\n            selector &&\n            (getElements ? getElements(selector) : find(selector, target));\n\n          if (elements && elements.length && eventNames && isString(eventNames)) {\n            push(arr, [elements, eventNames.trim()], true);\n          }\n        }\n        return arr;\n      }, []);\n\n      each(eventElmList, (item) =>\n        each(item[0], (elm) => {\n          const eventNames = item[1];\n          const entries = map!.get(elm) || [];\n          const isTargetChild = target.contains(elm);\n\n          if (isTargetChild) {\n            const off = on(elm, eventNames, (event: Event) => {\n              if (destroyed) {\n                off();\n                map!.delete(elm);\n              } else {\n                callback(event);\n              }\n            });\n            map!.set(elm, push(entries, off));\n          } else {\n            runEachAndClear(entries);\n            map!.delete(elm);\n          }\n        })\n      );\n    }\n  };\n\n  if (eventContentChange) {\n    map = new WeakMap();\n    updateElements();\n  }\n\n  return [destroy, updateElements];\n};\n\n/**\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\n * @param target The element which shall be observed.\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\n * @param callback The callback which gets called if a change was detected.\n * @param options The options for DOM change detection.\n * @returns A object which represents the instance of the DOM observer.\n */\nexport const createDOMObserver = <ContentObserver extends boolean>(\n  target: HTMLElement,\n  isContentObserver: ContentObserver,\n  callback: DOMObserverCallback<ContentObserver>,\n  options?: DOMObserverOptions<ContentObserver>\n): DOMObserver<ContentObserver> => {\n  let isConnected = false;\n  const {\n    _attributes,\n    _styleChangingAttributes,\n    _eventContentChange,\n    _nestedTargetSelector,\n    _ignoreTargetChange,\n    _ignoreContentChange,\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\n  const debouncedEventContentChange = debounce(\n    () => {\n      if (isConnected) {\n        (callback as DOMContentObserverCallback)(true);\n      }\n    },\n    { _timeout: 33, _maxDelay: 99 }\n  );\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\n    target,\n    debouncedEventContentChange,\n    _eventContentChange\n  );\n\n  // MutationObserver\n  const finalAttributes = _attributes || [];\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\n  const observedAttributes = finalAttributes.concat(finalStyleChangingAttributes);\n  const observerCallback = (\n    mutations: MutationRecord[],\n    fromRecords?: true\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\n    const ignoreTargetChange = _ignoreTargetChange || noop;\n    const ignoreContentChange = _ignoreContentChange || noop;\n    const totalChangedNodes: Set<Node> = new Set();\n    const targetChangedAttrs: Set<string> = new Set();\n    let targetStyleChanged = false;\n    let contentChanged = false;\n    let childListChanged = false;\n\n    each(mutations, (mutation) => {\n      const {\n        attributeName,\n        target: mutationTarget,\n        type,\n        oldValue,\n        addedNodes,\n        removedNodes,\n      } = mutation;\n      const isAttributesType = type === 'attributes';\n      const isChildListType = type === 'childList';\n      const targetIsMutationTarget = target === mutationTarget;\n      const attributeValue =\n        isAttributesType && isString(attributeName)\n          ? attr(mutationTarget as HTMLElement, attributeName!)\n          : 0;\n      const attributeChanged = attributeValue !== 0 && oldValue !== attributeValue;\n      const styleChangingAttrChanged =\n        indexOf(finalStyleChangingAttributes, attributeName) > -1 && attributeChanged;\n\n      // if is content observer and something changed in children\n      if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\n        const notOnlyAttrChanged = !isAttributesType;\n        const contentAttrChanged = isAttributesType && attributeChanged;\n        const isNestedTarget =\n          contentAttrChanged && _nestedTargetSelector && is(mutationTarget, _nestedTargetSelector);\n        const baseAssertion = isNestedTarget\n          ? !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\n          : notOnlyAttrChanged || contentAttrChanged;\n        const contentFinalChanged =\n          baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\n\n        each(addedNodes, (node) => totalChangedNodes.add(node));\n        each(removedNodes, (node) => totalChangedNodes.add(node));\n\n        contentChanged = contentChanged || contentFinalChanged;\n        childListChanged = childListChanged || isChildListType;\n      }\n      // if is target observer and target attr changed\n      if (\n        !isContentObserver &&\n        targetIsMutationTarget &&\n        attributeChanged &&\n        !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\n      ) {\n        targetChangedAttrs.add(attributeName!);\n        targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\n      }\n    });\n\n    // adds / removes the new elements from the event content change\n    if (totalChangedNodes.size > 0) {\n      updateEventContentChangeElements((selector: string) =>\n        from(totalChangedNodes).reduce<Node[]>((arr, node) => {\n          push(arr, find(selector, node));\n          return is(node, selector) ? push(arr, node) : arr;\n        }, [])\n      );\n    }\n\n    if (isContentObserver) {\n      !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\n      return [false] as Parameters<DOMObserverCallback<ContentObserver>>;\n    }\n\n    if (targetChangedAttrs.size > 0 || targetStyleChanged) {\n      const args: Parameters<DOMTargetObserverCallback> = [\n        from(targetChangedAttrs),\n        targetStyleChanged,\n      ];\n      !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\n\n      return args as Parameters<DOMObserverCallback<ContentObserver>>;\n    }\n  };\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!((mutations) =>\n    observerCallback(mutations)\n  );\n\n  // Connect\n  mutationObserver.observe(target, {\n    attributes: true,\n    attributeOldValue: true,\n    attributeFilter: observedAttributes,\n    subtree: isContentObserver,\n    childList: isContentObserver,\n    characterData: isContentObserver,\n  });\n  isConnected = true;\n\n  return [\n    () => {\n      if (isConnected) {\n        destroyEventContentChange();\n        mutationObserver.disconnect();\n        isConnected = false;\n      }\n    },\n    () => {\n      if (isConnected) {\n        debouncedEventContentChange._flush();\n\n        const records = mutationObserver.takeRecords();\n        return !isEmptyArray(records) && observerCallback(records, true);\n      }\n    },\n  ];\n};\n","import {\r\n  createCache,\r\n  createDOM,\r\n  scrollLeft,\r\n  scrollTop,\r\n  runEachAndClear,\r\n  removeElements,\r\n  on,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  isArray,\r\n  isBoolean,\r\n  removeClass,\r\n  isObject,\r\n  stopPropagation,\r\n  appendChildren,\r\n  directionIsRTL,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getPlugins, sizeObserverPluginName } from '~/plugins';\r\nimport type { CacheValues } from '~/support';\r\nimport type { SizeObserverPluginInstance } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  _direction?: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = [destroy: () => void, append: () => void];\r\n\r\nconst scrollAmount = 3333333;\r\nconst domRectHasDimensions = (rect?: DOMRectReadOnly) => rect && (rect.height || rect.width);\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _direction: observeDirectionChange = false, _appear: observeAppearChange = false } =\r\n    options || {};\r\n  const sizeObserverPlugin = getPlugins()[sizeObserverPluginName] as\r\n    | SizeObserverPluginInstance\r\n    | undefined;\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const baseElements = createDOM(\r\n    `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n  );\r\n  const sizeObserver = baseElements[0] as HTMLElement;\r\n  const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n  const getIsDirectionRTL = directionIsRTL.bind(0, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | undefined>({\r\n    _initialValue: undefined,\r\n    _alwaysUpdateValues: true,\r\n    _equal: (currVal, newVal) =>\r\n      !(\r\n        !currVal || // if no initial value\r\n        // if from display: none to display: block\r\n        (!domRectHasDimensions(currVal) && domRectHasDimensions(newVal))\r\n      ),\r\n  });\r\n  const onSizeChangedCallbackProxy = (\r\n    sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry[] | Event | boolean\r\n  ) => {\r\n    const isResizeObserverCall =\r\n      isArray(sizeChangedContext) &&\r\n      sizeChangedContext.length > 0 &&\r\n      isObject(sizeChangedContext[0]);\r\n\r\n    const hasDirectionCache =\r\n      !isResizeObserverCall && isBoolean((sizeChangedContext as CacheValues<boolean>)[0]);\r\n\r\n    let skip = false;\r\n    let appear: boolean | number | undefined = false;\r\n    let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n    // if triggered from RO.\r\n    if (isResizeObserverCall) {\r\n      const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n        (sizeChangedContext as ResizeObserverEntry[]).pop()!.contentRect\r\n      );\r\n      const hasDimensions = domRectHasDimensions(currRContentRect);\r\n      const hadDimensions = domRectHasDimensions(prevContentRect);\r\n      skip = !prevContentRect || !hasDimensions; // skip on initial RO. call or if display is none\r\n      appear = !hadDimensions && hasDimensions;\r\n\r\n      doDirectionScroll = !skip; // direction scroll when not skipping\r\n    }\r\n    // else if its triggered with DirectionCache\r\n    else if (hasDirectionCache) {\r\n      [, doDirectionScroll] = sizeChangedContext as CacheValues<boolean>; // direction scroll when DirectionCache changed, false otherwise\r\n    }\r\n    // else if it triggered with appear from polyfill\r\n    else {\r\n      appear = sizeChangedContext === true;\r\n    }\r\n\r\n    if (observeDirectionChange && doDirectionScroll) {\r\n      const rtl = hasDirectionCache\r\n        ? (sizeChangedContext as CacheValues<boolean>)[0]\r\n        : directionIsRTL(sizeObserver);\r\n      scrollLeft(\r\n        sizeObserver,\r\n        rtl\r\n          ? rtlScrollBehavior.n\r\n            ? -scrollAmount\r\n            : rtlScrollBehavior.i\r\n            ? 0\r\n            : scrollAmount\r\n          : scrollAmount\r\n      );\r\n      scrollTop(sizeObserver, scrollAmount);\r\n    }\r\n\r\n    if (!skip) {\r\n      onSizeChangedCallback({\r\n        _sizeChanged: !hasDirectionCache,\r\n        _directionIsRTLCache: hasDirectionCache\r\n          ? (sizeChangedContext as CacheValues<boolean>)\r\n          : undefined,\r\n        _appear: !!appear,\r\n      });\r\n    }\r\n  };\r\n  const offListeners: (() => void)[] = [];\r\n  let appearCallback: ((...args: any) => any) | false = observeAppearChange\r\n    ? onSizeChangedCallbackProxy\r\n    : false;\r\n\r\n  return [\r\n    () => {\r\n      runEachAndClear(offListeners);\r\n      removeElements(sizeObserver);\r\n    },\r\n    () => {\r\n      if (ResizeObserverConstructor) {\r\n        const resizeObserverInstance = new ResizeObserverConstructor(onSizeChangedCallbackProxy);\r\n        resizeObserverInstance.observe(listenerElement);\r\n        push(offListeners, () => {\r\n          resizeObserverInstance.disconnect();\r\n        });\r\n      } else if (sizeObserverPlugin) {\r\n        const [pluginAppearCallback, pluginOffListeners] = sizeObserverPlugin._(\r\n          listenerElement,\r\n          onSizeChangedCallbackProxy,\r\n          observeAppearChange\r\n        );\r\n        appearCallback = pluginAppearCallback;\r\n        push(offListeners, pluginOffListeners);\r\n      }\r\n\r\n      if (observeDirectionChange) {\r\n        const [updateDirectionIsRTLCache] = createCache(\r\n          {\r\n            _initialValue: undefined,\r\n          },\r\n          getIsDirectionRTL\r\n        );\r\n\r\n        push(\r\n          offListeners,\r\n          on(sizeObserver, 'scroll', (event: Event) => {\r\n            const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n            const [directionIsRTLCache, directionIsRTLCacheChanged, directionIsRTLCachePrevious] =\r\n              directionIsRTLCacheValues;\r\n            if (directionIsRTLCacheChanged) {\r\n              removeClass(listenerElement, 'ltr rtl');\r\n              if (directionIsRTLCache) {\r\n                addClass(listenerElement, 'rtl');\r\n              } else {\r\n                addClass(listenerElement, 'ltr');\r\n              }\r\n\r\n              onSizeChangedCallbackProxy([\r\n                !!directionIsRTLCache,\r\n                directionIsRTLCacheChanged,\r\n                directionIsRTLCachePrevious,\r\n              ]);\r\n            }\r\n\r\n            stopPropagation(event);\r\n          })\r\n        );\r\n      }\r\n\r\n      // appearCallback is always needed on scroll-observer strategy to reset it\r\n      if (appearCallback) {\r\n        addClass(sizeObserver, classNameSizeObserverAppear);\r\n        push(\r\n          offListeners,\r\n          on(sizeObserver, 'animationstart', appearCallback, {\r\n            // Fire only once for \"CSS is ready\" event if ResizeObserver strategy is used\r\n            _once: !!ResizeObserverConstructor,\r\n          })\r\n        );\r\n      }\r\n\r\n      if (ResizeObserverConstructor || sizeObserverPlugin) {\r\n        appendChildren(target, sizeObserver);\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  removeElements,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  destroy: () => void,\r\n  append: () => void,\r\n  update: () => void | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\nconst isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n  (ioEntryOrSize as WH<number>).h === 0 ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const offListeners: (() => void)[] = [];\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue?: IntersectionObserverEntry | WH<number>,\r\n    fromRecords?: true\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n\r\n      if (heightIntrinsicChanged) {\r\n        !fromRecords && onTrinsicChangedCallback(heightIntrinsic);\r\n        return [heightIntrinsic];\r\n      }\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    entries: IntersectionObserverEntry[],\r\n    fromRecords?: true\r\n  ) => {\r\n    if (entries && entries.length > 0) {\r\n      return triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n    }\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      runEachAndClear(offListeners);\r\n      removeElements(trinsicObserver);\r\n    },\r\n    () => {\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          (entries) => intersectionObserverCallback(entries),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(offListeners, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        const [destroySizeObserver, appendSizeObserver] = createSizeObserver(\r\n          trinsicObserver,\r\n          onSizeChanged\r\n        );\r\n        push(offListeners, destroySizeObserver);\r\n        appendSizeObserver();\r\n        onSizeChanged();\r\n      }\r\n\r\n      appendChildren(target, trinsicObserver);\r\n    },\r\n    () => {\r\n      if (intersectionObserverInstance) {\r\n        return intersectionObserverCallback(intersectionObserverInstance.takeRecords(), true);\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  debounce,\r\n  isArray,\r\n  isNumber,\r\n  each,\r\n  indexOf,\r\n  isString,\r\n  attr,\r\n  removeAttr,\r\n  keys,\r\n  liesBetween,\r\n  scrollSize,\r\n  equalWH,\r\n  createCache,\r\n  fractionalSize,\r\n  isFunction,\r\n  ResizeObserverConstructor,\r\n  closest,\r\n  assignDeep,\r\n  push,\r\n  scrollLeft,\r\n  scrollTop,\r\n  noop,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueHostOverflowVisible,\r\n  dataValueHostUpdating,\r\n  classNameScrollbar,\r\n  dataValueViewportArrange,\r\n  dataAttributeViewport,\r\n  dataValueViewportOverflowVisible,\r\n} from '~/classnames';\r\nimport { createSizeObserver, createTrinsicObserver, createDOMObserver } from '~/observers';\r\nimport type { DOMObserver, SizeObserverCallbackParams } from '~/observers';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { SetupState, SetupUpdateCheckOption } from '~/setups';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  StructureSetupUpdate,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups/structureSetup/structureSetup.update';\r\n\r\nexport type StructureSetupObserversUpdate = (checkOption: SetupUpdateCheckOption) => void;\r\n\r\nexport type StructureSetupObservers = [\r\n  destroy: () => void,\r\n  appendElements: () => void,\r\n  updateObservers: () => Partial<StructureSetupUpdateHints>,\r\n  updateObserversOptions: StructureSetupObserversUpdate\r\n];\r\n\r\ntype ExcludeFromTuple<T extends readonly any[], E> = T extends [infer F, ...infer R]\r\n  ? [F] extends [E]\r\n    ? ExcludeFromTuple<R, E>\r\n    : [F, ...ExcludeFromTuple<R, E>]\r\n  : [];\r\n\r\nconst hostSelector = `[${dataAttributeHost}]`;\r\n\r\n// TODO: observer textarea attrs if textarea\r\n\r\nconst viewportSelector = `[${dataAttributeViewport}]`;\r\nconst viewportAttrsFromTarget = ['tabindex'];\r\nconst baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\nconst baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\nexport const createStructureSetupObservers = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  setState: SetupState<StructureSetupState>[1],\r\n  structureSetupUpdate: (\r\n    ...args: ExcludeFromTuple<Parameters<StructureSetupUpdate>, Parameters<StructureSetupUpdate>[0]>\r\n  ) => any\r\n): StructureSetupObservers => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let contentMutationObserver: DOMObserver<true> | undefined;\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _flexboxGlue } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const hasOver = _viewportHasClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible\r\n      );\r\n      const hasVpStyle = _viewportHasClass(dataValueViewportArrange, '');\r\n      const scrollOffsetX = hasVpStyle && scrollLeft(_viewport);\r\n      const scrollOffsetY = hasVpStyle && scrollTop(_viewport);\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible, dataValueHostOverflowVisible);\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '');\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible,\r\n        hasOver\r\n      );\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '', hasVpStyle);\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n      scrollLeft(_viewport, scrollOffsetX);\r\n      scrollTop(_viewport, scrollOffsetY);\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : baseStyleChangingAttrs.concat(baseStyleChangingAttrsTextarea);\r\n  const structureSetupUpdateWithDebouncedAdaptiveUpdateHints = debounce(structureSetupUpdate, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        keys(prevObj)\r\n          .concat(keys(currObj))\r\n          .reduce((obj, key) => {\r\n            obj[key] = prevObj[key] || currObj[key];\r\n            return obj;\r\n          }, {}),\r\n      ] as [Partial<StructureSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (indexOf(viewportAttrsFromTarget, attribute) > -1) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const onTrinsicChanged = (heightIntrinsicCache: CacheValues<boolean>, fromRecords?: true) => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: Partial<StructureSetupUpdateHints> = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n    setState({ _heightIntrinsic: heightIntrinsic });\r\n\r\n    !fromRecords && structureSetupUpdate(updateHints);\r\n    return updateHints;\r\n  };\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const updateFn =\r\n      !_sizeChanged || _appear\r\n        ? structureSetupUpdate\r\n        : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    let directionChanged = false;\r\n    if (_directionIsRTLCache) {\r\n      const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache;\r\n      directionChanged = directionIsRTLChanged;\r\n\r\n      setState({ _directionIsRTL: directionIsRTL });\r\n    }\r\n\r\n    updateFn({ _sizeChanged, _directionChanged: directionChanged });\r\n  };\r\n  const onContentMutation = (contentChangedThroughEvent: boolean, fromRecords?: true) => {\r\n    const [, contentSizeChanged] = updateContentSizeCache();\r\n    const updateHints: Partial<StructureSetupUpdateHints> = {\r\n      _contentMutation: contentSizeChanged,\r\n    };\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent\r\n      ? structureSetupUpdate\r\n      : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    if (contentSizeChanged) {\r\n      !fromRecords && updateFn(updateHints);\r\n    }\r\n    return updateHints;\r\n  };\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ) => {\r\n    const updateHints: Partial<StructureSetupUpdateHints> = { _hostMutation: targetStyleChanged };\r\n    if (targetStyleChanged) {\r\n      !fromRecords && structureSetupUpdateWithDebouncedAdaptiveUpdateHints(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    return updateHints;\r\n  };\r\n\r\n  const [destroyTrinsicObserver, appendTrinsicObserver, updateTrinsicObserver] =\r\n    _content || !_flexboxGlue ? createTrinsicObserver(_host, onTrinsicChanged) : [noop, noop, noop];\r\n  const [destroySizeObserver, appendSizeObserver] = !_viewportIsTarget\r\n    ? createSizeObserver(_host, onSizeChanged, {\r\n        _appear: true,\r\n        _direction: true,\r\n      })\r\n    : [noop, noop];\r\n  const [destroyHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: baseStyleChangingAttrs.concat(viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor(onSizeChanged.bind(0, { _sizeChanged: true }));\r\n\r\n  viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n  updateViewportAttrsFromHost();\r\n\r\n  return [\r\n    () => {\r\n      destroyTrinsicObserver();\r\n      destroySizeObserver();\r\n      contentMutationObserver && contentMutationObserver[0](); // destroy\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n      destroyHostMutationObserver();\r\n    },\r\n    () => {\r\n      // order is matter!\r\n      appendSizeObserver();\r\n      appendTrinsicObserver();\r\n    },\r\n    () => {\r\n      const updateHints: Partial<StructureSetupUpdateHints> = {};\r\n      const hostUpdateResult = updateHostMutationObserver();\r\n      const trinsicUpdateResult = updateTrinsicObserver();\r\n      const contentUpdateResult = contentMutationObserver && contentMutationObserver[1](); // update\r\n\r\n      if (hostUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onHostMutation.apply(\r\n            0,\r\n            push(hostUpdateResult, true) as [\r\n              ...updateResult: typeof hostUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      if (trinsicUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onTrinsicChanged.apply(\r\n            0,\r\n            push(trinsicUpdateResult as any[], true) as [\r\n              ...updateResult: typeof trinsicUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      if (contentUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onContentMutation.apply(\r\n            0,\r\n            push(contentUpdateResult, true) as [\r\n              ...updateResult: typeof contentUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    (checkOption) => {\r\n      const [ignoreMutation] = checkOption<string[] | null>('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = checkOption<string[] | null>('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = checkOption<Array<[string, string]> | null>(\r\n        'update.elementEvents'\r\n      );\r\n      const [debounceValue, debounceChanged] = checkOption<Array<number> | number | null>(\r\n        'update.debounce'\r\n      );\r\n      const updateContentMutationObserver = elementEventsChanged || attributesChanged;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (updateContentMutationObserver) {\r\n        if (contentMutationObserver) {\r\n          contentMutationObserver[1](); // update\r\n          contentMutationObserver[0](); // destroy\r\n        }\r\n        contentMutationObserver = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(target, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(target, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        structureSetupUpdateWithDebouncedAdaptiveUpdateHints._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  createEventListenerHub,\r\n  directionIsRTL,\r\n  isEmptyObject,\r\n  keys,\r\n  scrollLeft,\r\n  scrollTop,\r\n} from '~/support';\r\nimport { createState, createOptionCheck } from '~/setups/setups';\r\nimport { createStructureSetupElements } from '~/setups/structureSetup/structureSetup.elements';\r\nimport { createStructureSetupUpdate } from '~/setups/structureSetup/structureSetup.update';\r\nimport { createStructureSetupObservers } from '~/setups/structureSetup/structureSetup.observers';\r\nimport type { StructureSetupUpdateHints } from '~/setups/structureSetup/structureSetup.update';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { TRBL, XY, EventListener } from '~/support';\r\nimport type { PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { Setup } from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface StructureSetupStaticState {\r\n  _elements: StructureSetupElementsObj;\r\n  _appendElements: () => void;\r\n  _addOnUpdatedListener: (listener: EventListener<StructureSetupEventMap, 'u'>) => void;\r\n}\r\n\r\ntype StructureSetupEventMap = {\r\n  u: [updateHints: StructureSetupUpdateHints, changedOptions: PartialOptions, force: boolean];\r\n};\r\n\r\nconst initialXYNumber = { x: 0, y: 0 };\r\nconst createInitialStructureSetupUpdateState = (\r\n  elements: StructureSetupElementsObj\r\n): StructureSetupState => ({\r\n  _padding: {\r\n    t: 0,\r\n    r: 0,\r\n    b: 0,\r\n    l: 0,\r\n  },\r\n  _paddingAbsolute: false,\r\n  _viewportPaddingStyle: {\r\n    marginRight: 0,\r\n    marginBottom: 0,\r\n    marginLeft: 0,\r\n    paddingTop: 0,\r\n    paddingRight: 0,\r\n    paddingBottom: 0,\r\n    paddingLeft: 0,\r\n  },\r\n  _overflowEdge: initialXYNumber,\r\n  _overflowAmount: initialXYNumber,\r\n  _overflowStyle: {\r\n    x: 'hidden',\r\n    y: 'hidden',\r\n  },\r\n  _hasOverflow: {\r\n    x: false,\r\n    y: false,\r\n  },\r\n  _heightIntrinsic: false,\r\n  _directionIsRTL: directionIsRTL(elements._host),\r\n});\r\n\r\nexport const createStructureSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions\r\n): Setup<StructureSetupState, StructureSetupStaticState, [], boolean> => {\r\n  const checkOptionsFallback = createOptionCheck(options, {});\r\n  const [addEvent, removeEvent, triggerEvent] = createEventListenerHub<StructureSetupEventMap>();\r\n  const [elements, appendStructureElements, destroyElements] = createStructureSetupElements(target);\r\n  const state = createState(createInitialStructureSetupUpdateState(elements));\r\n  const [getState, setState] = state;\r\n  const updateStructure = createStructureSetupUpdate(elements, state);\r\n  const triggerUpdateEvent: (...args: StructureSetupEventMap['u']) => boolean = (\r\n    updateHints,\r\n    changedOptions,\r\n    force\r\n  ) => {\r\n    const truthyUpdateHints = keys(updateHints).some((key) => updateHints[key]);\r\n    const changed = truthyUpdateHints || !isEmptyObject(changedOptions) || force;\r\n    if (changed) {\r\n      triggerEvent('u', [updateHints, changedOptions, force]);\r\n    }\r\n    return changed;\r\n  };\r\n  const [destroyObservers, appendObserverElements, updateObservers, updateObserversOptions] =\r\n    createStructureSetupObservers(elements, setState, (updateHints) =>\r\n      triggerUpdateEvent(updateStructure(checkOptionsFallback, updateHints), {}, false)\r\n    );\r\n\r\n  const structureSetupState = getState.bind(0) as (() => StructureSetupState) &\r\n    StructureSetupStaticState;\r\n  structureSetupState._addOnUpdatedListener = (listener) => addEvent('u', listener);\r\n  structureSetupState._appendElements = () => {\r\n    const { _target, _viewport } = elements;\r\n    const initialScrollLeft = scrollLeft(_target);\r\n    const initialScrollTop = scrollTop(_target);\r\n\r\n    appendObserverElements();\r\n    appendStructureElements();\r\n\r\n    scrollLeft(_viewport, initialScrollLeft);\r\n    scrollTop(_viewport, initialScrollTop);\r\n  };\r\n  structureSetupState._elements = elements;\r\n\r\n  return [\r\n    (changedOptions, force?) => {\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      updateObserversOptions(checkOption);\r\n      return triggerUpdateEvent(\r\n        updateStructure(checkOption, updateObservers(), force),\r\n        changedOptions,\r\n        !!force\r\n      );\r\n    },\r\n    structureSetupState,\r\n    () => {\r\n      removeEvent();\r\n      destroyObservers();\r\n      destroyElements();\r\n    },\r\n  ];\r\n};\r\n","import {\n  directionIsRTL,\n  getBoundingClientRect,\n  offsetSize,\n  on,\n  preventDefault,\n  runEachAndClear,\n  stopPropagation,\n  selfClearTimeout,\n  parent,\n  closest,\n  push,\n  attrClass,\n} from '~/support';\nimport { getPlugins, clickScrollPluginName } from '~/plugins';\nimport { getEnvironment } from '~/environment';\nimport {\n  classNameScrollbarHandle,\n  classNameScrollbarInteraction,\n  classNameScrollbarWheel,\n  dataAttributeHost,\n  dataValueHostScrollbarPressed,\n} from '~/classnames';\nimport type { XY } from '~/support';\nimport type { ClickScrollPluginInstance } from '~/plugins';\nimport type { ReadonlyOptions } from '~/options';\nimport type { StructureSetupState } from '~/setups';\nimport type {\n  ScrollbarsSetupElementsObj,\n  ScrollbarStructure,\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\n\nexport type ScrollbarsSetupEvents = (\n  scrollbarStructure: ScrollbarStructure,\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\n  documentElm: Document,\n  hostElm: HTMLElement,\n  scrollOffsetElm: HTMLElement,\n  isHorizontal?: boolean\n) => () => void;\n\nconst { round } = Math;\nconst getScale = (element: HTMLElement): XY<number> => {\n  const { width, height } = getBoundingClientRect(element);\n  const { w, h } = offsetSize(element);\n  return {\n    x: round(width) / w || 1,\n    y: round(height) / h || 1,\n  };\n};\nconst continuePointerDown = (\n  event: PointerEvent,\n  options: ReadonlyOptions,\n  isDragScroll: boolean\n) => {\n  const scrollbarOptions = options.scrollbars;\n  const { button, isPrimary, pointerType } = event;\n  const { pointers } = scrollbarOptions;\n  return (\n    button === 0 &&\n    isPrimary &&\n    scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\n    (pointers || []).includes(pointerType)\n  );\n};\nconst createRootClickStopPropagationEvents = (scrollbar: HTMLElement, documentElm: Document) =>\n  on(\n    scrollbar,\n    'mousedown',\n    on.bind(0, documentElm, 'click', stopPropagation, { _once: true, _capture: true }),\n    { _capture: true }\n  );\nconst releasePointerCaptureEvents = 'pointerup pointerleave pointercancel lostpointercapture';\n\nconst createInteractiveScrollEvents = (\n  options: ReadonlyOptions,\n  hostElm: HTMLElement,\n  documentElm: Document,\n  scrollbarStructure: ScrollbarStructure,\n  scrollOffsetElement: HTMLElement,\n  structureSetupState: () => StructureSetupState,\n  isHorizontal?: boolean\n) => {\n  const { _rtlScrollBehavior } = getEnvironment();\n  const { _handle, _track, _scrollbar } = scrollbarStructure;\n  const scrollLeftTopKey = `scroll${isHorizontal ? 'Left' : 'Top'}`;\n  const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}`; // for pointer event (can't use xy because of IE11)\n  const widthHeightKey = isHorizontal ? 'width' : 'height';\n  const leftTopKey = isHorizontal ? 'left' : 'top'; // for BCR (can't use xy because of IE11)\n  const whKey = isHorizontal ? 'w' : 'h';\n  const xyKey = isHorizontal ? 'x' : 'y';\n\n  const createRelativeHandleMove =\n    (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\n      const { _overflowAmount } = structureSetupState();\n      const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\n      const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\n      const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\n      const isRTL = directionIsRTL(_scrollbar);\n      const negateMultiplactor =\n        isRTL && isHorizontal ? (_rtlScrollBehavior.n || _rtlScrollBehavior.i ? 1 : -1) : 1;\n\n      scrollOffsetElement[scrollLeftTopKey] = mouseDownScroll + scrollDelta * negateMultiplactor;\n    };\n\n  return on(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\n    const isDragScroll =\n      closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\n    const pointerCaptureElement = isDragScroll ? _handle : _track;\n    attrClass(hostElm, dataAttributeHost, dataValueHostScrollbarPressed, true);\n\n    if (continuePointerDown(pointerDownEvent, options, isDragScroll)) {\n      const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\n      const getHandleRect = () => getBoundingClientRect(_handle);\n      const getTrackRect = () => getBoundingClientRect(_track);\n      const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\n        (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\n      const moveHandleRelative = createRelativeHandleMove(\n        scrollOffsetElement[scrollLeftTopKey] || 0,\n        1 / getScale(scrollOffsetElement)[xyKey]\n      );\n      const pointerDownOffset = pointerDownEvent[clientXYKey];\n      const handleRect = getHandleRect();\n      const trackRect = getTrackRect();\n      const handleLength = handleRect[widthHeightKey];\n      const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\n      const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\n      const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\n      const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        runEachAndClear(offFns);\n        pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\n      };\n\n      const offFns = [\n        attrClass.bind(0, hostElm, dataAttributeHost, dataValueHostScrollbarPressed),\n        on(documentElm, releasePointerCaptureEvents, releasePointerCapture),\n        on(documentElm, 'selectstart', (event: Event) => preventDefault(event), {\n          _passive: false,\n        }),\n        on(_track, releasePointerCaptureEvents, releasePointerCapture),\n        on(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\n          const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\n\n          if (isDragScroll || instantClickScroll) {\n            moveHandleRelative(startOffset + relativeMovement);\n          }\n        }),\n      ];\n\n      if (instantClickScroll) {\n        moveHandleRelative(startOffset);\n      } else if (!isDragScroll) {\n        const clickScrollPlugin = getPlugins()[clickScrollPluginName] as\n          | ClickScrollPluginInstance\n          | undefined;\n\n        if (clickScrollPlugin) {\n          push(\n            offFns,\n            clickScrollPlugin._(\n              moveHandleRelative,\n              getHandleOffset,\n              startOffset,\n              handleLength,\n              relativeTrackPointerOffset\n            )\n          );\n        }\n      }\n\n      pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\n    }\n  });\n};\n\nexport const createScrollbarsSetupEvents =\n  (\n    options: ReadonlyOptions,\n    structureSetupState: () => StructureSetupState\n  ): ScrollbarsSetupEvents =>\n  (\n    scrollbarStructure,\n    scrollbarsAddRemoveClass,\n    documentElm,\n    hostElm,\n    scrollOffsetElm,\n    isHorizontal\n  ) => {\n    const { _scrollbar } = scrollbarStructure;\n    const [wheelTimeout, clearScrollTimeout] = selfClearTimeout(333);\n    const scrollByFn = !!scrollOffsetElm.scrollBy;\n    let wheelScrollBy = true;\n\n    return runEachAndClear.bind(0, [\n      on(_scrollbar, 'pointerenter', () => {\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\n      }),\n      on(_scrollbar, 'pointerleave pointercancel', () => {\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction);\n      }),\n      on(\n        _scrollbar,\n        'wheel',\n        (wheelEvent: WheelEvent) => {\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\n\n          // the first wheel event is swallowed, simulate scroll to compensate for it\n          if (scrollByFn && wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === hostElm) {\n            scrollOffsetElm.scrollBy({\n              left: deltaX,\n              top: deltaY,\n              behavior: 'smooth',\n            });\n          }\n\n          wheelScrollBy = false;\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\n          wheelTimeout(() => {\n            wheelScrollBy = true;\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\n          });\n\n          preventDefault(wheelEvent);\n        },\n        { _passive: false, _capture: true }\n      ),\n      createRootClickStopPropagationEvents(_scrollbar, documentElm),\n      createInteractiveScrollEvents(\n        options,\n        hostElm,\n        documentElm,\n        scrollbarStructure,\n        scrollOffsetElm,\n        structureSetupState,\n        isHorizontal\n      ),\n      clearScrollTimeout,\n    ]);\n  };\n","import { getBoundingClientRect } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport type { StructureSetupState } from '~/setups';\n\nconst { min, max, abs, round } = Math;\n\nexport const getScrollbarHandleLengthRatio = (\n  scrollbarHandle: HTMLElement,\n  scrollbarTrack: HTMLElement,\n  isHorizontal?: boolean,\n  structureSetupState?: StructureSetupState\n) => {\n  if (structureSetupState) {\n    const axis = isHorizontal ? 'x' : 'y';\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\n\n    const viewportSize = _overflowEdge[axis];\n    const overflowAmount = _overflowAmount[axis];\n    return max(0, min(1, viewportSize / (viewportSize + overflowAmount)));\n  }\n  const axis = isHorizontal ? 'width' : 'height';\n  const handleSize = getBoundingClientRect(scrollbarHandle)[axis];\n  const trackSize = getBoundingClientRect(scrollbarTrack)[axis];\n  return max(0, min(1, handleSize / trackSize));\n};\n\nexport const getScrollbarHandleOffsetRatio = (\n  scrollbarHandle: HTMLElement,\n  scrollbarTrack: HTMLElement,\n  scrollOffsetElement: HTMLElement,\n  structureSetupState: StructureSetupState,\n  isRTL: boolean,\n  isHorizontal?: boolean\n) => {\n  const { _rtlScrollBehavior } = getEnvironment();\n  const axis = isHorizontal ? 'x' : 'y';\n  const scrollLeftTop = isHorizontal ? 'Left' : 'Top';\n  const { _overflowAmount } = structureSetupState;\n  const scrollPositionMax = round(_overflowAmount[axis]);\n  const scrollPosition = abs(scrollOffsetElement[`scroll${scrollLeftTop}`]);\n  const handleRTL = isHorizontal && isRTL;\n  const rtlNormalizedScrollPosition = _rtlScrollBehavior.i\n    ? scrollPosition\n    : scrollPositionMax - scrollPosition;\n  const finalScrollPosition = handleRTL ? rtlNormalizedScrollPosition : scrollPosition;\n  const scrollPercent = min(1, finalScrollPosition / scrollPositionMax);\n  const lengthRatio = getScrollbarHandleLengthRatio(scrollbarHandle, scrollbarTrack, isHorizontal);\n\n  return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\n};\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  directionIsRTL,\r\n  each,\r\n  isBoolean,\r\n  isEmptyArray,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  setT,\r\n  style,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarTransitionless,\r\n  classNameScrollbarNoCssCustomProps,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport {\r\n  getScrollbarHandleLengthRatio,\r\n  getScrollbarHandleOffsetRatio,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.calculations';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from '~/setups/scrollbarsSetup/scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _handleStyle: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: (structureSetupState: StructureSetupState) => void;\r\n  _refreshScrollbarsHandleOffset: (structureSetupState: StructureSetupState) => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization, _cssCustomProperties } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _documentElm,\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarsHandleStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      style(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    structureSetupState: StructureSetupState,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarsHandleStyle(scrollbarStructures, (structure) => {\r\n      const { _handle, _track } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? 'width' : 'height']: `${(\r\n            getScrollbarHandleLengthRatio(_handle, _track, isHorizontal, structureSetupState) * 100\r\n          ).toFixed(3)}%`,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    structureSetupState: StructureSetupState,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const translateAxis = isHorizontal ? 'X' : 'Y';\r\n    scrollbarsHandleStyle(scrollbarStructures, (structure) => {\r\n      const { _handle, _track, _scrollbar } = structure;\r\n      const offsetRatio = getScrollbarHandleOffsetRatio(\r\n        _handle,\r\n        _track,\r\n        _scrollOffsetElement,\r\n        structureSetupState,\r\n        directionIsRTL(_scrollbar),\r\n        isHorizontal\r\n      );\r\n      // eslint-disable-next-line no-self-compare\r\n      const validOffsetRatio = offsetRatio === offsetRatio; // is false when offset is NaN\r\n      return [\r\n        _handle,\r\n        {\r\n          transform: validOffsetRatio\r\n            ? `translate${translateAxis}(${(offsetRatio * 100).toFixed(3)}%)`\r\n            : '',\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = (structureSetupState: StructureSetupState) => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, structureSetupState, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars, structureSetupState);\r\n  };\r\n  const refreshScrollbarsHandleOffset = (structureSetupState: StructureSetupState) => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, structureSetupState, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars, structureSetupState);\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = isHorizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNameScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass}`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    if (!_cssCustomProperties) {\r\n      addClass(scrollbar, classNameScrollbarNoCssCustomProps);\r\n    }\r\n\r\n    appendChildren(scrollbar, track);\r\n    appendChildren(track, handle);\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      removeElements.bind(0, scrollbar),\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        _documentElm,\r\n        _host,\r\n        _scrollOffsetElement,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = generateScrollbarDOM.bind(0, true);\r\n  const generateVerticalScrollbarStructure = generateScrollbarDOM.bind(0, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      scrollbarsAddRemoveClass(classNameScrollbarTransitionless);\r\n    }, 300);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _handleStyle: scrollbarsHandleStyle.bind(0, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _handleStyle: scrollbarsHandleStyle.bind(0, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n    runEachAndClear.bind(0, destroyFns),\r\n  ];\r\n};\r\n","import { on, runEachAndClear, parent, scrollLeft, scrollTop, selfClearTimeout } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport { createState, createOptionCheck } from '~/setups/setups';\r\nimport { createScrollbarsSetupEvents } from '~/setups/scrollbarsSetup/scrollbarsSetup.events';\r\nimport { createScrollbarsSetupElements } from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n} from '~/classnames';\r\nimport type {\r\n  ScrollbarsSetupElementsObj,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport type { StructureSetupUpdateHints } from '~/setups/structureSetup/structureSetup.update';\r\nimport type {\r\n  ReadonlyOptions,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { Setup, StructureSetupState, StructureSetupStaticState } from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { DeepPartial, OverflowStyle, StyleObject } from '~/typings';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupStaticState {\r\n  _elements: ScrollbarsSetupElementsObj;\r\n  _appendElements: () => void;\r\n}\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  structureSetupState: (() => StructureSetupState) & StructureSetupStaticState,\r\n  onScroll: (event: Event) => void\r\n): Setup<\r\n  ScrollbarsSetupState,\r\n  ScrollbarsSetupStaticState,\r\n  [DeepPartial<StructureSetupUpdateHints>]\r\n> => {\r\n  let autoHideIsMove: boolean;\r\n  let autoHideIsLeave: boolean;\r\n  let autoHideNotNever: boolean;\r\n  let mouseInHost: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let globalAutoHideDelay = 0;\r\n\r\n  const state = createState({});\r\n  const [getState] = state;\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = selfClearTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = selfClearTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = selfClearTimeout(() => globalAutoHideDelay);\r\n  const [elements, appendElements, destroyElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupState._elements,\r\n    createScrollbarsSetupEvents(options, structureSetupState)\r\n  );\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _scrollEventElement,\r\n    _viewportIsTarget,\r\n    _isBody,\r\n  } = structureSetupState._elements;\r\n  const {\r\n    _horizontal,\r\n    _vertical,\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n  } = elements;\r\n  const { _handleStyle: styleHorizontal } = _horizontal;\r\n  const { _handleStyle: styleVertical } = _vertical;\r\n  const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n    const { _scrollbar } = structure;\r\n    const elm = _viewportIsTarget && !_isBody && parent(_scrollbar) === _viewport && _scrollbar;\r\n    return [\r\n      elm,\r\n      {\r\n        transform: elm\r\n          ? `translate(${scrollLeft(_scrollOffsetElement)}px, ${scrollTop(_scrollOffsetElement)}px)`\r\n          : '',\r\n      },\r\n    ] as [HTMLElement | false, StyleObject];\r\n  };\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHidden);\r\n    } else {\r\n      const hide = () => _scrollbarsAddRemoveClass(classNameScrollbarAutoHidden, true);\r\n      if (globalAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const onHostMouseEnter = () => {\r\n    mouseInHost = autoHideIsLeave;\r\n    mouseInHost && manageScrollbarsAutoHide(true);\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    destroyElements,\r\n\r\n    on(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    on(_host, 'pointerenter', onHostMouseEnter),\r\n    on(_host, 'pointerleave', () => {\r\n      mouseInHost = false;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n    }),\r\n    on(_host, 'pointermove', () => {\r\n      autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    on(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset(structureSetupState());\r\n\r\n        autoHideNotNever && manageScrollbarsAutoHide(true);\r\n        scrollTimeout(() => {\r\n          autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n        });\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _viewportIsTarget && styleHorizontal(styleScrollbarPosition);\r\n      _viewportIsTarget && styleVertical(styleScrollbarPosition);\r\n    }),\r\n  ];\r\n  const scrollbarsSetupState = getState.bind(0) as (() => ScrollbarsSetupState) &\r\n    ScrollbarsSetupStaticState;\r\n  scrollbarsSetupState._elements = elements;\r\n  scrollbarsSetupState._appendElements = appendElements;\r\n\r\n  return [\r\n    (changedOptions, force, structureUpdateHints) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _directionChanged,\r\n      } = structureUpdateHints;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      const currStructureSetupState = structureSetupState();\r\n      const { _overflowAmount, _overflowStyle, _directionIsRTL } = currStructureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        checkOption<boolean>('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = checkOption<string | null>('scrollbars.theme');\r\n      const [visibility, visibilityChanged] =\r\n        checkOption<ScrollbarsVisibilityBehavior>('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] =\r\n        checkOption<ScrollbarsAutoHideBehavior>('scrollbars.autoHide');\r\n      const [autoHideDelay] = checkOption<number>('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = checkOption<boolean>('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = checkOption<boolean>('scrollbars.clickScroll');\r\n\r\n      const updateHandle = _overflowEdgeChanged || _overflowAmountChanged || _directionChanged;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (overflowStyle: OverflowStyle, isHorizontal: boolean) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n        return isVisible;\r\n      };\r\n\r\n      globalAutoHideDelay = autoHideDelay;\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n      if (updateHandle) {\r\n        _refreshScrollbarsHandleLength(currStructureSetupState);\r\n        _refreshScrollbarsHandleOffset(currStructureSetupState);\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    scrollbarsSetupState,\r\n    runEachAndClear.bind(0, destroyFns),\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  each,\r\n  isFunction,\r\n  keys,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createStructureSetup, createScrollbarsSetup } from '~/setups';\r\nimport { getPlugins, addPlugin, optionsValidationPluginName } from '~/plugins';\r\nimport type { Environment } from '~/environment';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { Plugin, OptionsValidationPluginInstance, PluginInstance } from '~/plugins';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds one or multiple plugins.\r\n   * @param plugin Either a signle or an array of plugins to add.\r\n   */\r\n  plugin(plugin: Plugin | Plugin[]): void;\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Returns the overlayscrollbars environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Get the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options.\r\n   * @param pure If true the new options will be merged with the current default options instead of the current options.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure If true all already added event listeners will be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds an event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes an event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance. */\r\n  destroy(): void;\r\n}\r\n\r\nconst invokePluginInstance = (\r\n  pluginInstance: PluginInstance,\r\n  staticObj?: OverlayScrollbarsStatic | false | null | undefined | 0,\r\n  instanceObj?: OverlayScrollbars | false | null | undefined | 0\r\n) => {\r\n  if (isFunction(pluginInstance)) {\r\n    pluginInstance(staticObj || undefined, instanceObj || undefined);\r\n  }\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions, _getDefaultInitialization, _addZoomListener, _addResizeListener } =\r\n    getEnvironment();\r\n  const plugins = getPlugins();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const optionsValidationPlugin = getPlugins()[\r\n        optionsValidationPluginName\r\n      ] as OptionsValidationPluginInstance;\r\n      const validate = optionsValidationPlugin && optionsValidationPlugin._;\r\n      return validate ? validate(newOptions, true) : newOptions;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addEvent, removeEvent, triggerEvent] = createEventListenerHub(eventListeners);\r\n    const [updateStructure, structureState, destroyStructure] = createStructureSetup(\r\n      target,\r\n      currentOptions\r\n    );\r\n    const [updateScrollbars, scrollbarsState, destroyScrollbars] = createScrollbarsSetup(\r\n      target,\r\n      currentOptions,\r\n      structureState,\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n    );\r\n    const update = (changedOptions: PartialOptions, force?: boolean): boolean =>\r\n      updateStructure(changedOptions, !!force);\r\n    const forceUpdate = update.bind(0, {}, true);\r\n    const removeZoomListener = _addZoomListener(forceUpdate);\r\n    const removeResizeListener = _addResizeListener(forceUpdate);\r\n    const destroy = (canceled?: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      removeZoomListener();\r\n      removeResizeListener();\r\n\r\n      destroyScrollbars();\r\n      destroyStructure();\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, !!canceled]);\r\n      removeEvent();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            update(changedOptions);\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeEvent(name, listener as any);\r\n      },\r\n      state() {\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _directionIsRTL,\r\n        } = structureState();\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = structureState._elements;\r\n        const { _horizontal, _vertical } = scrollbarsState._elements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              updateScrollbars({}, true, {});\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (force?: boolean) => update({}, force),\r\n      destroy: destroy.bind(0),\r\n    };\r\n\r\n    structureState._addOnUpdatedListener((updateHints, changedOptions, force: boolean) => {\r\n      updateScrollbars(changedOptions, force, updateHints);\r\n    });\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    each(keys(plugins), (pluginName) => invokePluginInstance(plugins[pluginName], 0, instance));\r\n\r\n    if (\r\n      cancelInitialization(\r\n        structureState._elements._isBody,\r\n        _getDefaultInitialization().cancel,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    structureState._appendElements();\r\n    scrollbarsState._appendElements();\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    structureState._addOnUpdatedListener((updateHints, changedOptions, force) => {\r\n      const {\r\n        _sizeChanged,\r\n        _directionChanged,\r\n        _heightIntrinsicChanged,\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _contentMutation,\r\n        _hostMutation,\r\n      } = updateHints;\r\n\r\n      triggerEvent('updated', [\r\n        instance,\r\n        {\r\n          updateHints: {\r\n            sizeChanged: _sizeChanged,\r\n            directionChanged: _directionChanged,\r\n            heightIntrinsicChanged: _heightIntrinsicChanged,\r\n            overflowEdgeChanged: _overflowEdgeChanged,\r\n            overflowAmountChanged: _overflowAmountChanged,\r\n            overflowStyleChanged: _overflowStyleChanged,\r\n            contentMutation: _contentMutation,\r\n            hostMutation: _hostMutation,\r\n          },\r\n          changedOptions,\r\n          force,\r\n        },\r\n      ]);\r\n    });\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  each(addPlugin(plugins), (pluginInstance) =>\r\n    invokePluginInstance(pluginInstance, OverlayScrollbars)\r\n  );\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n","import { useEffect, useMemo, useRef } from 'react';\r\nimport { OverlayScrollbars } from 'overlayscrollbars';\r\nimport type { InitializationTarget } from 'overlayscrollbars';\r\nimport type {\r\n  OverlayScrollbarsComponentProps,\r\n  OverlayScrollbarsComponentRef,\r\n} from './OverlayScrollbarsComponent';\r\n\r\ntype Defer = [\r\n  requestDefer: (callback: () => any, options?: OverlayScrollbarsComponentProps['defer']) => void,\r\n  cancelDefer: () => void\r\n];\r\n\r\nexport interface UseOverlayScrollbarsParams {\r\n  /** OverlayScrollbars options. */\r\n  options?: OverlayScrollbarsComponentProps['options'];\r\n  /** OverlayScrollbars events. */\r\n  events?: OverlayScrollbarsComponentProps['events'];\r\n  /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */\r\n  defer?: OverlayScrollbarsComponentProps['defer'];\r\n}\r\n\r\nexport type UseOverlayScrollbarsInitialization = (target: InitializationTarget) => void;\r\n\r\nexport type UseOverlayScrollbarsInstance = () => ReturnType<\r\n  OverlayScrollbarsComponentRef['osInstance']\r\n>;\r\n\r\nconst createDefer = (): Defer => {\r\n  /* c8 ignore start */\r\n  if (typeof window === 'undefined') {\r\n    // mock ssr calls with \"noop\"\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noop = () => {};\r\n    return [noop, noop];\r\n  }\r\n  /* c8 ignore end */\r\n\r\n  let idleId: number;\r\n  let rafId: number;\r\n  const wnd = window;\r\n  const idleSupported = typeof wnd.requestIdleCallback === 'function';\r\n  const rAF = wnd.requestAnimationFrame;\r\n  const cAF = wnd.cancelAnimationFrame;\r\n  const rIdle = idleSupported ? wnd.requestIdleCallback : rAF;\r\n  const cIdle = idleSupported ? wnd.cancelIdleCallback : cAF;\r\n  const clear = () => {\r\n    cIdle(idleId);\r\n    cAF(rafId);\r\n  };\r\n\r\n  return [\r\n    (callback, options) => {\r\n      clear();\r\n      idleId = rIdle(\r\n        idleSupported\r\n          ? () => {\r\n              clear();\r\n              // inside idle its best practice to use rAF to change DOM for best performance\r\n              rafId = rAF(callback);\r\n            }\r\n          : callback,\r\n        typeof options === 'object' ? options : { timeout: 2233 }\r\n      );\r\n    },\r\n    clear,\r\n  ];\r\n};\r\n\r\n/**\r\n * Hook for advanced usage of OverlayScrollbars. (When the OverlayScrollbarsComponent is not enough)\r\n * @param params Parameters for customization.\r\n * @returns A tuple with two values:\r\n * The first value is the initialization function, it takes one argument which is the `InitializationTarget`.\r\n * The second value is a function which returns the current OverlayScrollbars instance or `null` if not initialized.\r\n */\r\nexport const useOverlayScrollbars = (\r\n  params?: UseOverlayScrollbarsParams\r\n): [UseOverlayScrollbarsInitialization, UseOverlayScrollbarsInstance] => {\r\n  const { options, events, defer } = params || {};\r\n  const [requestDefer, cancelDefer] = useMemo<Defer>(createDefer, []);\r\n  const instanceRef = useRef<ReturnType<UseOverlayScrollbarsInstance>>(null);\r\n  const deferRef = useRef(defer);\r\n  const optionsRef = useRef(options);\r\n  const eventsRef = useRef(events);\r\n\r\n  useEffect(() => {\r\n    deferRef.current = defer;\r\n  }, [defer]);\r\n\r\n  useEffect(() => {\r\n    const { current: instance } = instanceRef;\r\n\r\n    optionsRef.current = options;\r\n\r\n    if (OverlayScrollbars.valid(instance)) {\r\n      instance.options(options || {}, true);\r\n    }\r\n  }, [options]);\r\n\r\n  useEffect(() => {\r\n    const { current: instance } = instanceRef;\r\n\r\n    eventsRef.current = events;\r\n\r\n    if (OverlayScrollbars.valid(instance)) {\r\n      instance.on(events || {}, true);\r\n    }\r\n  }, [events]);\r\n\r\n  useEffect(\r\n    () => () => {\r\n      cancelDefer();\r\n      instanceRef.current?.destroy();\r\n    },\r\n    []\r\n  );\r\n\r\n  return useMemo<[UseOverlayScrollbarsInitialization, UseOverlayScrollbarsInstance]>(\r\n    () => [\r\n      (target) => {\r\n        // if already initialized do nothing\r\n        const presentInstance = instanceRef.current;\r\n        if (OverlayScrollbars.valid(presentInstance)) {\r\n          return;\r\n        }\r\n\r\n        const currDefer = deferRef.current;\r\n        const currOptions = optionsRef.current || {};\r\n        const currEvents = eventsRef.current || {};\r\n        const init = () =>\r\n          (instanceRef.current = OverlayScrollbars(target, currOptions, currEvents));\r\n\r\n        if (currDefer) {\r\n          requestDefer(init, currDefer);\r\n        } else {\r\n          init();\r\n        }\r\n      },\r\n      () => instanceRef.current,\r\n    ],\r\n    []\r\n  );\r\n};\r\n","import { forwardRef, useEffect, useRef, useImperativeHandle } from 'react';\r\nimport type { OverlayScrollbars } from 'overlayscrollbars';\r\nimport type { PartialOptions, EventListeners } from 'overlayscrollbars';\r\nimport type { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react';\r\nimport { useOverlayScrollbars } from './useOverlayScrollbars';\r\n\r\nexport type OverlayScrollbarsComponentProps<T extends keyof JSX.IntrinsicElements = 'div'> =\r\n  ComponentPropsWithoutRef<T> & {\r\n    /** Tag of the root element. */\r\n    element?: T;\r\n    /** OverlayScrollbars options. */\r\n    options?: PartialOptions | false | null;\r\n    /** OverlayScrollbars events. */\r\n    events?: EventListeners | false | null;\r\n    /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */\r\n    defer?: boolean | IdleRequestOptions;\r\n  };\r\n\r\nexport interface OverlayScrollbarsComponentRef<T extends keyof JSX.IntrinsicElements = 'div'> {\r\n  /** Returns the OverlayScrollbars instance or null if not initialized. */\r\n  osInstance(): OverlayScrollbars | null;\r\n  /** Returns the root element. */\r\n  getElement(): ElementRef<T> | null;\r\n}\r\n\r\nconst OverlayScrollbarsComponent = <T extends keyof JSX.IntrinsicElements>(\r\n  props: OverlayScrollbarsComponentProps<T>,\r\n  ref: ForwardedRef<OverlayScrollbarsComponentRef<T>>\r\n) => {\r\n  const { element = 'div', options, events, defer, children, ...other } = props;\r\n  const Tag = element;\r\n  const elementRef = useRef<ElementRef<T>>(null);\r\n  const childrenRef = useRef<HTMLDivElement>(null);\r\n  const [initialize, osInstance] = useOverlayScrollbars({ options, events, defer });\r\n\r\n  useEffect(() => {\r\n    const { current: elm } = elementRef;\r\n    const { current: childrenElm } = childrenRef;\r\n    if (elm && childrenElm) {\r\n      initialize({\r\n        target: elm as any,\r\n        elements: {\r\n          viewport: childrenElm,\r\n          content: childrenElm,\r\n        },\r\n      });\r\n    }\r\n    return () => osInstance()?.destroy();\r\n  }, [initialize, element]);\r\n\r\n  useImperativeHandle(\r\n    ref,\r\n    () => {\r\n      return {\r\n        osInstance,\r\n        getElement: () => elementRef.current,\r\n      };\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    // @ts-ignore\r\n    <Tag data-overlayscrollbars-initialize=\"\" ref={elementRef} {...other}>\r\n      <div ref={childrenRef}>{children}</div>\r\n    </Tag>\r\n  );\r\n};\r\n\r\nconst OverlayScrollbarsComponentForwardedRef = forwardRef(OverlayScrollbarsComponent) as <\r\n  T extends keyof JSX.IntrinsicElements\r\n>(\r\n  props: OverlayScrollbarsComponentProps<T> & {\r\n    ref?: ForwardedRef<OverlayScrollbarsComponentRef<T>>;\r\n  }\r\n) => ReturnType<typeof OverlayScrollbarsComponent>;\r\n\r\nexport { OverlayScrollbarsComponentForwardedRef as OverlayScrollbarsComponent };\r\n"],"names":["each","t","n","isArrayLike","o","length","Object","keys","style","isString","isArray","s","e","window","getComputedStyle","getCSSVal","reduce","setCSSVal","m","Lt","createCache","r","u","_","c","cacheUpdateContextual","i","l","isClient","Node","ELEMENT_NODE","_Object$prototype","prototype","toString","hasOwnProperty","isUndefined","isNull","type","concat","call","replace","toLowerCase","isNumber","isBoolean","isFunction","Array","isObject","isPlainObject","isHTMLElement","HTMLElement","nodeType","isElement","Element","indexOf","push","apply","from","Set","forEach","isEmptyArray","runEachAndClear","assignDeep","isEmptyObject","getSetProp","attr","getAttribute","setAttribute","removeAttr","removeAttribute","attrClass","split","join","trim","scrollLeft","scrollTop","find","document","querySelectorAll","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","liesBetween","querySelector","findFirst","before","createDocumentFragment","previousSibling","appendChild","nextSibling","firstChild","insertBefore","appendChildren","insertAfter","removeElements","removeChild","createDiv","createElement","createDOM","innerHTML","firstLetterToUpper","charAt","toUpperCase","slice","cssProperty","jsAPI","a","d","f","setTimeout","h","clearTimeout","v","classListAction","classList","match","removeClass","remove","addClass","add","bind","equal","Math","max","equalWH","equalXY","equalTRBL","equalBCRWH","round","noop","selfClearTimeout","debounce","_ref","g","p","this","mergeParms","flush","arguments","w","b","opacity","zindex","parseToZeroOrNumber","parseFloat","parseInt","getPropertyValue","setProperty","adaptCSSVal","directionIsRTL","topRightBottomLeft","offsetSize","offsetWidth","offsetHeight","clientSize","clientWidth","clientHeight","scrollSize","scrollWidth","scrollHeight","fractionalSize","getBoundingClientRect","splitEventNames","off","removeEventListener","on","addEventListener","defineProperty","get","supportPassiveEvents","S","$","C","passive","capture","stopPropagation","preventDefault","y","x","absoluteCoordinates","left","pageYOffset","top","pageXOffset","manageListener","createEventListenerHub","Map","removeEvent","clear","addEvent","set","opsStringify","JSON","stringify","Error","paddingAbsolute","showNativeOverlaidScrollbars","update","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","dragScroll","clickScroll","pointers","getOptionsDiff","O","z","T","E","I","A","H","P","D","M","R","k","B","Y","j","N","q","G","J","K","Q","tt","nt","ot","st","et","ct","rt","it","lt","at","ut","dt","ft","getPlugins","xt","Tt","abs","It","getNativeScrollbarSize","getRtlScrollBehavior","overflowX","overflowY","direction","getFlexboxGlue","createEnvironment","body","_createEventListenerH","_createEventListenerH2","_slicedToArray","_createCache","_createCache2","_i","getNativeScrollbarsHiding","elements","host","padding","viewport","ownerDocument","content","slot","cancel","nativeScrollbarsOverlaid","L","V","F","X","U","getEnvironment","resolveInitialization","staticInitializationElement","dynamicInitializationElement","Ht","WeakMap","getInstance","getPropByPath","createOptionCheck","createState","Pt","Dt","unwrap","createStructureSetupElements","_ref5","target","documentElement","defaultView","W","Z","activeElement","has","hasAttrClass","_t","elementIsGenerated","focus","revertViewportTabIndex","createTrinsicUpdateSegment","ht","vt","height","gt","wt","createPaddingUpdateSegment","_n9","_createCache3","_createCache4","_a3","_a4","_getEnvironment3","bt","yt","_n10","_n11","_l3","_l4","marginRight","marginBottom","marginLeft","right","width","paddingTop","paddingRight","paddingBottom","paddingLeft","St","Mt","Rt","kt","Bt","Yt","jt","overflowIsVisible","createOverflowUpdateSegment","_n13","_getEnvironment4","_createCache5","_createCache6","_createCache7","_createCache8","_createCache9","_createCache10","_createCache11","_createCache12","_createCache13","fixFlexboxGlue","_o8","$t","getViewportOverflowState","getStatePerAxis","_getStatePerAxis","_getStatePerAxis2","_getStatePerAxis3","_getStatePerAxis4","Ct","hideNativeScrollbars","_ref2","_ref3","Ot","_o10","_n15","_n16","_n17","_n18","_P","_P2","_Q","_Q2","_tt","_tt2","innerWidth","innerHeight","devicePixelRatio","getOverflowAmount","_ot","_ot2","_nt","_nt2","_tt3","_tt4","_Q3","_Q4","setAxisOverflowStyle","_setAxisOverflowStyle","_setAxisOverflowStyle2","_setAxisOverflowStyle3","_setAxisOverflowStyle4","setViewportOverflowState","_z","_z2","zt","Et","At","prepareUpdateHints","createDOMObserver","_ref6","_createEventContentCh","updateElements","_o13","contains","delete","createEventContentChange","_createEventContentCh2","observerCallback","attributeName","oldValue","addedNodes","removedNodes","size","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","Nt","domRectHasDimensions","createSizeObserver","_ref7","_ref7$Bt","_ref7$Vt","Vt","_createCache15","onSizeChangedCallbackProxy","_f6","pop","contentRect","_f7","_c$O","_c$O2","_createCache17","_o15","createTrinsicObserver","_createCache19","triggerOnTrinsicChangedCallback","isIntersecting","intersectionRatio","isHeightIntrinsic","intersectionObserverCallback","root","onSizeChanged","_createSizeObserver","_createSizeObserver2","qt","Ft","Gt","Xt","Ut","createStructureSetupObservers","_createCache21","updateViewportAttrsFromHost","onTrinsicChanged","_t22","_ref8","_s15","onContentMutation","_v4","onHostMutation","_ref9","_ref10","_ref11","_ref12","_createDOMObserver","_createDOMObserver2","_t24","_t26","_t27","_t28","_t29","_t30","_t31","ignoreMutationFromOptions","Wt","createStructureSetup","_createEventListenerH3","_createEventListenerH4","_createStructureSetup","_createStructureSetup2","createInitialStructureSetupUpdateState","_a6","_getEnvironment5","createStructureSetupUpdate","triggerUpdateEvent","some","_createStructureSetup3","_createStructureSetup4","Zt","createRootClickStopPropagationEvents","Jt","createInteractiveScrollEvents","createRelativeHandleMove","button","isPrimary","pointerType","includes","continuePointerDown","shiftKey","getHandleRect","getTrackRect","getHandleOffset","_getBoundingClientRec","_offsetSize","getScale","releasePointerCapture","pointerId","setPointerCapture","Kt","min","Qt","tn","nn","getScrollbarHandleLengthRatio","createScrollbarsSetupElements","_getEnvironment10","scrollbarStructureAddRemoveClass","scrollbarsHandleStyle","_n30","_n31","scrollbarStructureRefreshHandleLength","_defineProperty","toFixed","scrollbarStructureRefreshHandleOffset","getScrollbarHandleOffsetRatio","transform","scrollbarsAddRemoveClass","generateScrollbarDOM","createScrollbarsSetup","_selfClearTimeout3","_selfClearTimeout4","_selfClearTimeout5","_selfClearTimeout6","_selfClearTimeout7","_selfClearTimeout8","_selfClearTimeout9","_selfClearTimeout10","_selfClearTimeout11","_selfClearTimeout12","_createScrollbarsSetu","_selfClearTimeout","_selfClearTimeout2","scrollBy","deltaX","deltaY","deltaMode","behavior","createScrollbarsSetupEvents","_createScrollbarsSetu2","_o$qt","styleScrollbarPosition","manageScrollbarsAutoHide","hide","onHostMouseEnter","_v7","_v8","_v9","_v10","_v11","_v12","_v13","_v14","_v15","_v17","_v18","_v19","_v20","setScrollbarVisibility","invokePluginInstance","OverlayScrollbars","_getEnvironment12","validateOptions","_createEventListenerH5","_createEventListenerH6","_createStructureSetup5","_createStructureSetup6","_createScrollbarsSetu3","_createScrollbarsSetu4","destroy","removeInstance","options","state","_g5","overflowEdge","overflowAmount","overflowStyle","hasOverflow","directionRTL","destroyed","_g4$qt","_b4$qt","translateScrollbarStructure","scrollbar","track","handle","translateScrollbarsSetupElement","clone","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","addInstance","_ref4","_getEnvironment","cancelInitialization","updateHints","sizeChanged","directionChanged","heightIntrinsicChanged","overflowEdgeChanged","overflowAmountChanged","overflowStyleChanged","contentMutation","hostMutation","changedOptions","force","plugin","addPlugin","valid","env","_getEnvironment13","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","rtlScrollBehavior","flexboxGlue","cssCustomProperties","staticDefaultInitialization","staticDefaultOptions","getDefaultInitialization","setDefaultInitialization","getDefaultOptions","setDefaultOptions","requestIdleCallback","requestAnimationFrame","cancelAnimationFrame","cancelIdleCallback","timeout","_l$element","element","events","defer","children","_objectWithoutProperties","_excluded","_S","_w","_w2","current","_S2","osInstance","getElement","_objectSpread","ref"],"sourceRoot":""}
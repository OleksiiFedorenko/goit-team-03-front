{"version":3,"file":"static/js/871.74832e6c.chunk.js","mappings":"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","sources":["components/AuthFormLogin/AuthFormLogin.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { getLogin, fetchCurrentUser } from 'store/auth/operations';\nimport { setRefreshToken, setAccessToken } from 'store/auth/authSlice';\n\nimport {\n  Button,\n  TextField,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n  FormControl,\n  Box,\n} from '@mui/material';\nimport RemoveRedEyeOutlinedIcon from '@mui/icons-material/RemoveRedEyeOutlined';\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';\nimport { useFormik } from 'formik';\nimport { form } from '../../styles';\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email()\n    .matches(/^[^@]+@[^@]+\\..+$/, 'email must be a valid email')\n    .required(),\n  password: yup.string().required(),\n});\n\nexport const AuthFormLogin = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n  const dispatch = useDispatch();\n\n  const [searchParams] = useSearchParams();\n  const accessToken = searchParams.get('accessToken');\n  const refreshToken = searchParams.get('refreshToken');\n  if (accessToken) {\n    dispatch(setAccessToken(accessToken));\n    dispatch(setRefreshToken(refreshToken));\n    dispatch(fetchCurrentUser());\n  }\n\n  const onSubmit = (values, { setSubmitting }) => {\n    console.log(JSON.stringify(values, null, 2));\n    dispatch(getLogin(values));\n    setSubmitting(false);\n  };\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit,\n  });\n\n  return (\n    <FormControl onSubmit={formik.handleSubmit} sx={form.form} component=\"form\">\n      {formik.touched.email && formik.errors.email ? (\n        <Box component=\"div\" sx={form.error}>\n          {formik.errors.email.toWellFormed()}\n        </Box>\n      ) : null}\n\n      <TextField\n        name=\"email\"\n        variant=\"outlined\"\n        placeholder=\"Enter your email\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        fullWidth\n        color=\"input\"\n        inputProps={{\n          style: { color: '#FFF' },\n        }}\n        sx={form.input}\n      />\n\n      {formik.touched.password && formik.errors.password ? (\n        <Box component=\"div\" sx={form.error}>\n          {formik.errors.password}\n        </Box>\n      ) : null}\n\n      <OutlinedInput\n        name=\"password\"\n        type={showPassword ? 'text' : 'password'}\n        placeholder=\"Create a password\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        onBlur={formik.handleBlur}\n        fullWidth\n        color=\"input\"\n        sx={form.input}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              onClick={handleClickShowPassword}\n              edge=\"end\"\n              sx={form.icon}\n            >\n              {showPassword ? (\n                <RemoveRedEyeOutlinedIcon />\n              ) : (\n                <VisibilityOffOutlinedIcon />\n              )}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n\n      <Button\n        color=\"button\"\n        variant=\"contained\"\n        fullWidth\n        type=\"submit\"\n        sx={form.button}\n      >\n        Log In Now\n      </Button>\n    </FormControl>\n  );\n};\n","import { AuthFormLogin } from 'components/AuthFormLogin';\n\nconst LoginPage = () => {\n  return <AuthFormLogin />;\n};\n\nexport default LoginPage;\n"],"names":["validationSchema","yup","shape","email","matches","required","password","AuthFormLogin","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","dispatch","useDispatch","_useSearchParams","useSearchParams","searchParams","accessToken","get","refreshToken","setAccessToken","setRefreshToken","fetchCurrentUser","formik","useFormik","initialValues","onSubmit","values","_ref","setSubmitting","console","log","JSON","stringify","getLogin","_jsxs","FormControl","handleSubmit","sx","form","component","children","touched","errors","_jsx","Box","toWellFormed","TextField","name","variant","placeholder","value","onChange","handleChange","onBlur","handleBlur","error","Boolean","fullWidth","color","inputProps","style","OutlinedInput","type","endAdornment","InputAdornment","position","IconButton","onClick","show","edge","RemoveRedEyeOutlinedIcon","VisibilityOffOutlinedIcon","Button"],"sourceRoot":""}
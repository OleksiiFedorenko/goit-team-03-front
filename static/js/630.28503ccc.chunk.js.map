{"version":3,"file":"static/js/630.28503ccc.chunk.js","mappings":"kWAkBMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAAaG,OAAOC,WAC1BC,MAAOL,EAAAA,KAEJK,QACAC,QAAQ,oBAAqB,+BAC7BF,WACHG,SAAUP,EAAAA,KAAaQ,IAAI,GAAGJ,aAGnBK,EAAmB,WAC9B,IAAAC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAE9BI,GAAWC,EAAAA,EAAAA,MAcXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAPoB,CACpBlB,KAAM,GACNG,MAAO,GACPE,SAAU,IAKVR,iBAAAA,EACAsB,SAfe,SAACC,EAAMC,GAAyB,IAArBC,EAAaD,EAAbC,cAE1BR,GAASS,EAAAA,EAAAA,IAAgBH,IACzBE,GAAc,EAChB,IAcA,OACEE,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAACN,SAAUH,EAAOU,aAAcC,GAAIC,EAAAA,GAAAA,GAAWC,UAAU,OAAMC,SAAA,CACxEd,EAAOe,QAAQ/B,MAAQgB,EAAOgB,OAAOhC,MACpCiC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACP,GAAIC,EAAAA,GAAAA,GAAWE,SAAEd,EAAOgB,OAAOhC,OAClC,MAEJiC,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CACRnC,KAAK,OACLoC,KAAK,OACLC,QAAQ,WACRC,YAAY,kBACZC,MAAOvB,EAAOI,OAAOpB,KACrBwC,SAAUxB,EAAOyB,aACjBC,OAAQ1B,EAAO2B,WACfC,MAAO5B,EAAOe,QAAQ/B,MAAQ6C,QAAQ7B,EAAOgB,OAAOhC,MACpD8C,MAAM,QACNC,WAAS,EACTpB,GAAIC,EAAAA,GAAAA,GACJoB,WAAY,CACVC,MAAO,CAAEH,MAAO,YAInB9B,EAAOe,QAAQ5B,OAASa,EAAOgB,OAAO7B,OACrC8B,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACL,UAAU,MAAMF,GAAIC,EAAAA,GAAAA,GAAWE,SACjCd,EAAOgB,OAAO7B,QAEf,MAEJ8B,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CACRnC,KAAK,QACLqC,QAAQ,WACRC,YAAY,mBACZC,MAAOvB,EAAOI,OAAOjB,MACrBqC,SAAUxB,EAAOyB,aACjBC,OAAQ1B,EAAO2B,WACfC,MAAO5B,EAAOe,QAAQ5B,OAAS0C,QAAQ7B,EAAOgB,OAAO7B,OACrD4C,WAAS,EACTC,WAAY,CACVC,MAAO,CAAEH,MAAO,UAElBA,MAAM,QACNnB,GAAIC,EAAAA,GAAAA,KAGLZ,EAAOe,QAAQ1B,UAAYW,EAAOgB,OAAO3B,UACxC4B,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACL,UAAU,MAAMF,GAAIC,EAAAA,GAAAA,GAAWE,SACjCd,EAAOgB,OAAO3B,WAEf,MAEJ4B,EAAAA,EAAAA,KAACiB,EAAAA,EAAa,CACZlD,KAAK,WACLoC,KAAMxB,EAAe,OAAS,WAC9B0B,YAAY,oBACZC,MAAOvB,EAAOI,OAAOf,SACrBmC,SAAUxB,EAAOyB,aACjBG,MAAO5B,EAAOe,QAAQ1B,UAAYwC,QAAQ7B,EAAOgB,OAAO3B,UACxDqC,OAAQ1B,EAAO2B,WACfI,WAAS,EACTD,MAAM,QACNnB,GAAIC,EAAAA,GAAAA,GACJuB,cACElB,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAACC,SAAS,MAAKvB,UAC5BG,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CACTC,QAtFoB,WAAH,OAAS1C,GAAgB,SAAA2C,GAAI,OAAKA,CAAI,GAAE,EAuFzDC,KAAK,MACL9B,GAAIC,EAAAA,GAAAA,GAAUE,SAEblB,GACCqB,EAAAA,EAAAA,KAACyB,EAAAA,EAAwB,KAEzBzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAyB,WAOpC1B,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CACLd,MAAM,SACNT,QAAQ,YACRU,WAAS,EACTX,KAAK,SACLT,GAAIC,EAAAA,GAAAA,GAAYE,SACjB,mBAKP,ECvIA,EAJqB,WACnB,OAAOG,EAAAA,EAAAA,KAAC1B,EAAgB,GAC1B,C","sources":["components/AuthFormRegister/AuthFormRegister.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { getRegistration } from 'store/auth/operations';\nimport {\n  Button,\n  TextField,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n  Box,\n  FormControl,\n} from '@mui/material';\nimport RemoveRedEyeOutlinedIcon from '@mui/icons-material/RemoveRedEyeOutlined';\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';\nimport { useFormik } from 'formik';\nimport { form } from '../../styles';\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().trim().required(),\n  email: yup\n    .string()\n    .email()\n    .matches(/^[^@]+@[^@]+\\..+$/, 'email must be a valid email')\n    .required(),\n  password: yup.string().min(8).required(),\n});\n\nexport const AuthFormRegister = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, { setSubmitting }) => {\n    // console.log(JSON.stringify(values, null, 2));\n    dispatch(getRegistration(values));\n    setSubmitting(false);\n  };\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit,\n  });\n\n  return (\n    <FormControl onSubmit={formik.handleSubmit} sx={form.form} component=\"form\">\n      {formik.touched.name && formik.errors.name ? (\n        <Box sx={form.error}>{formik.errors.name}</Box>\n      ) : null}\n\n      <TextField\n        name=\"name\"\n        type=\"text\"\n        variant=\"outlined\"\n        placeholder=\"Enter your name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        color=\"input\"\n        fullWidth\n        sx={form.input}\n        inputProps={{\n          style: { color: 'white' },\n        }}\n      />\n\n      {formik.touched.email && formik.errors.email ? (\n        <Box component=\"div\" sx={form.error}>\n          {formik.errors.email}\n        </Box>\n      ) : null}\n\n      <TextField\n        name=\"email\"\n        variant=\"outlined\"\n        placeholder=\"Enter your email\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        fullWidth\n        inputProps={{\n          style: { color: 'white' },\n        }}\n        color=\"input\"\n        sx={form.input}\n      />\n\n      {formik.touched.password && formik.errors.password ? (\n        <Box component=\"div\" sx={form.error}>\n          {formik.errors.password}\n        </Box>\n      ) : null}\n\n      <OutlinedInput\n        name=\"password\"\n        type={showPassword ? 'text' : 'password'}\n        placeholder=\"Create a password\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        onBlur={formik.handleBlur}\n        fullWidth\n        color=\"input\"\n        sx={form.input}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              onClick={handleClickShowPassword}\n              edge=\"end\"\n              sx={form.icon}\n            >\n              {showPassword ? (\n                <RemoveRedEyeOutlinedIcon />\n              ) : (\n                <VisibilityOffOutlinedIcon />\n              )}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n\n      <Button\n        color=\"button\"\n        variant=\"contained\"\n        fullWidth\n        type=\"submit\"\n        sx={form.button}\n      >\n        Register Now\n      </Button>\n    </FormControl>\n  );\n};\n","import { AuthFormRegister } from 'components/AuthFormRegister';\n\nconst RegisterPage = () => {\n  return <AuthFormRegister />;\n};\n\nexport default RegisterPage;\n"],"names":["validationSchema","yup","shape","name","trim","required","email","matches","password","min","AuthFormRegister","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","_ref","setSubmitting","getRegistration","_jsxs","FormControl","handleSubmit","sx","form","component","children","touched","errors","_jsx","Box","TextField","type","variant","placeholder","value","onChange","handleChange","onBlur","handleBlur","error","Boolean","color","fullWidth","inputProps","style","OutlinedInput","endAdornment","InputAdornment","position","IconButton","onClick","show","edge","RemoveRedEyeOutlinedIcon","VisibilityOffOutlinedIcon","Button"],"sourceRoot":""}